// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/paralin/go-rift-api/models"
)

// GetLolClashV2PlaymodeRestrictedReader is a Reader for the GetLolClashV2PlaymodeRestricted structure.
type GetLolClashV2PlaymodeRestrictedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLolClashV2PlaymodeRestrictedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLolClashV2PlaymodeRestrictedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetLolClashV2PlaymodeRestrictedOK creates a GetLolClashV2PlaymodeRestrictedOK with default headers values
func NewGetLolClashV2PlaymodeRestrictedOK() *GetLolClashV2PlaymodeRestrictedOK {
	return &GetLolClashV2PlaymodeRestrictedOK{}
}

/*GetLolClashV2PlaymodeRestrictedOK handles this case with default header values.

Successful response
*/
type GetLolClashV2PlaymodeRestrictedOK struct {
	Payload *models.LolClashPlaymodeRestrictedInfo
}

func (o *GetLolClashV2PlaymodeRestrictedOK) Error() string {
	return fmt.Sprintf("[GET /lol-clash/v2/playmode-restricted][%d] getLolClashV2PlaymodeRestrictedOK  %+v", 200, o.Payload)
}

func (o *GetLolClashV2PlaymodeRestrictedOK) GetPayload() *models.LolClashPlaymodeRestrictedInfo {
	return o.Payload
}

func (o *GetLolClashV2PlaymodeRestrictedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LolClashPlaymodeRestrictedInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
