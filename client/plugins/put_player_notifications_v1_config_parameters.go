// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/paralin/go-rift-api/models"
)

// NewPutPlayerNotificationsV1ConfigParams creates a new PutPlayerNotificationsV1ConfigParams object
// with the default values initialized.
func NewPutPlayerNotificationsV1ConfigParams() *PutPlayerNotificationsV1ConfigParams {
	var ()
	return &PutPlayerNotificationsV1ConfigParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutPlayerNotificationsV1ConfigParamsWithTimeout creates a new PutPlayerNotificationsV1ConfigParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutPlayerNotificationsV1ConfigParamsWithTimeout(timeout time.Duration) *PutPlayerNotificationsV1ConfigParams {
	var ()
	return &PutPlayerNotificationsV1ConfigParams{

		timeout: timeout,
	}
}

// NewPutPlayerNotificationsV1ConfigParamsWithContext creates a new PutPlayerNotificationsV1ConfigParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutPlayerNotificationsV1ConfigParamsWithContext(ctx context.Context) *PutPlayerNotificationsV1ConfigParams {
	var ()
	return &PutPlayerNotificationsV1ConfigParams{

		Context: ctx,
	}
}

// NewPutPlayerNotificationsV1ConfigParamsWithHTTPClient creates a new PutPlayerNotificationsV1ConfigParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutPlayerNotificationsV1ConfigParamsWithHTTPClient(client *http.Client) *PutPlayerNotificationsV1ConfigParams {
	var ()
	return &PutPlayerNotificationsV1ConfigParams{
		HTTPClient: client,
	}
}

/*PutPlayerNotificationsV1ConfigParams contains all the parameters to send to the API endpoint
for the put player notifications v1 config operation typically these are written to a http.Request
*/
type PutPlayerNotificationsV1ConfigParams struct {

	/*Config*/
	Config *models.PlayerNotificationsPlayerNotificationConfigResource

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put player notifications v1 config params
func (o *PutPlayerNotificationsV1ConfigParams) WithTimeout(timeout time.Duration) *PutPlayerNotificationsV1ConfigParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put player notifications v1 config params
func (o *PutPlayerNotificationsV1ConfigParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put player notifications v1 config params
func (o *PutPlayerNotificationsV1ConfigParams) WithContext(ctx context.Context) *PutPlayerNotificationsV1ConfigParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put player notifications v1 config params
func (o *PutPlayerNotificationsV1ConfigParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put player notifications v1 config params
func (o *PutPlayerNotificationsV1ConfigParams) WithHTTPClient(client *http.Client) *PutPlayerNotificationsV1ConfigParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put player notifications v1 config params
func (o *PutPlayerNotificationsV1ConfigParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConfig adds the config to the put player notifications v1 config params
func (o *PutPlayerNotificationsV1ConfigParams) WithConfig(config *models.PlayerNotificationsPlayerNotificationConfigResource) *PutPlayerNotificationsV1ConfigParams {
	o.SetConfig(config)
	return o
}

// SetConfig adds the config to the put player notifications v1 config params
func (o *PutPlayerNotificationsV1ConfigParams) SetConfig(config *models.PlayerNotificationsPlayerNotificationConfigResource) {
	o.Config = config
}

// WriteToRequest writes these params to a swagger request
func (o *PutPlayerNotificationsV1ConfigParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Config != nil {
		if err := r.SetBodyParam(o.Config); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
