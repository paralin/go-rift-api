// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/paralin/go-rift-api/models"
)

// NewPutVoiceChatV1PushToTalkParams creates a new PutVoiceChatV1PushToTalkParams object
// with the default values initialized.
func NewPutVoiceChatV1PushToTalkParams() *PutVoiceChatV1PushToTalkParams {
	var ()
	return &PutVoiceChatV1PushToTalkParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutVoiceChatV1PushToTalkParamsWithTimeout creates a new PutVoiceChatV1PushToTalkParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutVoiceChatV1PushToTalkParamsWithTimeout(timeout time.Duration) *PutVoiceChatV1PushToTalkParams {
	var ()
	return &PutVoiceChatV1PushToTalkParams{

		timeout: timeout,
	}
}

// NewPutVoiceChatV1PushToTalkParamsWithContext creates a new PutVoiceChatV1PushToTalkParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutVoiceChatV1PushToTalkParamsWithContext(ctx context.Context) *PutVoiceChatV1PushToTalkParams {
	var ()
	return &PutVoiceChatV1PushToTalkParams{

		Context: ctx,
	}
}

// NewPutVoiceChatV1PushToTalkParamsWithHTTPClient creates a new PutVoiceChatV1PushToTalkParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutVoiceChatV1PushToTalkParamsWithHTTPClient(client *http.Client) *PutVoiceChatV1PushToTalkParams {
	var ()
	return &PutVoiceChatV1PushToTalkParams{
		HTTPClient: client,
	}
}

/*PutVoiceChatV1PushToTalkParams contains all the parameters to send to the API endpoint
for the put voice chat v1 push to talk operation typically these are written to a http.Request
*/
type PutVoiceChatV1PushToTalkParams struct {

	/*PushToTalk*/
	PushToTalk *models.VoiceChatPushToTalkResource

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put voice chat v1 push to talk params
func (o *PutVoiceChatV1PushToTalkParams) WithTimeout(timeout time.Duration) *PutVoiceChatV1PushToTalkParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put voice chat v1 push to talk params
func (o *PutVoiceChatV1PushToTalkParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put voice chat v1 push to talk params
func (o *PutVoiceChatV1PushToTalkParams) WithContext(ctx context.Context) *PutVoiceChatV1PushToTalkParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put voice chat v1 push to talk params
func (o *PutVoiceChatV1PushToTalkParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put voice chat v1 push to talk params
func (o *PutVoiceChatV1PushToTalkParams) WithHTTPClient(client *http.Client) *PutVoiceChatV1PushToTalkParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put voice chat v1 push to talk params
func (o *PutVoiceChatV1PushToTalkParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPushToTalk adds the pushToTalk to the put voice chat v1 push to talk params
func (o *PutVoiceChatV1PushToTalkParams) WithPushToTalk(pushToTalk *models.VoiceChatPushToTalkResource) *PutVoiceChatV1PushToTalkParams {
	o.SetPushToTalk(pushToTalk)
	return o
}

// SetPushToTalk adds the pushToTalk to the put voice chat v1 push to talk params
func (o *PutVoiceChatV1PushToTalkParams) SetPushToTalk(pushToTalk *models.VoiceChatPushToTalkResource) {
	o.PushToTalk = pushToTalk
}

// WriteToRequest writes these params to a swagger request
func (o *PutVoiceChatV1PushToTalkParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PushToTalk != nil {
		if err := r.SetBodyParam(o.PushToTalk); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
