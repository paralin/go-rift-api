// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/paralin/go-rift-api/models"
)

// GetLolGameQueuesV1CustomNonDefaultReader is a Reader for the GetLolGameQueuesV1CustomNonDefault structure.
type GetLolGameQueuesV1CustomNonDefaultReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLolGameQueuesV1CustomNonDefaultReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLolGameQueuesV1CustomNonDefaultOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetLolGameQueuesV1CustomNonDefaultOK creates a GetLolGameQueuesV1CustomNonDefaultOK with default headers values
func NewGetLolGameQueuesV1CustomNonDefaultOK() *GetLolGameQueuesV1CustomNonDefaultOK {
	return &GetLolGameQueuesV1CustomNonDefaultOK{}
}

/*GetLolGameQueuesV1CustomNonDefaultOK handles this case with default header values.

Successful response
*/
type GetLolGameQueuesV1CustomNonDefaultOK struct {
	Payload *models.LolGameQueuesQueueCustomGame
}

func (o *GetLolGameQueuesV1CustomNonDefaultOK) Error() string {
	return fmt.Sprintf("[GET /lol-game-queues/v1/custom-non-default][%d] getLolGameQueuesV1CustomNonDefaultOK  %+v", 200, o.Payload)
}

func (o *GetLolGameQueuesV1CustomNonDefaultOK) GetPayload() *models.LolGameQueuesQueueCustomGame {
	return o.Payload
}

func (o *GetLolGameQueuesV1CustomNonDefaultOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LolGameQueuesQueueCustomGame)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
