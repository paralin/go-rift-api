// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewHeadByPluginAssetsByPathParams creates a new HeadByPluginAssetsByPathParams object
// with the default values initialized.
func NewHeadByPluginAssetsByPathParams() *HeadByPluginAssetsByPathParams {
	var ()
	return &HeadByPluginAssetsByPathParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewHeadByPluginAssetsByPathParamsWithTimeout creates a new HeadByPluginAssetsByPathParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewHeadByPluginAssetsByPathParamsWithTimeout(timeout time.Duration) *HeadByPluginAssetsByPathParams {
	var ()
	return &HeadByPluginAssetsByPathParams{

		timeout: timeout,
	}
}

// NewHeadByPluginAssetsByPathParamsWithContext creates a new HeadByPluginAssetsByPathParams object
// with the default values initialized, and the ability to set a context for a request
func NewHeadByPluginAssetsByPathParamsWithContext(ctx context.Context) *HeadByPluginAssetsByPathParams {
	var ()
	return &HeadByPluginAssetsByPathParams{

		Context: ctx,
	}
}

// NewHeadByPluginAssetsByPathParamsWithHTTPClient creates a new HeadByPluginAssetsByPathParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewHeadByPluginAssetsByPathParamsWithHTTPClient(client *http.Client) *HeadByPluginAssetsByPathParams {
	var ()
	return &HeadByPluginAssetsByPathParams{
		HTTPClient: client,
	}
}

/*HeadByPluginAssetsByPathParams contains all the parameters to send to the API endpoint
for the head by plugin assets by path operation typically these are written to a http.Request
*/
type HeadByPluginAssetsByPathParams struct {

	/*IfNoneMatch
	  optional ETag of the asset that the caller has cached

	*/
	IfNoneMatch *string
	/*Path
	  Path to the asset to serve

	*/
	Path string
	/*Plugin
	  Plugin name to serve from

	*/
	Plugin string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the head by plugin assets by path params
func (o *HeadByPluginAssetsByPathParams) WithTimeout(timeout time.Duration) *HeadByPluginAssetsByPathParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the head by plugin assets by path params
func (o *HeadByPluginAssetsByPathParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the head by plugin assets by path params
func (o *HeadByPluginAssetsByPathParams) WithContext(ctx context.Context) *HeadByPluginAssetsByPathParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the head by plugin assets by path params
func (o *HeadByPluginAssetsByPathParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the head by plugin assets by path params
func (o *HeadByPluginAssetsByPathParams) WithHTTPClient(client *http.Client) *HeadByPluginAssetsByPathParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the head by plugin assets by path params
func (o *HeadByPluginAssetsByPathParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIfNoneMatch adds the ifNoneMatch to the head by plugin assets by path params
func (o *HeadByPluginAssetsByPathParams) WithIfNoneMatch(ifNoneMatch *string) *HeadByPluginAssetsByPathParams {
	o.SetIfNoneMatch(ifNoneMatch)
	return o
}

// SetIfNoneMatch adds the ifNoneMatch to the head by plugin assets by path params
func (o *HeadByPluginAssetsByPathParams) SetIfNoneMatch(ifNoneMatch *string) {
	o.IfNoneMatch = ifNoneMatch
}

// WithPath adds the path to the head by plugin assets by path params
func (o *HeadByPluginAssetsByPathParams) WithPath(path string) *HeadByPluginAssetsByPathParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the head by plugin assets by path params
func (o *HeadByPluginAssetsByPathParams) SetPath(path string) {
	o.Path = path
}

// WithPlugin adds the plugin to the head by plugin assets by path params
func (o *HeadByPluginAssetsByPathParams) WithPlugin(plugin string) *HeadByPluginAssetsByPathParams {
	o.SetPlugin(plugin)
	return o
}

// SetPlugin adds the plugin to the head by plugin assets by path params
func (o *HeadByPluginAssetsByPathParams) SetPlugin(plugin string) {
	o.Plugin = plugin
}

// WriteToRequest writes these params to a swagger request
func (o *HeadByPluginAssetsByPathParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IfNoneMatch != nil {

		// header param if-none-match
		if err := r.SetHeaderParam("if-none-match", *o.IfNoneMatch); err != nil {
			return err
		}

	}

	// path param path
	if err := r.SetPathParam("path", o.Path); err != nil {
		return err
	}

	// path param plugin
	if err := r.SetPathParam("plugin", o.Plugin); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
