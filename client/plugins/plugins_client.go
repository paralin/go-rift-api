// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new plugins API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for plugins API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteGcloudVoiceChatV2Sessions delete gcloud voice chat v2 sessions API
*/
func (a *Client) DeleteGcloudVoiceChatV2Sessions(params *DeleteGcloudVoiceChatV2SessionsParams) (*DeleteGcloudVoiceChatV2SessionsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGcloudVoiceChatV2SessionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteGcloudVoiceChatV2Sessions",
		Method:             "DELETE",
		PathPattern:        "/gcloud-voice-chat/v2/sessions",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteGcloudVoiceChatV2SessionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGcloudVoiceChatV2SessionsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteGcloudVoiceChatV2Sessions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteGcloudVoiceChatV2SessionsByID delete gcloud voice chat v2 sessions by Id API
*/
func (a *Client) DeleteGcloudVoiceChatV2SessionsByID(params *DeleteGcloudVoiceChatV2SessionsByIDParams) (*DeleteGcloudVoiceChatV2SessionsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGcloudVoiceChatV2SessionsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteGcloudVoiceChatV2SessionsById",
		Method:             "DELETE",
		PathPattern:        "/gcloud-voice-chat/v2/sessions/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteGcloudVoiceChatV2SessionsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGcloudVoiceChatV2SessionsByIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteGcloudVoiceChatV2SessionsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolChatV1BlockedPlayersByID delete lol chat v1 blocked players by Id API
*/
func (a *Client) DeleteLolChatV1BlockedPlayersByID(params *DeleteLolChatV1BlockedPlayersByIDParams) (*DeleteLolChatV1BlockedPlayersByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolChatV1BlockedPlayersByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolChatV1BlockedPlayersById",
		Method:             "DELETE",
		PathPattern:        "/lol-chat/v1/blocked-players/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolChatV1BlockedPlayersByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolChatV1BlockedPlayersByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolChatV1BlockedPlayersById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolChatV1ConversationsActive delete lol chat v1 conversations active API
*/
func (a *Client) DeleteLolChatV1ConversationsActive(params *DeleteLolChatV1ConversationsActiveParams) (*DeleteLolChatV1ConversationsActiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolChatV1ConversationsActiveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolChatV1ConversationsActive",
		Method:             "DELETE",
		PathPattern:        "/lol-chat/v1/conversations/active",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolChatV1ConversationsActiveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolChatV1ConversationsActiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolChatV1ConversationsActive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolChatV1ConversationsByID delete lol chat v1 conversations by Id API
*/
func (a *Client) DeleteLolChatV1ConversationsByID(params *DeleteLolChatV1ConversationsByIDParams) (*DeleteLolChatV1ConversationsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolChatV1ConversationsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolChatV1ConversationsById",
		Method:             "DELETE",
		PathPattern:        "/lol-chat/v1/conversations/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolChatV1ConversationsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolChatV1ConversationsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolChatV1ConversationsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolChatV1ConversationsByIDMessages delete lol chat v1 conversations by Id messages API
*/
func (a *Client) DeleteLolChatV1ConversationsByIDMessages(params *DeleteLolChatV1ConversationsByIDMessagesParams) (*DeleteLolChatV1ConversationsByIDMessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolChatV1ConversationsByIDMessagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolChatV1ConversationsByIdMessages",
		Method:             "DELETE",
		PathPattern:        "/lol-chat/v1/conversations/{id}/messages",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolChatV1ConversationsByIDMessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolChatV1ConversationsByIDMessagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolChatV1ConversationsByIdMessages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolChatV1ErrorsByID delete lol chat v1 errors by Id API
*/
func (a *Client) DeleteLolChatV1ErrorsByID(params *DeleteLolChatV1ErrorsByIDParams) (*DeleteLolChatV1ErrorsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolChatV1ErrorsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolChatV1ErrorsById",
		Method:             "DELETE",
		PathPattern:        "/lol-chat/v1/errors/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolChatV1ErrorsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolChatV1ErrorsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolChatV1ErrorsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolChatV1FriendGroupsByID delete lol chat v1 friend groups by Id API
*/
func (a *Client) DeleteLolChatV1FriendGroupsByID(params *DeleteLolChatV1FriendGroupsByIDParams) (*DeleteLolChatV1FriendGroupsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolChatV1FriendGroupsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolChatV1FriendGroupsById",
		Method:             "DELETE",
		PathPattern:        "/lol-chat/v1/friend-groups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolChatV1FriendGroupsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolChatV1FriendGroupsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolChatV1FriendGroupsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolChatV1FriendRequestsByID delete lol chat v1 friend requests by Id API
*/
func (a *Client) DeleteLolChatV1FriendRequestsByID(params *DeleteLolChatV1FriendRequestsByIDParams) (*DeleteLolChatV1FriendRequestsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolChatV1FriendRequestsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolChatV1FriendRequestsById",
		Method:             "DELETE",
		PathPattern:        "/lol-chat/v1/friend-requests/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolChatV1FriendRequestsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolChatV1FriendRequestsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolChatV1FriendRequestsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolChatV1FriendsByID delete lol chat v1 friends by Id API
*/
func (a *Client) DeleteLolChatV1FriendsByID(params *DeleteLolChatV1FriendsByIDParams) (*DeleteLolChatV1FriendsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolChatV1FriendsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolChatV1FriendsById",
		Method:             "DELETE",
		PathPattern:        "/lol-chat/v1/friends/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolChatV1FriendsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolChatV1FriendsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolChatV1FriendsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolChatV1Session delete lol chat v1 session API
*/
func (a *Client) DeleteLolChatV1Session(params *DeleteLolChatV1SessionParams) (*DeleteLolChatV1SessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolChatV1SessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolChatV1Session",
		Method:             "DELETE",
		PathPattern:        "/lol-chat/v1/session",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolChatV1SessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolChatV1SessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolChatV1Session: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolChatV1SettingsByKey delete lol chat v1 settings by key API
*/
func (a *Client) DeleteLolChatV1SettingsByKey(params *DeleteLolChatV1SettingsByKeyParams) (*DeleteLolChatV1SettingsByKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolChatV1SettingsByKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolChatV1SettingsByKey",
		Method:             "DELETE",
		PathPattern:        "/lol-chat/v1/settings/{key}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolChatV1SettingsByKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolChatV1SettingsByKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolChatV1SettingsByKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolClashV1Voice delete lol clash v1 voice API
*/
func (a *Client) DeleteLolClashV1Voice(params *DeleteLolClashV1VoiceParams) (*DeleteLolClashV1VoiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolClashV1VoiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolClashV1Voice",
		Method:             "DELETE",
		PathPattern:        "/lol-clash/v1/voice",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolClashV1VoiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolClashV1VoiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolClashV1Voice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolClashV1VoiceDelayByDelaySeconds delete lol clash v1 voice delay by delay seconds API
*/
func (a *Client) DeleteLolClashV1VoiceDelayByDelaySeconds(params *DeleteLolClashV1VoiceDelayByDelaySecondsParams) (*DeleteLolClashV1VoiceDelayByDelaySecondsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolClashV1VoiceDelayByDelaySecondsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolClashV1VoiceDelayByDelaySeconds",
		Method:             "DELETE",
		PathPattern:        "/lol-clash/v1/voice-delay/{delaySeconds}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolClashV1VoiceDelayByDelaySecondsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolClashV1VoiceDelayByDelaySecondsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolClashV1VoiceDelayByDelaySeconds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolClubsV1ClubsByClubKey delete lol clubs v1 clubs by club key API
*/
func (a *Client) DeleteLolClubsV1ClubsByClubKey(params *DeleteLolClubsV1ClubsByClubKeyParams) (*DeleteLolClubsV1ClubsByClubKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolClubsV1ClubsByClubKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolClubsV1ClubsByClubKey",
		Method:             "DELETE",
		PathPattern:        "/lol-clubs/v1/clubs/{clubKey}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolClubsV1ClubsByClubKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolClubsV1ClubsByClubKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolClubsV1ClubsByClubKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolClubsV1ClubsByClubKeyInvitationsBySummonerID delete lol clubs v1 clubs by club key invitations by summoner Id API
*/
func (a *Client) DeleteLolClubsV1ClubsByClubKeyInvitationsBySummonerID(params *DeleteLolClubsV1ClubsByClubKeyInvitationsBySummonerIDParams) (*DeleteLolClubsV1ClubsByClubKeyInvitationsBySummonerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolClubsV1ClubsByClubKeyInvitationsBySummonerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolClubsV1ClubsByClubKeyInvitationsBySummonerId",
		Method:             "DELETE",
		PathPattern:        "/lol-clubs/v1/clubs/{clubKey}/invitations/{summonerId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolClubsV1ClubsByClubKeyInvitationsBySummonerIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolClubsV1ClubsByClubKeyInvitationsBySummonerIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolClubsV1ClubsByClubKeyInvitationsBySummonerId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolClubsV1ClubsByClubKeyMembersBySummonerID delete lol clubs v1 clubs by club key members by summoner Id API
*/
func (a *Client) DeleteLolClubsV1ClubsByClubKeyMembersBySummonerID(params *DeleteLolClubsV1ClubsByClubKeyMembersBySummonerIDParams) (*DeleteLolClubsV1ClubsByClubKeyMembersBySummonerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolClubsV1ClubsByClubKeyMembersBySummonerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolClubsV1ClubsByClubKeyMembersBySummonerId",
		Method:             "DELETE",
		PathPattern:        "/lol-clubs/v1/clubs/{clubKey}/members/{summonerId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolClubsV1ClubsByClubKeyMembersBySummonerIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolClubsV1ClubsByClubKeyMembersBySummonerIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolClubsV1ClubsByClubKeyMembersBySummonerId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolClubsV1ClubsByClubKeyNominationsBySummonerID delete lol clubs v1 clubs by club key nominations by summoner Id API
*/
func (a *Client) DeleteLolClubsV1ClubsByClubKeyNominationsBySummonerID(params *DeleteLolClubsV1ClubsByClubKeyNominationsBySummonerIDParams) (*DeleteLolClubsV1ClubsByClubKeyNominationsBySummonerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolClubsV1ClubsByClubKeyNominationsBySummonerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolClubsV1ClubsByClubKeyNominationsBySummonerId",
		Method:             "DELETE",
		PathPattern:        "/lol-clubs/v1/clubs/{clubKey}/nominations/{summonerId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolClubsV1ClubsByClubKeyNominationsBySummonerIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolClubsV1ClubsByClubKeyNominationsBySummonerIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolClubsV1ClubsByClubKeyNominationsBySummonerId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolClubsV1ClubsByClubKeyPromotionsBySummonerID delete lol clubs v1 clubs by club key promotions by summoner Id API
*/
func (a *Client) DeleteLolClubsV1ClubsByClubKeyPromotionsBySummonerID(params *DeleteLolClubsV1ClubsByClubKeyPromotionsBySummonerIDParams) (*DeleteLolClubsV1ClubsByClubKeyPromotionsBySummonerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolClubsV1ClubsByClubKeyPromotionsBySummonerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolClubsV1ClubsByClubKeyPromotionsBySummonerId",
		Method:             "DELETE",
		PathPattern:        "/lol-clubs/v1/clubs/{clubKey}/promotions/{summonerId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolClubsV1ClubsByClubKeyPromotionsBySummonerIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolClubsV1ClubsByClubKeyPromotionsBySummonerIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolClubsV1ClubsByClubKeyPromotionsBySummonerId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolCosmeticsV1SelectionCompanion delete lol cosmetics v1 selection companion API
*/
func (a *Client) DeleteLolCosmeticsV1SelectionCompanion(params *DeleteLolCosmeticsV1SelectionCompanionParams) (*DeleteLolCosmeticsV1SelectionCompanionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolCosmeticsV1SelectionCompanionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolCosmeticsV1SelectionCompanion",
		Method:             "DELETE",
		PathPattern:        "/lol-cosmetics/v1/selection/companion",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolCosmeticsV1SelectionCompanionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolCosmeticsV1SelectionCompanionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolCosmeticsV1SelectionCompanion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolCosmeticsV1SelectionTftMapSkin delete lol cosmetics v1 selection tft map skin API
*/
func (a *Client) DeleteLolCosmeticsV1SelectionTftMapSkin(params *DeleteLolCosmeticsV1SelectionTftMapSkinParams) (*DeleteLolCosmeticsV1SelectionTftMapSkinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolCosmeticsV1SelectionTftMapSkinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolCosmeticsV1SelectionTftMapSkin",
		Method:             "DELETE",
		PathPattern:        "/lol-cosmetics/v1/selection/tft-map-skin",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolCosmeticsV1SelectionTftMapSkinReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolCosmeticsV1SelectionTftMapSkinOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolCosmeticsV1SelectionTftMapSkin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolGameClientChatV1IgnoredSummoners delete lol game client chat v1 ignored summoners API
*/
func (a *Client) DeleteLolGameClientChatV1IgnoredSummoners(params *DeleteLolGameClientChatV1IgnoredSummonersParams) (*DeleteLolGameClientChatV1IgnoredSummonersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolGameClientChatV1IgnoredSummonersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolGameClientChatV1IgnoredSummoners",
		Method:             "DELETE",
		PathPattern:        "/lol-game-client-chat/v1/ignored-summoners",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolGameClientChatV1IgnoredSummonersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolGameClientChatV1IgnoredSummonersNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolGameClientChatV1IgnoredSummoners: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolGameflowV1EarlyExitNotificationsEog delete lol gameflow v1 early exit notifications eog API
*/
func (a *Client) DeleteLolGameflowV1EarlyExitNotificationsEog(params *DeleteLolGameflowV1EarlyExitNotificationsEogParams) (*DeleteLolGameflowV1EarlyExitNotificationsEogNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolGameflowV1EarlyExitNotificationsEogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolGameflowV1EarlyExitNotificationsEog",
		Method:             "DELETE",
		PathPattern:        "/lol-gameflow/v1/early-exit-notifications/eog",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolGameflowV1EarlyExitNotificationsEogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolGameflowV1EarlyExitNotificationsEogNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolGameflowV1EarlyExitNotificationsEog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolGameflowV1EarlyExitNotificationsEogByKey delete lol gameflow v1 early exit notifications eog by key API
*/
func (a *Client) DeleteLolGameflowV1EarlyExitNotificationsEogByKey(params *DeleteLolGameflowV1EarlyExitNotificationsEogByKeyParams) (*DeleteLolGameflowV1EarlyExitNotificationsEogByKeyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolGameflowV1EarlyExitNotificationsEogByKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolGameflowV1EarlyExitNotificationsEogByKey",
		Method:             "DELETE",
		PathPattern:        "/lol-gameflow/v1/early-exit-notifications/eog/{key}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolGameflowV1EarlyExitNotificationsEogByKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolGameflowV1EarlyExitNotificationsEogByKeyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolGameflowV1EarlyExitNotificationsEogByKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolGameflowV1EarlyExitNotificationsMissions delete lol gameflow v1 early exit notifications missions API
*/
func (a *Client) DeleteLolGameflowV1EarlyExitNotificationsMissions(params *DeleteLolGameflowV1EarlyExitNotificationsMissionsParams) (*DeleteLolGameflowV1EarlyExitNotificationsMissionsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolGameflowV1EarlyExitNotificationsMissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolGameflowV1EarlyExitNotificationsMissions",
		Method:             "DELETE",
		PathPattern:        "/lol-gameflow/v1/early-exit-notifications/missions",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolGameflowV1EarlyExitNotificationsMissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolGameflowV1EarlyExitNotificationsMissionsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolGameflowV1EarlyExitNotificationsMissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolGameflowV1EarlyExitNotificationsMissionsByKey delete lol gameflow v1 early exit notifications missions by key API
*/
func (a *Client) DeleteLolGameflowV1EarlyExitNotificationsMissionsByKey(params *DeleteLolGameflowV1EarlyExitNotificationsMissionsByKeyParams) (*DeleteLolGameflowV1EarlyExitNotificationsMissionsByKeyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolGameflowV1EarlyExitNotificationsMissionsByKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolGameflowV1EarlyExitNotificationsMissionsByKey",
		Method:             "DELETE",
		PathPattern:        "/lol-gameflow/v1/early-exit-notifications/missions/{key}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolGameflowV1EarlyExitNotificationsMissionsByKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolGameflowV1EarlyExitNotificationsMissionsByKeyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolGameflowV1EarlyExitNotificationsMissionsByKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolHighlightsV1HighlightsByID delete lol highlights v1 highlights by Id API
*/
func (a *Client) DeleteLolHighlightsV1HighlightsByID(params *DeleteLolHighlightsV1HighlightsByIDParams) (*DeleteLolHighlightsV1HighlightsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolHighlightsV1HighlightsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolHighlightsV1HighlightsById",
		Method:             "DELETE",
		PathPattern:        "/lol-highlights/v1/highlights/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolHighlightsV1HighlightsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolHighlightsV1HighlightsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolHighlightsV1HighlightsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolLeaverBusterV1NotificationsByID delete lol leaver buster v1 notifications by Id API
*/
func (a *Client) DeleteLolLeaverBusterV1NotificationsByID(params *DeleteLolLeaverBusterV1NotificationsByIDParams) (*DeleteLolLeaverBusterV1NotificationsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolLeaverBusterV1NotificationsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolLeaverBusterV1NotificationsById",
		Method:             "DELETE",
		PathPattern:        "/lol-leaver-buster/v1/notifications/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolLeaverBusterV1NotificationsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolLeaverBusterV1NotificationsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolLeaverBusterV1NotificationsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolLoadoutsV4LoadoutsByID delete lol loadouts v4 loadouts by Id API
*/
func (a *Client) DeleteLolLoadoutsV4LoadoutsByID(params *DeleteLolLoadoutsV4LoadoutsByIDParams) (*DeleteLolLoadoutsV4LoadoutsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolLoadoutsV4LoadoutsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolLoadoutsV4LoadoutsById",
		Method:             "DELETE",
		PathPattern:        "/lol-loadouts/v4/loadouts/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolLoadoutsV4LoadoutsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolLoadoutsV4LoadoutsByIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolLoadoutsV4LoadoutsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolLobbyTeamBuilderV1Lobby delete lol lobby team builder v1 lobby API
*/
func (a *Client) DeleteLolLobbyTeamBuilderV1Lobby(params *DeleteLolLobbyTeamBuilderV1LobbyParams) (*DeleteLolLobbyTeamBuilderV1LobbyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolLobbyTeamBuilderV1LobbyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolLobbyTeamBuilderV1Lobby",
		Method:             "DELETE",
		PathPattern:        "/lol-lobby-team-builder/v1/lobby",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolLobbyTeamBuilderV1LobbyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolLobbyTeamBuilderV1LobbyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolLobbyTeamBuilderV1Lobby: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolLobbyV1Clash delete lol lobby v1 clash API
*/
func (a *Client) DeleteLolLobbyV1Clash(params *DeleteLolLobbyV1ClashParams) (*DeleteLolLobbyV1ClashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolLobbyV1ClashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolLobbyV1Clash",
		Method:             "DELETE",
		PathPattern:        "/lol-lobby/v1/clash",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolLobbyV1ClashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolLobbyV1ClashOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolLobbyV1Clash: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolLobbyV1LobbyCustomBotsBySummonerInternalName delete lol lobby v1 lobby custom bots by summoner internal name API
*/
func (a *Client) DeleteLolLobbyV1LobbyCustomBotsBySummonerInternalName(params *DeleteLolLobbyV1LobbyCustomBotsBySummonerInternalNameParams) (*DeleteLolLobbyV1LobbyCustomBotsBySummonerInternalNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolLobbyV1LobbyCustomBotsBySummonerInternalNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolLobbyV1LobbyCustomBotsBySummonerInternalName",
		Method:             "DELETE",
		PathPattern:        "/lol-lobby/v1/lobby/custom/bots/{summonerInternalName}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolLobbyV1LobbyCustomBotsBySummonerInternalNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolLobbyV1LobbyCustomBotsBySummonerInternalNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolLobbyV1LobbyCustomBotsBySummonerInternalName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolLobbyV2Lobby delete lol lobby v2 lobby API
*/
func (a *Client) DeleteLolLobbyV2Lobby(params *DeleteLolLobbyV2LobbyParams) (*DeleteLolLobbyV2LobbyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolLobbyV2LobbyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolLobbyV2Lobby",
		Method:             "DELETE",
		PathPattern:        "/lol-lobby/v2/lobby",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolLobbyV2LobbyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolLobbyV2LobbyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolLobbyV2Lobby: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolLobbyV2LobbyMatchmakingSearch delete lol lobby v2 lobby matchmaking search API
*/
func (a *Client) DeleteLolLobbyV2LobbyMatchmakingSearch(params *DeleteLolLobbyV2LobbyMatchmakingSearchParams) (*DeleteLolLobbyV2LobbyMatchmakingSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolLobbyV2LobbyMatchmakingSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolLobbyV2LobbyMatchmakingSearch",
		Method:             "DELETE",
		PathPattern:        "/lol-lobby/v2/lobby/matchmaking/search",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolLobbyV2LobbyMatchmakingSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolLobbyV2LobbyMatchmakingSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolLobbyV2LobbyMatchmakingSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolLobbyV2NotificationsByNotificationID delete lol lobby v2 notifications by notification Id API
*/
func (a *Client) DeleteLolLobbyV2NotificationsByNotificationID(params *DeleteLolLobbyV2NotificationsByNotificationIDParams) (*DeleteLolLobbyV2NotificationsByNotificationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolLobbyV2NotificationsByNotificationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolLobbyV2NotificationsByNotificationId",
		Method:             "DELETE",
		PathPattern:        "/lol-lobby/v2/notifications/{notificationId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolLobbyV2NotificationsByNotificationIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolLobbyV2NotificationsByNotificationIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolLobbyV2NotificationsByNotificationId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolLoginV1ServiceProxyAsyncRequestsByServiceNameByMethodName delete lol login v1 service proxy async requests by service name by method name API
*/
func (a *Client) DeleteLolLoginV1ServiceProxyAsyncRequestsByServiceNameByMethodName(params *DeleteLolLoginV1ServiceProxyAsyncRequestsByServiceNameByMethodNameParams) (*DeleteLolLoginV1ServiceProxyAsyncRequestsByServiceNameByMethodNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolLoginV1ServiceProxyAsyncRequestsByServiceNameByMethodNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolLoginV1ServiceProxyAsyncRequestsByServiceNameByMethodName",
		Method:             "DELETE",
		PathPattern:        "/lol-login/v1/service-proxy-async-requests/{serviceName}/{methodName}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolLoginV1ServiceProxyAsyncRequestsByServiceNameByMethodNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolLoginV1ServiceProxyAsyncRequestsByServiceNameByMethodNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolLoginV1ServiceProxyAsyncRequestsByServiceNameByMethodName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolLoginV1Session delete lol login v1 session API
*/
func (a *Client) DeleteLolLoginV1Session(params *DeleteLolLoginV1SessionParams) (*DeleteLolLoginV1SessionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolLoginV1SessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolLoginV1Session",
		Method:             "DELETE",
		PathPattern:        "/lol-login/v1/session",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolLoginV1SessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolLoginV1SessionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolLoginV1Session: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolLoginV1ShutdownLocksByLockName delete lol login v1 shutdown locks by lock name API
*/
func (a *Client) DeleteLolLoginV1ShutdownLocksByLockName(params *DeleteLolLoginV1ShutdownLocksByLockNameParams) (*DeleteLolLoginV1ShutdownLocksByLockNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolLoginV1ShutdownLocksByLockNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolLoginV1ShutdownLocksByLockName",
		Method:             "DELETE",
		PathPattern:        "/lol-login/v1/shutdown-locks/{lockName}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolLoginV1ShutdownLocksByLockNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolLoginV1ShutdownLocksByLockNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolLoginV1ShutdownLocksByLockName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolLootV1LootGrantsByID delete lol loot v1 loot grants by Id API
*/
func (a *Client) DeleteLolLootV1LootGrantsByID(params *DeleteLolLootV1LootGrantsByIDParams) (*DeleteLolLootV1LootGrantsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolLootV1LootGrantsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolLootV1LootGrantsById",
		Method:             "DELETE",
		PathPattern:        "/lol-loot/v1/loot-grants/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolLootV1LootGrantsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolLootV1LootGrantsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolLootV1LootGrantsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolLootV1PlayerLootByLootIDNewNotification delete lol loot v1 player loot by loot Id new notification API
*/
func (a *Client) DeleteLolLootV1PlayerLootByLootIDNewNotification(params *DeleteLolLootV1PlayerLootByLootIDNewNotificationParams) (*DeleteLolLootV1PlayerLootByLootIDNewNotificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolLootV1PlayerLootByLootIDNewNotificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolLootV1PlayerLootByLootIdNewNotification",
		Method:             "DELETE",
		PathPattern:        "/lol-loot/v1/player-loot/{lootId}/new-notification",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolLootV1PlayerLootByLootIDNewNotificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolLootV1PlayerLootByLootIDNewNotificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolLootV1PlayerLootByLootIdNewNotification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolMatchmakingV1Search delete lol matchmaking v1 search API
*/
func (a *Client) DeleteLolMatchmakingV1Search(params *DeleteLolMatchmakingV1SearchParams) (*DeleteLolMatchmakingV1SearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolMatchmakingV1SearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolMatchmakingV1Search",
		Method:             "DELETE",
		PathPattern:        "/lol-matchmaking/v1/search",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolMatchmakingV1SearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolMatchmakingV1SearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolMatchmakingV1Search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolPatchV1NotificationsByID delete lol patch v1 notifications by Id API
*/
func (a *Client) DeleteLolPatchV1NotificationsByID(params *DeleteLolPatchV1NotificationsByIDParams) (*DeleteLolPatchV1NotificationsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolPatchV1NotificationsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolPatchV1NotificationsById",
		Method:             "DELETE",
		PathPattern:        "/lol-patch/v1/notifications/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolPatchV1NotificationsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolPatchV1NotificationsByIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolPatchV1NotificationsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolPerksV1Pages delete lol perks v1 pages API
*/
func (a *Client) DeleteLolPerksV1Pages(params *DeleteLolPerksV1PagesParams) (*DeleteLolPerksV1PagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolPerksV1PagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolPerksV1Pages",
		Method:             "DELETE",
		PathPattern:        "/lol-perks/v1/pages",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolPerksV1PagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolPerksV1PagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolPerksV1Pages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolPerksV1PagesByID delete lol perks v1 pages by Id API
*/
func (a *Client) DeleteLolPerksV1PagesByID(params *DeleteLolPerksV1PagesByIDParams) (*DeleteLolPerksV1PagesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolPerksV1PagesByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolPerksV1PagesById",
		Method:             "DELETE",
		PathPattern:        "/lol-perks/v1/pages/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolPerksV1PagesByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolPerksV1PagesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolPerksV1PagesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolPerksV1PagesByIDAutoModifiedSelections delete lol perks v1 pages by Id auto modified selections API
*/
func (a *Client) DeleteLolPerksV1PagesByIDAutoModifiedSelections(params *DeleteLolPerksV1PagesByIDAutoModifiedSelectionsParams) (*DeleteLolPerksV1PagesByIDAutoModifiedSelectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolPerksV1PagesByIDAutoModifiedSelectionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolPerksV1PagesByIdAutoModifiedSelections",
		Method:             "DELETE",
		PathPattern:        "/lol-perks/v1/pages/{id}/auto-modified-selections",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolPerksV1PagesByIDAutoModifiedSelectionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolPerksV1PagesByIDAutoModifiedSelectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolPerksV1PagesByIdAutoModifiedSelections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolPlayerBehaviorV1ReporterFeedbackByID delete lol player behavior v1 reporter feedback by Id API
*/
func (a *Client) DeleteLolPlayerBehaviorV1ReporterFeedbackByID(params *DeleteLolPlayerBehaviorV1ReporterFeedbackByIDParams) (*DeleteLolPlayerBehaviorV1ReporterFeedbackByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolPlayerBehaviorV1ReporterFeedbackByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolPlayerBehaviorV1ReporterFeedbackById",
		Method:             "DELETE",
		PathPattern:        "/lol-player-behavior/v1/reporter-feedback/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolPlayerBehaviorV1ReporterFeedbackByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolPlayerBehaviorV1ReporterFeedbackByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolPlayerBehaviorV1ReporterFeedbackById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolPlayerMessagingV1CelebrationNotificationByIDAcknowledge delete lol player messaging v1 celebration notification by Id acknowledge API
*/
func (a *Client) DeleteLolPlayerMessagingV1CelebrationNotificationByIDAcknowledge(params *DeleteLolPlayerMessagingV1CelebrationNotificationByIDAcknowledgeParams) (*DeleteLolPlayerMessagingV1CelebrationNotificationByIDAcknowledgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolPlayerMessagingV1CelebrationNotificationByIDAcknowledgeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolPlayerMessagingV1CelebrationNotificationByIdAcknowledge",
		Method:             "DELETE",
		PathPattern:        "/lol-player-messaging/v1/celebration/notification/{id}/acknowledge",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolPlayerMessagingV1CelebrationNotificationByIDAcknowledgeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolPlayerMessagingV1CelebrationNotificationByIDAcknowledgeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolPlayerMessagingV1CelebrationNotificationByIdAcknowledge: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolPlayerMessagingV1NotificationByIDAcknowledge delete lol player messaging v1 notification by Id acknowledge API
*/
func (a *Client) DeleteLolPlayerMessagingV1NotificationByIDAcknowledge(params *DeleteLolPlayerMessagingV1NotificationByIDAcknowledgeParams) (*DeleteLolPlayerMessagingV1NotificationByIDAcknowledgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolPlayerMessagingV1NotificationByIDAcknowledgeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolPlayerMessagingV1NotificationByIdAcknowledge",
		Method:             "DELETE",
		PathPattern:        "/lol-player-messaging/v1/notification/{id}/acknowledge",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolPlayerMessagingV1NotificationByIDAcknowledgeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolPlayerMessagingV1NotificationByIDAcknowledgeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolPlayerMessagingV1NotificationByIdAcknowledge: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolPreEndOfGameV1RegistrationBySequenceEventName delete lol pre end of game v1 registration by sequence event name API
*/
func (a *Client) DeleteLolPreEndOfGameV1RegistrationBySequenceEventName(params *DeleteLolPreEndOfGameV1RegistrationBySequenceEventNameParams) (*DeleteLolPreEndOfGameV1RegistrationBySequenceEventNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolPreEndOfGameV1RegistrationBySequenceEventNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolPreEndOfGameV1RegistrationBySequenceEventName",
		Method:             "DELETE",
		PathPattern:        "/lol-pre-end-of-game/v1/registration/{sequenceEventName}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolPreEndOfGameV1RegistrationBySequenceEventNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolPreEndOfGameV1RegistrationBySequenceEventNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolPreEndOfGameV1RegistrationBySequenceEventName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolPremadeVoiceV1MicTest delete lol premade voice v1 mic test API
*/
func (a *Client) DeleteLolPremadeVoiceV1MicTest(params *DeleteLolPremadeVoiceV1MicTestParams) (*DeleteLolPremadeVoiceV1MicTestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolPremadeVoiceV1MicTestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolPremadeVoiceV1MicTest",
		Method:             "DELETE",
		PathPattern:        "/lol-premade-voice/v1/mic-test",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolPremadeVoiceV1MicTestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolPremadeVoiceV1MicTestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolPremadeVoiceV1MicTest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolPremadeVoiceV1Session delete lol premade voice v1 session API
*/
func (a *Client) DeleteLolPremadeVoiceV1Session(params *DeleteLolPremadeVoiceV1SessionParams) (*DeleteLolPremadeVoiceV1SessionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolPremadeVoiceV1SessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolPremadeVoiceV1Session",
		Method:             "DELETE",
		PathPattern:        "/lol-premade-voice/v1/session",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolPremadeVoiceV1SessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolPremadeVoiceV1SessionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolPremadeVoiceV1Session: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolRmsV1ChampionMasteryLeaveupUpdateByID delete lol rms v1 champion mastery leaveup update by Id API
*/
func (a *Client) DeleteLolRmsV1ChampionMasteryLeaveupUpdateByID(params *DeleteLolRmsV1ChampionMasteryLeaveupUpdateByIDParams) (*DeleteLolRmsV1ChampionMasteryLeaveupUpdateByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolRmsV1ChampionMasteryLeaveupUpdateByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolRmsV1ChampionMasteryLeaveupUpdateById",
		Method:             "DELETE",
		PathPattern:        "/lol-rms/v1/champion-mastery-leaveup-update/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolRmsV1ChampionMasteryLeaveupUpdateByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolRmsV1ChampionMasteryLeaveupUpdateByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolRmsV1ChampionMasteryLeaveupUpdateById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolRsoAuthV1AuthHintsHint delete lol rso auth v1 auth hints hint API
*/
func (a *Client) DeleteLolRsoAuthV1AuthHintsHint(params *DeleteLolRsoAuthV1AuthHintsHintParams) (*DeleteLolRsoAuthV1AuthHintsHintNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolRsoAuthV1AuthHintsHintParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolRsoAuthV1AuthHintsHint",
		Method:             "DELETE",
		PathPattern:        "/lol-rso-auth/v1/auth-hints/hint",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolRsoAuthV1AuthHintsHintReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolRsoAuthV1AuthHintsHintNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolRsoAuthV1AuthHintsHint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolRsoAuthV1Authorization delete lol rso auth v1 authorization API
*/
func (a *Client) DeleteLolRsoAuthV1Authorization(params *DeleteLolRsoAuthV1AuthorizationParams) (*DeleteLolRsoAuthV1AuthorizationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolRsoAuthV1AuthorizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolRsoAuthV1Authorization",
		Method:             "DELETE",
		PathPattern:        "/lol-rso-auth/v1/authorization",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolRsoAuthV1AuthorizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolRsoAuthV1AuthorizationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolRsoAuthV1Authorization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolRsoAuthV1Session delete lol rso auth v1 session API
*/
func (a *Client) DeleteLolRsoAuthV1Session(params *DeleteLolRsoAuthV1SessionParams) (*DeleteLolRsoAuthV1SessionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolRsoAuthV1SessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolRsoAuthV1Session",
		Method:             "DELETE",
		PathPattern:        "/lol-rso-auth/v1/session",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolRsoAuthV1SessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolRsoAuthV1SessionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolRsoAuthV1Session: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolRsoAuthV2Config delete lol rso auth v2 config API
*/
func (a *Client) DeleteLolRsoAuthV2Config(params *DeleteLolRsoAuthV2ConfigParams) (*DeleteLolRsoAuthV2ConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolRsoAuthV2ConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolRsoAuthV2Config",
		Method:             "DELETE",
		PathPattern:        "/lol-rso-auth/v2/config",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolRsoAuthV2ConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolRsoAuthV2ConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolRsoAuthV2Config: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolSimpleDialogMessagesV1MessagesByMessageID delete lol simple dialog messages v1 messages by message Id API
*/
func (a *Client) DeleteLolSimpleDialogMessagesV1MessagesByMessageID(params *DeleteLolSimpleDialogMessagesV1MessagesByMessageIDParams) (*DeleteLolSimpleDialogMessagesV1MessagesByMessageIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolSimpleDialogMessagesV1MessagesByMessageIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolSimpleDialogMessagesV1MessagesByMessageId",
		Method:             "DELETE",
		PathPattern:        "/lol-simple-dialog-messages/v1/messages/{messageId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolSimpleDialogMessagesV1MessagesByMessageIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolSimpleDialogMessagesV1MessagesByMessageIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolSimpleDialogMessagesV1MessagesByMessageId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolStatstonesV1EogNotifications delete lol statstones v1 eog notifications API
*/
func (a *Client) DeleteLolStatstonesV1EogNotifications(params *DeleteLolStatstonesV1EogNotificationsParams) (*DeleteLolStatstonesV1EogNotificationsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolStatstonesV1EogNotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolStatstonesV1EogNotifications",
		Method:             "DELETE",
		PathPattern:        "/lol-statstones/v1/eog-notifications",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolStatstonesV1EogNotificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolStatstonesV1EogNotificationsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolStatstonesV1EogNotifications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolStatstonesV1EogNotificationsByKey delete lol statstones v1 eog notifications by key API
*/
func (a *Client) DeleteLolStatstonesV1EogNotificationsByKey(params *DeleteLolStatstonesV1EogNotificationsByKeyParams) (*DeleteLolStatstonesV1EogNotificationsByKeyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolStatstonesV1EogNotificationsByKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolStatstonesV1EogNotificationsByKey",
		Method:             "DELETE",
		PathPattern:        "/lol-statstones/v1/eog-notifications/{key}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolStatstonesV1EogNotificationsByKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolStatstonesV1EogNotificationsByKeyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolStatstonesV1EogNotificationsByKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolStatstonesV1VignetteNotifications delete lol statstones v1 vignette notifications API
*/
func (a *Client) DeleteLolStatstonesV1VignetteNotifications(params *DeleteLolStatstonesV1VignetteNotificationsParams) (*DeleteLolStatstonesV1VignetteNotificationsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolStatstonesV1VignetteNotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolStatstonesV1VignetteNotifications",
		Method:             "DELETE",
		PathPattern:        "/lol-statstones/v1/vignette-notifications",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolStatstonesV1VignetteNotificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolStatstonesV1VignetteNotificationsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolStatstonesV1VignetteNotifications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolStatstonesV1VignetteNotificationsByKey delete lol statstones v1 vignette notifications by key API
*/
func (a *Client) DeleteLolStatstonesV1VignetteNotificationsByKey(params *DeleteLolStatstonesV1VignetteNotificationsByKeyParams) (*DeleteLolStatstonesV1VignetteNotificationsByKeyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolStatstonesV1VignetteNotificationsByKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolStatstonesV1VignetteNotificationsByKey",
		Method:             "DELETE",
		PathPattern:        "/lol-statstones/v1/vignette-notifications/{key}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolStatstonesV1VignetteNotificationsByKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolStatstonesV1VignetteNotificationsByKeyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolStatstonesV1VignetteNotificationsByKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLolSuggestedPlayersV1SuggestedPlayersBySummonerID delete lol suggested players v1 suggested players by summoner Id API
*/
func (a *Client) DeleteLolSuggestedPlayersV1SuggestedPlayersBySummonerID(params *DeleteLolSuggestedPlayersV1SuggestedPlayersBySummonerIDParams) (*DeleteLolSuggestedPlayersV1SuggestedPlayersBySummonerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLolSuggestedPlayersV1SuggestedPlayersBySummonerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLolSuggestedPlayersV1SuggestedPlayersBySummonerId",
		Method:             "DELETE",
		PathPattern:        "/lol-suggested-players/v1/suggested-players/{summonerId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLolSuggestedPlayersV1SuggestedPlayersBySummonerIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLolSuggestedPlayersV1SuggestedPlayersBySummonerIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLolSuggestedPlayersV1SuggestedPlayersBySummonerId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePatcherV1NotificationsByID delete patcher v1 notifications by Id API
*/
func (a *Client) DeletePatcherV1NotificationsByID(params *DeletePatcherV1NotificationsByIDParams) (*DeletePatcherV1NotificationsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePatcherV1NotificationsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePatcherV1NotificationsById",
		Method:             "DELETE",
		PathPattern:        "/patcher/v1/notifications/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePatcherV1NotificationsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePatcherV1NotificationsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeletePatcherV1NotificationsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePatcherV1ProductsByProductID delete patcher v1 products by product Id API
*/
func (a *Client) DeletePatcherV1ProductsByProductID(params *DeletePatcherV1ProductsByProductIDParams) (*DeletePatcherV1ProductsByProductIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePatcherV1ProductsByProductIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePatcherV1ProductsByProductId",
		Method:             "DELETE",
		PathPattern:        "/patcher/v1/products/{product-id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePatcherV1ProductsByProductIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePatcherV1ProductsByProductIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeletePatcherV1ProductsByProductId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePlayerNotificationsV1NotificationsByID delete player notifications v1 notifications by Id API
*/
func (a *Client) DeletePlayerNotificationsV1NotificationsByID(params *DeletePlayerNotificationsV1NotificationsByIDParams) (*DeletePlayerNotificationsV1NotificationsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePlayerNotificationsV1NotificationsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePlayerNotificationsV1NotificationsById",
		Method:             "DELETE",
		PathPattern:        "/player-notifications/v1/notifications/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePlayerNotificationsV1NotificationsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePlayerNotificationsV1NotificationsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeletePlayerNotificationsV1NotificationsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRecofrienderV1RegistrationsByNetwork delete recofriender v1 registrations by network API
*/
func (a *Client) DeleteRecofrienderV1RegistrationsByNetwork(params *DeleteRecofrienderV1RegistrationsByNetworkParams) (*DeleteRecofrienderV1RegistrationsByNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRecofrienderV1RegistrationsByNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRecofrienderV1RegistrationsByNetwork",
		Method:             "DELETE",
		PathPattern:        "/recofriender/v1/registrations/{network}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRecofrienderV1RegistrationsByNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRecofrienderV1RegistrationsByNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRecofrienderV1RegistrationsByNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRecofrienderV2Contacts delete recofriender v2 contacts API
*/
func (a *Client) DeleteRecofrienderV2Contacts(params *DeleteRecofrienderV2ContactsParams) (*DeleteRecofrienderV2ContactsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRecofrienderV2ContactsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRecofrienderV2Contacts",
		Method:             "DELETE",
		PathPattern:        "/recofriender/v2/contacts",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRecofrienderV2ContactsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRecofrienderV2ContactsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRecofrienderV2Contacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRecofrienderV2Dismissed delete recofriender v2 dismissed API
*/
func (a *Client) DeleteRecofrienderV2Dismissed(params *DeleteRecofrienderV2DismissedParams) (*DeleteRecofrienderV2DismissedNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRecofrienderV2DismissedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRecofrienderV2Dismissed",
		Method:             "DELETE",
		PathPattern:        "/recofriender/v2/dismissed",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRecofrienderV2DismissedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRecofrienderV2DismissedNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRecofrienderV2Dismissed: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRiotMessagingServiceV1Connect delete riot messaging service v1 connect API
*/
func (a *Client) DeleteRiotMessagingServiceV1Connect(params *DeleteRiotMessagingServiceV1ConnectParams) (*DeleteRiotMessagingServiceV1ConnectNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRiotMessagingServiceV1ConnectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRiotMessagingServiceV1Connect",
		Method:             "DELETE",
		PathPattern:        "/riot-messaging-service/v1/connect",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRiotMessagingServiceV1ConnectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRiotMessagingServiceV1ConnectNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRiotMessagingServiceV1Connect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRiotMessagingServiceV1Entitlements delete riot messaging service v1 entitlements API
*/
func (a *Client) DeleteRiotMessagingServiceV1Entitlements(params *DeleteRiotMessagingServiceV1EntitlementsParams) (*DeleteRiotMessagingServiceV1EntitlementsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRiotMessagingServiceV1EntitlementsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRiotMessagingServiceV1Entitlements",
		Method:             "DELETE",
		PathPattern:        "/riot-messaging-service/v1/entitlements",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRiotMessagingServiceV1EntitlementsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRiotMessagingServiceV1EntitlementsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRiotMessagingServiceV1Entitlements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRiotMessagingServiceV1Session delete riot messaging service v1 session API
*/
func (a *Client) DeleteRiotMessagingServiceV1Session(params *DeleteRiotMessagingServiceV1SessionParams) (*DeleteRiotMessagingServiceV1SessionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRiotMessagingServiceV1SessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRiotMessagingServiceV1Session",
		Method:             "DELETE",
		PathPattern:        "/riot-messaging-service/v1/session",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRiotMessagingServiceV1SessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRiotMessagingServiceV1SessionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRiotMessagingServiceV1Session: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteVoiceChatV2Sessions delete voice chat v2 sessions API
*/
func (a *Client) DeleteVoiceChatV2Sessions(params *DeleteVoiceChatV2SessionsParams) (*DeleteVoiceChatV2SessionsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVoiceChatV2SessionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVoiceChatV2Sessions",
		Method:             "DELETE",
		PathPattern:        "/voice-chat/v2/sessions",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVoiceChatV2SessionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVoiceChatV2SessionsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVoiceChatV2Sessions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteVoiceChatV2SessionsByID delete voice chat v2 sessions by Id API
*/
func (a *Client) DeleteVoiceChatV2SessionsByID(params *DeleteVoiceChatV2SessionsByIDParams) (*DeleteVoiceChatV2SessionsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVoiceChatV2SessionsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVoiceChatV2SessionsById",
		Method:             "DELETE",
		PathPattern:        "/voice-chat/v2/sessions/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVoiceChatV2SessionsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVoiceChatV2SessionsByIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVoiceChatV2SessionsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAntiAddictionV1PoliciesByPolicyTypeAntiAddictionState get anti addiction v1 policies by policy type anti addiction state API
*/
func (a *Client) GetAntiAddictionV1PoliciesByPolicyTypeAntiAddictionState(params *GetAntiAddictionV1PoliciesByPolicyTypeAntiAddictionStateParams) (*GetAntiAddictionV1PoliciesByPolicyTypeAntiAddictionStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAntiAddictionV1PoliciesByPolicyTypeAntiAddictionStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAntiAddictionV1PoliciesByPolicyTypeAntiAddictionState",
		Method:             "GET",
		PathPattern:        "/anti-addiction/v1/policies/{policyType}/anti-addiction-state",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAntiAddictionV1PoliciesByPolicyTypeAntiAddictionStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAntiAddictionV1PoliciesByPolicyTypeAntiAddictionStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAntiAddictionV1PoliciesByPolicyTypeAntiAddictionState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetByPluginAssetsByPath downloads a backend asset
*/
func (a *Client) GetByPluginAssetsByPath(params *GetByPluginAssetsByPathParams) (*GetByPluginAssetsByPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetByPluginAssetsByPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetByPluginAssetsByPath",
		Method:             "GET",
		PathPattern:        "/{plugin}/assets/{path}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetByPluginAssetsByPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetByPluginAssetsByPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetByPluginAssetsByPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClientConfigV1Config get client config v1 config API
*/
func (a *Client) GetClientConfigV1Config(params *GetClientConfigV1ConfigParams) (*GetClientConfigV1ConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClientConfigV1ConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetClientConfigV1Config",
		Method:             "GET",
		PathPattern:        "/client-config/v1/config",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClientConfigV1ConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClientConfigV1ConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClientConfigV1Config: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClientConfigV1ConfigByName get client config v1 config by name API
*/
func (a *Client) GetClientConfigV1ConfigByName(params *GetClientConfigV1ConfigByNameParams) (*GetClientConfigV1ConfigByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClientConfigV1ConfigByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetClientConfigV1ConfigByName",
		Method:             "GET",
		PathPattern:        "/client-config/v1/config/{name}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClientConfigV1ConfigByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClientConfigV1ConfigByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClientConfigV1ConfigByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClientConfigV1StatusByType get client config v1 status by type API
*/
func (a *Client) GetClientConfigV1StatusByType(params *GetClientConfigV1StatusByTypeParams) (*GetClientConfigV1StatusByTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClientConfigV1StatusByTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetClientConfigV1StatusByType",
		Method:             "GET",
		PathPattern:        "/client-config/v1/status/{type}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClientConfigV1StatusByTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClientConfigV1StatusByTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClientConfigV1StatusByType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClientConfigV2ConfigByName get client config v2 config by name API
*/
func (a *Client) GetClientConfigV2ConfigByName(params *GetClientConfigV2ConfigByNameParams) (*GetClientConfigV2ConfigByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClientConfigV2ConfigByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetClientConfigV2ConfigByName",
		Method:             "GET",
		PathPattern:        "/client-config/v2/config/{name}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClientConfigV2ConfigByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClientConfigV2ConfigByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClientConfigV2ConfigByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClientConfigV2NamespaceByNamespace get client config v2 namespace by namespace API
*/
func (a *Client) GetClientConfigV2NamespaceByNamespace(params *GetClientConfigV2NamespaceByNamespaceParams) (*GetClientConfigV2NamespaceByNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClientConfigV2NamespaceByNamespaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetClientConfigV2NamespaceByNamespace",
		Method:             "GET",
		PathPattern:        "/client-config/v2/namespace/{namespace}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClientConfigV2NamespaceByNamespaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClientConfigV2NamespaceByNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClientConfigV2NamespaceByNamespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClientConfigV2NamespaceByNamespacePlayer get client config v2 namespace by namespace player API
*/
func (a *Client) GetClientConfigV2NamespaceByNamespacePlayer(params *GetClientConfigV2NamespaceByNamespacePlayerParams) (*GetClientConfigV2NamespaceByNamespacePlayerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClientConfigV2NamespaceByNamespacePlayerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetClientConfigV2NamespaceByNamespacePlayer",
		Method:             "GET",
		PathPattern:        "/client-config/v2/namespace/{namespace}/player",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClientConfigV2NamespaceByNamespacePlayerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClientConfigV2NamespaceByNamespacePlayerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClientConfigV2NamespaceByNamespacePlayer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClientConfigV2NamespaceByNamespacePublic get client config v2 namespace by namespace public API
*/
func (a *Client) GetClientConfigV2NamespaceByNamespacePublic(params *GetClientConfigV2NamespaceByNamespacePublicParams) (*GetClientConfigV2NamespaceByNamespacePublicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClientConfigV2NamespaceByNamespacePublicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetClientConfigV2NamespaceByNamespacePublic",
		Method:             "GET",
		PathPattern:        "/client-config/v2/namespace/{namespace}/public",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClientConfigV2NamespaceByNamespacePublicReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClientConfigV2NamespaceByNamespacePublicOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClientConfigV2NamespaceByNamespacePublic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEntitlementsV1Token get entitlements v1 token API
*/
func (a *Client) GetEntitlementsV1Token(params *GetEntitlementsV1TokenParams) (*GetEntitlementsV1TokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEntitlementsV1TokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEntitlementsV1Token",
		Method:             "GET",
		PathPattern:        "/entitlements/v1/token",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEntitlementsV1TokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEntitlementsV1TokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEntitlementsV1Token: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGcloudVoiceChatV1AudioProperties get gcloud voice chat v1 audio properties API
*/
func (a *Client) GetGcloudVoiceChatV1AudioProperties(params *GetGcloudVoiceChatV1AudioPropertiesParams) (*GetGcloudVoiceChatV1AudioPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGcloudVoiceChatV1AudioPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGcloudVoiceChatV1AudioProperties",
		Method:             "GET",
		PathPattern:        "/gcloud-voice-chat/v1/audio-properties",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGcloudVoiceChatV1AudioPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGcloudVoiceChatV1AudioPropertiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGcloudVoiceChatV1AudioProperties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGcloudVoiceChatV1CallStatsAggregate get gcloud voice chat v1 call stats aggregate API
*/
func (a *Client) GetGcloudVoiceChatV1CallStatsAggregate(params *GetGcloudVoiceChatV1CallStatsAggregateParams) (*GetGcloudVoiceChatV1CallStatsAggregateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGcloudVoiceChatV1CallStatsAggregateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGcloudVoiceChatV1CallStatsAggregate",
		Method:             "GET",
		PathPattern:        "/gcloud-voice-chat/v1/call-stats/aggregate",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGcloudVoiceChatV1CallStatsAggregateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGcloudVoiceChatV1CallStatsAggregateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGcloudVoiceChatV1CallStatsAggregate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGcloudVoiceChatV1CallStatsByID get gcloud voice chat v1 call stats by Id API
*/
func (a *Client) GetGcloudVoiceChatV1CallStatsByID(params *GetGcloudVoiceChatV1CallStatsByIDParams) (*GetGcloudVoiceChatV1CallStatsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGcloudVoiceChatV1CallStatsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGcloudVoiceChatV1CallStatsById",
		Method:             "GET",
		PathPattern:        "/gcloud-voice-chat/v1/call-stats/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGcloudVoiceChatV1CallStatsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGcloudVoiceChatV1CallStatsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGcloudVoiceChatV1CallStatsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGcloudVoiceChatV1CodecSettings get gcloud voice chat v1 codec settings API
*/
func (a *Client) GetGcloudVoiceChatV1CodecSettings(params *GetGcloudVoiceChatV1CodecSettingsParams) (*GetGcloudVoiceChatV1CodecSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGcloudVoiceChatV1CodecSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGcloudVoiceChatV1CodecSettings",
		Method:             "GET",
		PathPattern:        "/gcloud-voice-chat/v1/codec-settings",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGcloudVoiceChatV1CodecSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGcloudVoiceChatV1CodecSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGcloudVoiceChatV1CodecSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGcloudVoiceChatV1Config get gcloud voice chat v1 config API
*/
func (a *Client) GetGcloudVoiceChatV1Config(params *GetGcloudVoiceChatV1ConfigParams) (*GetGcloudVoiceChatV1ConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGcloudVoiceChatV1ConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGcloudVoiceChatV1Config",
		Method:             "GET",
		PathPattern:        "/gcloud-voice-chat/v1/config",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGcloudVoiceChatV1ConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGcloudVoiceChatV1ConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGcloudVoiceChatV1Config: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGcloudVoiceChatV1Errors get gcloud voice chat v1 errors API
*/
func (a *Client) GetGcloudVoiceChatV1Errors(params *GetGcloudVoiceChatV1ErrorsParams) (*GetGcloudVoiceChatV1ErrorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGcloudVoiceChatV1ErrorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGcloudVoiceChatV1Errors",
		Method:             "GET",
		PathPattern:        "/gcloud-voice-chat/v1/errors",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGcloudVoiceChatV1ErrorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGcloudVoiceChatV1ErrorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGcloudVoiceChatV1Errors: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGcloudVoiceChatV1PushToTalk get gcloud voice chat v1 push to talk API
*/
func (a *Client) GetGcloudVoiceChatV1PushToTalk(params *GetGcloudVoiceChatV1PushToTalkParams) (*GetGcloudVoiceChatV1PushToTalkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGcloudVoiceChatV1PushToTalkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGcloudVoiceChatV1PushToTalk",
		Method:             "GET",
		PathPattern:        "/gcloud-voice-chat/v1/push-to-talk",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGcloudVoiceChatV1PushToTalkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGcloudVoiceChatV1PushToTalkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGcloudVoiceChatV1PushToTalk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGcloudVoiceChatV2DevicesCapture get gcloud voice chat v2 devices capture API
*/
func (a *Client) GetGcloudVoiceChatV2DevicesCapture(params *GetGcloudVoiceChatV2DevicesCaptureParams) (*GetGcloudVoiceChatV2DevicesCaptureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGcloudVoiceChatV2DevicesCaptureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGcloudVoiceChatV2DevicesCapture",
		Method:             "GET",
		PathPattern:        "/gcloud-voice-chat/v2/devices/capture",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGcloudVoiceChatV2DevicesCaptureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGcloudVoiceChatV2DevicesCaptureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGcloudVoiceChatV2DevicesCapture: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGcloudVoiceChatV2DevicesCapturePermission get gcloud voice chat v2 devices capture permission API
*/
func (a *Client) GetGcloudVoiceChatV2DevicesCapturePermission(params *GetGcloudVoiceChatV2DevicesCapturePermissionParams) (*GetGcloudVoiceChatV2DevicesCapturePermissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGcloudVoiceChatV2DevicesCapturePermissionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGcloudVoiceChatV2DevicesCapturePermission",
		Method:             "GET",
		PathPattern:        "/gcloud-voice-chat/v2/devices/capture/permission",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGcloudVoiceChatV2DevicesCapturePermissionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGcloudVoiceChatV2DevicesCapturePermissionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGcloudVoiceChatV2DevicesCapturePermission: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGcloudVoiceChatV2DevicesRender get gcloud voice chat v2 devices render API
*/
func (a *Client) GetGcloudVoiceChatV2DevicesRender(params *GetGcloudVoiceChatV2DevicesRenderParams) (*GetGcloudVoiceChatV2DevicesRenderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGcloudVoiceChatV2DevicesRenderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGcloudVoiceChatV2DevicesRender",
		Method:             "GET",
		PathPattern:        "/gcloud-voice-chat/v2/devices/render",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGcloudVoiceChatV2DevicesRenderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGcloudVoiceChatV2DevicesRenderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGcloudVoiceChatV2DevicesRender: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGcloudVoiceChatV2Sessions get gcloud voice chat v2 sessions API
*/
func (a *Client) GetGcloudVoiceChatV2Sessions(params *GetGcloudVoiceChatV2SessionsParams) (*GetGcloudVoiceChatV2SessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGcloudVoiceChatV2SessionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGcloudVoiceChatV2Sessions",
		Method:             "GET",
		PathPattern:        "/gcloud-voice-chat/v2/sessions",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGcloudVoiceChatV2SessionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGcloudVoiceChatV2SessionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGcloudVoiceChatV2Sessions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGcloudVoiceChatV2SessionsByID get gcloud voice chat v2 sessions by Id API
*/
func (a *Client) GetGcloudVoiceChatV2SessionsByID(params *GetGcloudVoiceChatV2SessionsByIDParams) (*GetGcloudVoiceChatV2SessionsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGcloudVoiceChatV2SessionsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGcloudVoiceChatV2SessionsById",
		Method:             "GET",
		PathPattern:        "/gcloud-voice-chat/v2/sessions/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGcloudVoiceChatV2SessionsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGcloudVoiceChatV2SessionsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGcloudVoiceChatV2SessionsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGcloudVoiceChatV2SessionsBySessionIDParticipantsByParticipantID get gcloud voice chat v2 sessions by session Id participants by participant Id API
*/
func (a *Client) GetGcloudVoiceChatV2SessionsBySessionIDParticipantsByParticipantID(params *GetGcloudVoiceChatV2SessionsBySessionIDParticipantsByParticipantIDParams) (*GetGcloudVoiceChatV2SessionsBySessionIDParticipantsByParticipantIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGcloudVoiceChatV2SessionsBySessionIDParticipantsByParticipantIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGcloudVoiceChatV2SessionsBySessionIdParticipantsByParticipantId",
		Method:             "GET",
		PathPattern:        "/gcloud-voice-chat/v2/sessions/{sessionId}/participants/{participantId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGcloudVoiceChatV2SessionsBySessionIDParticipantsByParticipantIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGcloudVoiceChatV2SessionsBySessionIDParticipantsByParticipantIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGcloudVoiceChatV2SessionsBySessionIdParticipantsByParticipantId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGcloudVoiceChatV2Settings get gcloud voice chat v2 settings API
*/
func (a *Client) GetGcloudVoiceChatV2Settings(params *GetGcloudVoiceChatV2SettingsParams) (*GetGcloudVoiceChatV2SettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGcloudVoiceChatV2SettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGcloudVoiceChatV2Settings",
		Method:             "GET",
		PathPattern:        "/gcloud-voice-chat/v2/settings",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGcloudVoiceChatV2SettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGcloudVoiceChatV2SettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGcloudVoiceChatV2Settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGcloudVoiceChatV2State get gcloud voice chat v2 state API
*/
func (a *Client) GetGcloudVoiceChatV2State(params *GetGcloudVoiceChatV2StateParams) (*GetGcloudVoiceChatV2StateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGcloudVoiceChatV2StateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGcloudVoiceChatV2State",
		Method:             "GET",
		PathPattern:        "/gcloud-voice-chat/v2/state",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGcloudVoiceChatV2StateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGcloudVoiceChatV2StateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGcloudVoiceChatV2State: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolAccountVerificationV1Device get lol account verification v1 device API
*/
func (a *Client) GetLolAccountVerificationV1Device(params *GetLolAccountVerificationV1DeviceParams) (*GetLolAccountVerificationV1DeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolAccountVerificationV1DeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolAccountVerificationV1Device",
		Method:             "GET",
		PathPattern:        "/lol-account-verification/v1/device",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolAccountVerificationV1DeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolAccountVerificationV1DeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolAccountVerificationV1Device: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolAccountVerificationV1IsVerified get lol account verification v1 is verified API
*/
func (a *Client) GetLolAccountVerificationV1IsVerified(params *GetLolAccountVerificationV1IsVerifiedParams) (*GetLolAccountVerificationV1IsVerifiedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolAccountVerificationV1IsVerifiedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolAccountVerificationV1IsVerified",
		Method:             "GET",
		PathPattern:        "/lol-account-verification/v1/is-verified",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolAccountVerificationV1IsVerifiedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolAccountVerificationV1IsVerifiedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolAccountVerificationV1IsVerified: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolAcsV1Delta get lol acs v1 delta API
*/
func (a *Client) GetLolAcsV1Delta(params *GetLolAcsV1DeltaParams) (*GetLolAcsV1DeltaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolAcsV1DeltaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolAcsV1Delta",
		Method:             "GET",
		PathPattern:        "/lol-acs/v1/delta",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolAcsV1DeltaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolAcsV1DeltaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolAcsV1Delta: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolAcsV1GamesByGameID get lol acs v1 games by game Id API
*/
func (a *Client) GetLolAcsV1GamesByGameID(params *GetLolAcsV1GamesByGameIDParams) (*GetLolAcsV1GamesByGameIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolAcsV1GamesByGameIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolAcsV1GamesByGameId",
		Method:             "GET",
		PathPattern:        "/lol-acs/v1/games/{gameId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolAcsV1GamesByGameIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolAcsV1GamesByGameIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolAcsV1GamesByGameId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolAcsV1GametimelinesByGameID get lol acs v1 gametimelines by game Id API
*/
func (a *Client) GetLolAcsV1GametimelinesByGameID(params *GetLolAcsV1GametimelinesByGameIDParams) (*GetLolAcsV1GametimelinesByGameIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolAcsV1GametimelinesByGameIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolAcsV1GametimelinesByGameId",
		Method:             "GET",
		PathPattern:        "/lol-acs/v1/gametimelines/{gameId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolAcsV1GametimelinesByGameIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolAcsV1GametimelinesByGameIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolAcsV1GametimelinesByGameId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolAcsV1MatchlistsByAccountID get lol acs v1 matchlists by account Id API
*/
func (a *Client) GetLolAcsV1MatchlistsByAccountID(params *GetLolAcsV1MatchlistsByAccountIDParams) (*GetLolAcsV1MatchlistsByAccountIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolAcsV1MatchlistsByAccountIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolAcsV1MatchlistsByAccountId",
		Method:             "GET",
		PathPattern:        "/lol-acs/v1/matchlists/{accountId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolAcsV1MatchlistsByAccountIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolAcsV1MatchlistsByAccountIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolAcsV1MatchlistsByAccountId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolAcsV1RecentlyPlayedChampionsByAccountID get lol acs v1 recently played champions by account Id API
*/
func (a *Client) GetLolAcsV1RecentlyPlayedChampionsByAccountID(params *GetLolAcsV1RecentlyPlayedChampionsByAccountIDParams) (*GetLolAcsV1RecentlyPlayedChampionsByAccountIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolAcsV1RecentlyPlayedChampionsByAccountIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolAcsV1RecentlyPlayedChampionsByAccountId",
		Method:             "GET",
		PathPattern:        "/lol-acs/v1/recently-played-champions/{accountId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolAcsV1RecentlyPlayedChampionsByAccountIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolAcsV1RecentlyPlayedChampionsByAccountIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolAcsV1RecentlyPlayedChampionsByAccountId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolAcsV2Matchlists get lol acs v2 matchlists API
*/
func (a *Client) GetLolAcsV2Matchlists(params *GetLolAcsV2MatchlistsParams) (*GetLolAcsV2MatchlistsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolAcsV2MatchlistsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolAcsV2Matchlists",
		Method:             "GET",
		PathPattern:        "/lol-acs/v2/matchlists",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolAcsV2MatchlistsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolAcsV2MatchlistsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolAcsV2Matchlists: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolAcsV2RecentlyPlayedChampionsByAccountID get lol acs v2 recently played champions by account Id API
*/
func (a *Client) GetLolAcsV2RecentlyPlayedChampionsByAccountID(params *GetLolAcsV2RecentlyPlayedChampionsByAccountIDParams) (*GetLolAcsV2RecentlyPlayedChampionsByAccountIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolAcsV2RecentlyPlayedChampionsByAccountIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolAcsV2RecentlyPlayedChampionsByAccountId",
		Method:             "GET",
		PathPattern:        "/lol-acs/v2/recently-played-champions/{accountId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolAcsV2RecentlyPlayedChampionsByAccountIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolAcsV2RecentlyPlayedChampionsByAccountIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolAcsV2RecentlyPlayedChampionsByAccountId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolAcsV2RecentlyPlayedChampionsCurrentSummoner get lol acs v2 recently played champions current summoner API
*/
func (a *Client) GetLolAcsV2RecentlyPlayedChampionsCurrentSummoner(params *GetLolAcsV2RecentlyPlayedChampionsCurrentSummonerParams) (*GetLolAcsV2RecentlyPlayedChampionsCurrentSummonerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolAcsV2RecentlyPlayedChampionsCurrentSummonerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolAcsV2RecentlyPlayedChampionsCurrentSummoner",
		Method:             "GET",
		PathPattern:        "/lol-acs/v2/recently-played-champions/current-summoner",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolAcsV2RecentlyPlayedChampionsCurrentSummonerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolAcsV2RecentlyPlayedChampionsCurrentSummonerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolAcsV2RecentlyPlayedChampionsCurrentSummoner: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolAcsV2RequestRecentlyPlayedChampionsByAccountID get lol acs v2 request recently played champions by account Id API
*/
func (a *Client) GetLolAcsV2RequestRecentlyPlayedChampionsByAccountID(params *GetLolAcsV2RequestRecentlyPlayedChampionsByAccountIDParams) (*GetLolAcsV2RequestRecentlyPlayedChampionsByAccountIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolAcsV2RequestRecentlyPlayedChampionsByAccountIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolAcsV2RequestRecentlyPlayedChampionsByAccountId",
		Method:             "GET",
		PathPattern:        "/lol-acs/v2/request-recently-played-champions/{accountId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolAcsV2RequestRecentlyPlayedChampionsByAccountIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolAcsV2RequestRecentlyPlayedChampionsByAccountIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolAcsV2RequestRecentlyPlayedChampionsByAccountId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolAcsV2RequestRecentlyPlayedChampionsCurrentSummoner get lol acs v2 request recently played champions current summoner API
*/
func (a *Client) GetLolAcsV2RequestRecentlyPlayedChampionsCurrentSummoner(params *GetLolAcsV2RequestRecentlyPlayedChampionsCurrentSummonerParams) (*GetLolAcsV2RequestRecentlyPlayedChampionsCurrentSummonerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolAcsV2RequestRecentlyPlayedChampionsCurrentSummonerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolAcsV2RequestRecentlyPlayedChampionsCurrentSummoner",
		Method:             "GET",
		PathPattern:        "/lol-acs/v2/request-recently-played-champions/current-summoner",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolAcsV2RequestRecentlyPlayedChampionsCurrentSummonerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolAcsV2RequestRecentlyPlayedChampionsCurrentSummonerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolAcsV2RequestRecentlyPlayedChampionsCurrentSummoner: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolActiveBoostsV1ActiveBoosts get lol active boosts v1 active boosts API
*/
func (a *Client) GetLolActiveBoostsV1ActiveBoosts(params *GetLolActiveBoostsV1ActiveBoostsParams) (*GetLolActiveBoostsV1ActiveBoostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolActiveBoostsV1ActiveBoostsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolActiveBoostsV1ActiveBoosts",
		Method:             "GET",
		PathPattern:        "/lol-active-boosts/v1/active-boosts",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolActiveBoostsV1ActiveBoostsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolActiveBoostsV1ActiveBoostsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolActiveBoostsV1ActiveBoosts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolBannersV1CurrentSummonerFlags get lol banners v1 current summoner flags API
*/
func (a *Client) GetLolBannersV1CurrentSummonerFlags(params *GetLolBannersV1CurrentSummonerFlagsParams) (*GetLolBannersV1CurrentSummonerFlagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolBannersV1CurrentSummonerFlagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolBannersV1CurrentSummonerFlags",
		Method:             "GET",
		PathPattern:        "/lol-banners/v1/current-summoner/flags",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolBannersV1CurrentSummonerFlagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolBannersV1CurrentSummonerFlagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolBannersV1CurrentSummonerFlags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolBannersV1CurrentSummonerFlagsEquipped get lol banners v1 current summoner flags equipped API
*/
func (a *Client) GetLolBannersV1CurrentSummonerFlagsEquipped(params *GetLolBannersV1CurrentSummonerFlagsEquippedParams) (*GetLolBannersV1CurrentSummonerFlagsEquippedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolBannersV1CurrentSummonerFlagsEquippedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolBannersV1CurrentSummonerFlagsEquipped",
		Method:             "GET",
		PathPattern:        "/lol-banners/v1/current-summoner/flags/equipped",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolBannersV1CurrentSummonerFlagsEquippedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolBannersV1CurrentSummonerFlagsEquippedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolBannersV1CurrentSummonerFlagsEquipped: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolBannersV1CurrentSummonerFramesEquipped get lol banners v1 current summoner frames equipped API
*/
func (a *Client) GetLolBannersV1CurrentSummonerFramesEquipped(params *GetLolBannersV1CurrentSummonerFramesEquippedParams) (*GetLolBannersV1CurrentSummonerFramesEquippedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolBannersV1CurrentSummonerFramesEquippedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolBannersV1CurrentSummonerFramesEquipped",
		Method:             "GET",
		PathPattern:        "/lol-banners/v1/current-summoner/frames/equipped",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolBannersV1CurrentSummonerFramesEquippedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolBannersV1CurrentSummonerFramesEquippedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolBannersV1CurrentSummonerFramesEquipped: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolBannersV1PlayersByPuuidFlagsEquipped get lol banners v1 players by puuid flags equipped API
*/
func (a *Client) GetLolBannersV1PlayersByPuuidFlagsEquipped(params *GetLolBannersV1PlayersByPuuidFlagsEquippedParams) (*GetLolBannersV1PlayersByPuuidFlagsEquippedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolBannersV1PlayersByPuuidFlagsEquippedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolBannersV1PlayersByPuuidFlagsEquipped",
		Method:             "GET",
		PathPattern:        "/lol-banners/v1/players/{puuid}/flags/equipped",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolBannersV1PlayersByPuuidFlagsEquippedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolBannersV1PlayersByPuuidFlagsEquippedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolBannersV1PlayersByPuuidFlagsEquipped: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCareerStatsV1ChampionAveragesByChampionIDByPositionByTierByQueue get lol career stats v1 champion averages by champion Id by position by tier by queue API
*/
func (a *Client) GetLolCareerStatsV1ChampionAveragesByChampionIDByPositionByTierByQueue(params *GetLolCareerStatsV1ChampionAveragesByChampionIDByPositionByTierByQueueParams) (*GetLolCareerStatsV1ChampionAveragesByChampionIDByPositionByTierByQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCareerStatsV1ChampionAveragesByChampionIDByPositionByTierByQueueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCareerStatsV1ChampionAveragesByChampionIdByPositionByTierByQueue",
		Method:             "GET",
		PathPattern:        "/lol-career-stats/v1/champion-averages/{championId}/{position}/{tier}/{queue}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCareerStatsV1ChampionAveragesByChampionIDByPositionByTierByQueueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCareerStatsV1ChampionAveragesByChampionIDByPositionByTierByQueueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCareerStatsV1ChampionAveragesByChampionIdByPositionByTierByQueue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCareerStatsV1ChampionAveragesSeasonBySeasonByChampionIDByPositionByTierByQueue get lol career stats v1 champion averages season by season by champion Id by position by tier by queue API
*/
func (a *Client) GetLolCareerStatsV1ChampionAveragesSeasonBySeasonByChampionIDByPositionByTierByQueue(params *GetLolCareerStatsV1ChampionAveragesSeasonBySeasonByChampionIDByPositionByTierByQueueParams) (*GetLolCareerStatsV1ChampionAveragesSeasonBySeasonByChampionIDByPositionByTierByQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCareerStatsV1ChampionAveragesSeasonBySeasonByChampionIDByPositionByTierByQueueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCareerStatsV1ChampionAveragesSeasonBySeasonByChampionIdByPositionByTierByQueue",
		Method:             "GET",
		PathPattern:        "/lol-career-stats/v1/champion-averages/season/{season}/{championId}/{position}/{tier}/{queue}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCareerStatsV1ChampionAveragesSeasonBySeasonByChampionIDByPositionByTierByQueueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCareerStatsV1ChampionAveragesSeasonBySeasonByChampionIDByPositionByTierByQueueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCareerStatsV1ChampionAveragesSeasonBySeasonByChampionIdByPositionByTierByQueue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCareerStatsV1ChampionExpertsByChampionIDByPosition get lol career stats v1 champion experts by champion Id by position API
*/
func (a *Client) GetLolCareerStatsV1ChampionExpertsByChampionIDByPosition(params *GetLolCareerStatsV1ChampionExpertsByChampionIDByPositionParams) (*GetLolCareerStatsV1ChampionExpertsByChampionIDByPositionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCareerStatsV1ChampionExpertsByChampionIDByPositionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCareerStatsV1ChampionExpertsByChampionIdByPosition",
		Method:             "GET",
		PathPattern:        "/lol-career-stats/v1/champion-experts/{championId}/{position}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCareerStatsV1ChampionExpertsByChampionIDByPositionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCareerStatsV1ChampionExpertsByChampionIDByPositionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCareerStatsV1ChampionExpertsByChampionIdByPosition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCareerStatsV1ChampionExpertsSeasonBySeasonByChampionIDByPosition get lol career stats v1 champion experts season by season by champion Id by position API
*/
func (a *Client) GetLolCareerStatsV1ChampionExpertsSeasonBySeasonByChampionIDByPosition(params *GetLolCareerStatsV1ChampionExpertsSeasonBySeasonByChampionIDByPositionParams) (*GetLolCareerStatsV1ChampionExpertsSeasonBySeasonByChampionIDByPositionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCareerStatsV1ChampionExpertsSeasonBySeasonByChampionIDByPositionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCareerStatsV1ChampionExpertsSeasonBySeasonByChampionIdByPosition",
		Method:             "GET",
		PathPattern:        "/lol-career-stats/v1/champion-experts/season/{season}/{championId}/{position}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCareerStatsV1ChampionExpertsSeasonBySeasonByChampionIDByPositionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCareerStatsV1ChampionExpertsSeasonBySeasonByChampionIDByPositionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCareerStatsV1ChampionExpertsSeasonBySeasonByChampionIdByPosition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCareerStatsV1PositionAveragesByPositionByTierByQueue get lol career stats v1 position averages by position by tier by queue API
*/
func (a *Client) GetLolCareerStatsV1PositionAveragesByPositionByTierByQueue(params *GetLolCareerStatsV1PositionAveragesByPositionByTierByQueueParams) (*GetLolCareerStatsV1PositionAveragesByPositionByTierByQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCareerStatsV1PositionAveragesByPositionByTierByQueueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCareerStatsV1PositionAveragesByPositionByTierByQueue",
		Method:             "GET",
		PathPattern:        "/lol-career-stats/v1/position-averages/{position}/{tier}/{queue}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCareerStatsV1PositionAveragesByPositionByTierByQueueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCareerStatsV1PositionAveragesByPositionByTierByQueueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCareerStatsV1PositionAveragesByPositionByTierByQueue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCareerStatsV1PositionAveragesSeasonBySeasonByPositionByTierByQueue get lol career stats v1 position averages season by season by position by tier by queue API
*/
func (a *Client) GetLolCareerStatsV1PositionAveragesSeasonBySeasonByPositionByTierByQueue(params *GetLolCareerStatsV1PositionAveragesSeasonBySeasonByPositionByTierByQueueParams) (*GetLolCareerStatsV1PositionAveragesSeasonBySeasonByPositionByTierByQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCareerStatsV1PositionAveragesSeasonBySeasonByPositionByTierByQueueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCareerStatsV1PositionAveragesSeasonBySeasonByPositionByTierByQueue",
		Method:             "GET",
		PathPattern:        "/lol-career-stats/v1/position-averages/season/{season}/{position}/{tier}/{queue}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCareerStatsV1PositionAveragesSeasonBySeasonByPositionByTierByQueueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCareerStatsV1PositionAveragesSeasonBySeasonByPositionByTierByQueueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCareerStatsV1PositionAveragesSeasonBySeasonByPositionByTierByQueue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCareerStatsV1PositionExpertsByPosition get lol career stats v1 position experts by position API
*/
func (a *Client) GetLolCareerStatsV1PositionExpertsByPosition(params *GetLolCareerStatsV1PositionExpertsByPositionParams) (*GetLolCareerStatsV1PositionExpertsByPositionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCareerStatsV1PositionExpertsByPositionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCareerStatsV1PositionExpertsByPosition",
		Method:             "GET",
		PathPattern:        "/lol-career-stats/v1/position-experts/{position}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCareerStatsV1PositionExpertsByPositionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCareerStatsV1PositionExpertsByPositionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCareerStatsV1PositionExpertsByPosition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCareerStatsV1PositionExpertsSeasonBySeasonByPosition get lol career stats v1 position experts season by season by position API
*/
func (a *Client) GetLolCareerStatsV1PositionExpertsSeasonBySeasonByPosition(params *GetLolCareerStatsV1PositionExpertsSeasonBySeasonByPositionParams) (*GetLolCareerStatsV1PositionExpertsSeasonBySeasonByPositionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCareerStatsV1PositionExpertsSeasonBySeasonByPositionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCareerStatsV1PositionExpertsSeasonBySeasonByPosition",
		Method:             "GET",
		PathPattern:        "/lol-career-stats/v1/position-experts/season/{season}/{position}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCareerStatsV1PositionExpertsSeasonBySeasonByPositionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCareerStatsV1PositionExpertsSeasonBySeasonByPositionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCareerStatsV1PositionExpertsSeasonBySeasonByPosition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCareerStatsV1SummonerGamesByPuuid get lol career stats v1 summoner games by puuid API
*/
func (a *Client) GetLolCareerStatsV1SummonerGamesByPuuid(params *GetLolCareerStatsV1SummonerGamesByPuuidParams) (*GetLolCareerStatsV1SummonerGamesByPuuidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCareerStatsV1SummonerGamesByPuuidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCareerStatsV1SummonerGamesByPuuid",
		Method:             "GET",
		PathPattern:        "/lol-career-stats/v1/summoner-games/{puuid}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCareerStatsV1SummonerGamesByPuuidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCareerStatsV1SummonerGamesByPuuidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCareerStatsV1SummonerGamesByPuuid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCareerStatsV1SummonerGamesByPuuidSeasonBySeason get lol career stats v1 summoner games by puuid season by season API
*/
func (a *Client) GetLolCareerStatsV1SummonerGamesByPuuidSeasonBySeason(params *GetLolCareerStatsV1SummonerGamesByPuuidSeasonBySeasonParams) (*GetLolCareerStatsV1SummonerGamesByPuuidSeasonBySeasonOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCareerStatsV1SummonerGamesByPuuidSeasonBySeasonParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCareerStatsV1SummonerGamesByPuuidSeasonBySeason",
		Method:             "GET",
		PathPattern:        "/lol-career-stats/v1/summoner-games/{puuid}/season/{season}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCareerStatsV1SummonerGamesByPuuidSeasonBySeasonReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCareerStatsV1SummonerGamesByPuuidSeasonBySeasonOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCareerStatsV1SummonerGamesByPuuidSeasonBySeason: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCareerStatsV1SummonerStatsByPuuidBySeasonByQueueByPosition get lol career stats v1 summoner stats by puuid by season by queue by position API
*/
func (a *Client) GetLolCareerStatsV1SummonerStatsByPuuidBySeasonByQueueByPosition(params *GetLolCareerStatsV1SummonerStatsByPuuidBySeasonByQueueByPositionParams) (*GetLolCareerStatsV1SummonerStatsByPuuidBySeasonByQueueByPositionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCareerStatsV1SummonerStatsByPuuidBySeasonByQueueByPositionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCareerStatsV1SummonerStatsByPuuidBySeasonByQueueByPosition",
		Method:             "GET",
		PathPattern:        "/lol-career-stats/v1/summoner-stats/{puuid}/{season}/{queue}/{position}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCareerStatsV1SummonerStatsByPuuidBySeasonByQueueByPositionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCareerStatsV1SummonerStatsByPuuidBySeasonByQueueByPositionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCareerStatsV1SummonerStatsByPuuidBySeasonByQueueByPosition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCatalogV1ItemDetails get lol catalog v1 item details API
*/
func (a *Client) GetLolCatalogV1ItemDetails(params *GetLolCatalogV1ItemDetailsParams) (*GetLolCatalogV1ItemDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCatalogV1ItemDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCatalogV1ItemDetails",
		Method:             "GET",
		PathPattern:        "/lol-catalog/v1/item-details",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCatalogV1ItemDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCatalogV1ItemDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCatalogV1ItemDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCatalogV1Items get lol catalog v1 items API
*/
func (a *Client) GetLolCatalogV1Items(params *GetLolCatalogV1ItemsParams) (*GetLolCatalogV1ItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCatalogV1ItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCatalogV1Items",
		Method:             "GET",
		PathPattern:        "/lol-catalog/v1/items",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCatalogV1ItemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCatalogV1ItemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCatalogV1Items: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCatalogV1ItemsByInventoryType get lol catalog v1 items by inventory type API
*/
func (a *Client) GetLolCatalogV1ItemsByInventoryType(params *GetLolCatalogV1ItemsByInventoryTypeParams) (*GetLolCatalogV1ItemsByInventoryTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCatalogV1ItemsByInventoryTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCatalogV1ItemsByInventoryType",
		Method:             "GET",
		PathPattern:        "/lol-catalog/v1/items/{inventoryType}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCatalogV1ItemsByInventoryTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCatalogV1ItemsByInventoryTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCatalogV1ItemsByInventoryType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampSelectLegacyV1BannableChampionIds get lol champ select legacy v1 bannable champion ids API
*/
func (a *Client) GetLolChampSelectLegacyV1BannableChampionIds(params *GetLolChampSelectLegacyV1BannableChampionIdsParams) (*GetLolChampSelectLegacyV1BannableChampionIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampSelectLegacyV1BannableChampionIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampSelectLegacyV1BannableChampionIds",
		Method:             "GET",
		PathPattern:        "/lol-champ-select-legacy/v1/bannable-champion-ids",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampSelectLegacyV1BannableChampionIdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampSelectLegacyV1BannableChampionIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampSelectLegacyV1BannableChampionIds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampSelectLegacyV1CurrentChampion get lol champ select legacy v1 current champion API
*/
func (a *Client) GetLolChampSelectLegacyV1CurrentChampion(params *GetLolChampSelectLegacyV1CurrentChampionParams) (*GetLolChampSelectLegacyV1CurrentChampionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampSelectLegacyV1CurrentChampionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampSelectLegacyV1CurrentChampion",
		Method:             "GET",
		PathPattern:        "/lol-champ-select-legacy/v1/current-champion",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampSelectLegacyV1CurrentChampionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampSelectLegacyV1CurrentChampionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampSelectLegacyV1CurrentChampion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampSelectLegacyV1DisabledChampionIds get lol champ select legacy v1 disabled champion ids API
*/
func (a *Client) GetLolChampSelectLegacyV1DisabledChampionIds(params *GetLolChampSelectLegacyV1DisabledChampionIdsParams) (*GetLolChampSelectLegacyV1DisabledChampionIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampSelectLegacyV1DisabledChampionIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampSelectLegacyV1DisabledChampionIds",
		Method:             "GET",
		PathPattern:        "/lol-champ-select-legacy/v1/disabled-champion-ids",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampSelectLegacyV1DisabledChampionIdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampSelectLegacyV1DisabledChampionIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampSelectLegacyV1DisabledChampionIds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampSelectLegacyV1ImplementationActive get lol champ select legacy v1 implementation active API
*/
func (a *Client) GetLolChampSelectLegacyV1ImplementationActive(params *GetLolChampSelectLegacyV1ImplementationActiveParams) (*GetLolChampSelectLegacyV1ImplementationActiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampSelectLegacyV1ImplementationActiveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampSelectLegacyV1ImplementationActive",
		Method:             "GET",
		PathPattern:        "/lol-champ-select-legacy/v1/implementation-active",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampSelectLegacyV1ImplementationActiveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampSelectLegacyV1ImplementationActiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampSelectLegacyV1ImplementationActive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampSelectLegacyV1PickableChampionIds get lol champ select legacy v1 pickable champion ids API
*/
func (a *Client) GetLolChampSelectLegacyV1PickableChampionIds(params *GetLolChampSelectLegacyV1PickableChampionIdsParams) (*GetLolChampSelectLegacyV1PickableChampionIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampSelectLegacyV1PickableChampionIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampSelectLegacyV1PickableChampionIds",
		Method:             "GET",
		PathPattern:        "/lol-champ-select-legacy/v1/pickable-champion-ids",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampSelectLegacyV1PickableChampionIdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampSelectLegacyV1PickableChampionIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampSelectLegacyV1PickableChampionIds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampSelectLegacyV1Session get lol champ select legacy v1 session API
*/
func (a *Client) GetLolChampSelectLegacyV1Session(params *GetLolChampSelectLegacyV1SessionParams) (*GetLolChampSelectLegacyV1SessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampSelectLegacyV1SessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampSelectLegacyV1Session",
		Method:             "GET",
		PathPattern:        "/lol-champ-select-legacy/v1/session",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampSelectLegacyV1SessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampSelectLegacyV1SessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampSelectLegacyV1Session: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampSelectLegacyV1SessionTimer get lol champ select legacy v1 session timer API
*/
func (a *Client) GetLolChampSelectLegacyV1SessionTimer(params *GetLolChampSelectLegacyV1SessionTimerParams) (*GetLolChampSelectLegacyV1SessionTimerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampSelectLegacyV1SessionTimerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampSelectLegacyV1SessionTimer",
		Method:             "GET",
		PathPattern:        "/lol-champ-select-legacy/v1/session/timer",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampSelectLegacyV1SessionTimerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampSelectLegacyV1SessionTimerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampSelectLegacyV1SessionTimer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampSelectLegacyV1SessionTrades get lol champ select legacy v1 session trades API
*/
func (a *Client) GetLolChampSelectLegacyV1SessionTrades(params *GetLolChampSelectLegacyV1SessionTradesParams) (*GetLolChampSelectLegacyV1SessionTradesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampSelectLegacyV1SessionTradesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampSelectLegacyV1SessionTrades",
		Method:             "GET",
		PathPattern:        "/lol-champ-select-legacy/v1/session/trades",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampSelectLegacyV1SessionTradesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampSelectLegacyV1SessionTradesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampSelectLegacyV1SessionTrades: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampSelectLegacyV1SessionTradesByID get lol champ select legacy v1 session trades by Id API
*/
func (a *Client) GetLolChampSelectLegacyV1SessionTradesByID(params *GetLolChampSelectLegacyV1SessionTradesByIDParams) (*GetLolChampSelectLegacyV1SessionTradesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampSelectLegacyV1SessionTradesByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampSelectLegacyV1SessionTradesById",
		Method:             "GET",
		PathPattern:        "/lol-champ-select-legacy/v1/session/trades/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampSelectLegacyV1SessionTradesByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampSelectLegacyV1SessionTradesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampSelectLegacyV1SessionTradesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampSelectLegacyV1TeamBoost get lol champ select legacy v1 team boost API
*/
func (a *Client) GetLolChampSelectLegacyV1TeamBoost(params *GetLolChampSelectLegacyV1TeamBoostParams) (*GetLolChampSelectLegacyV1TeamBoostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampSelectLegacyV1TeamBoostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampSelectLegacyV1TeamBoost",
		Method:             "GET",
		PathPattern:        "/lol-champ-select-legacy/v1/team-boost",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampSelectLegacyV1TeamBoostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampSelectLegacyV1TeamBoostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampSelectLegacyV1TeamBoost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampSelectV1AllGridChampions get lol champ select v1 all grid champions API
*/
func (a *Client) GetLolChampSelectV1AllGridChampions(params *GetLolChampSelectV1AllGridChampionsParams) (*GetLolChampSelectV1AllGridChampionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampSelectV1AllGridChampionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampSelectV1AllGridChampions",
		Method:             "GET",
		PathPattern:        "/lol-champ-select/v1/all-grid-champions",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampSelectV1AllGridChampionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampSelectV1AllGridChampionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampSelectV1AllGridChampions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampSelectV1BannableChampionIds get lol champ select v1 bannable champion ids API
*/
func (a *Client) GetLolChampSelectV1BannableChampionIds(params *GetLolChampSelectV1BannableChampionIdsParams) (*GetLolChampSelectV1BannableChampionIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampSelectV1BannableChampionIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampSelectV1BannableChampionIds",
		Method:             "GET",
		PathPattern:        "/lol-champ-select/v1/bannable-champion-ids",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampSelectV1BannableChampionIdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampSelectV1BannableChampionIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampSelectV1BannableChampionIds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampSelectV1ChampSfxNotifications get lol champ select v1 champ sfx notifications API
*/
func (a *Client) GetLolChampSelectV1ChampSfxNotifications(params *GetLolChampSelectV1ChampSfxNotificationsParams) (*GetLolChampSelectV1ChampSfxNotificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampSelectV1ChampSfxNotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampSelectV1ChampSfxNotifications",
		Method:             "GET",
		PathPattern:        "/lol-champ-select/v1/champ-sfx-notifications",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampSelectV1ChampSfxNotificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampSelectV1ChampSfxNotificationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampSelectV1ChampSfxNotifications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampSelectV1CurrentChampion get lol champ select v1 current champion API
*/
func (a *Client) GetLolChampSelectV1CurrentChampion(params *GetLolChampSelectV1CurrentChampionParams) (*GetLolChampSelectV1CurrentChampionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampSelectV1CurrentChampionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampSelectV1CurrentChampion",
		Method:             "GET",
		PathPattern:        "/lol-champ-select/v1/current-champion",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampSelectV1CurrentChampionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampSelectV1CurrentChampionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampSelectV1CurrentChampion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampSelectV1DisabledChampionIds get lol champ select v1 disabled champion ids API
*/
func (a *Client) GetLolChampSelectV1DisabledChampionIds(params *GetLolChampSelectV1DisabledChampionIdsParams) (*GetLolChampSelectV1DisabledChampionIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampSelectV1DisabledChampionIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampSelectV1DisabledChampionIds",
		Method:             "GET",
		PathPattern:        "/lol-champ-select/v1/disabled-champion-ids",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampSelectV1DisabledChampionIdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampSelectV1DisabledChampionIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampSelectV1DisabledChampionIds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampSelectV1GridChampionsByChampionID get lol champ select v1 grid champions by champion Id API
*/
func (a *Client) GetLolChampSelectV1GridChampionsByChampionID(params *GetLolChampSelectV1GridChampionsByChampionIDParams) (*GetLolChampSelectV1GridChampionsByChampionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampSelectV1GridChampionsByChampionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampSelectV1GridChampionsByChampionId",
		Method:             "GET",
		PathPattern:        "/lol-champ-select/v1/grid-champions/{championId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampSelectV1GridChampionsByChampionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampSelectV1GridChampionsByChampionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampSelectV1GridChampionsByChampionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampSelectV1PickableChampionIds get lol champ select v1 pickable champion ids API
*/
func (a *Client) GetLolChampSelectV1PickableChampionIds(params *GetLolChampSelectV1PickableChampionIdsParams) (*GetLolChampSelectV1PickableChampionIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampSelectV1PickableChampionIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampSelectV1PickableChampionIds",
		Method:             "GET",
		PathPattern:        "/lol-champ-select/v1/pickable-champion-ids",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampSelectV1PickableChampionIdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampSelectV1PickableChampionIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampSelectV1PickableChampionIds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampSelectV1PickableSkins get lol champ select v1 pickable skins API
*/
func (a *Client) GetLolChampSelectV1PickableSkins(params *GetLolChampSelectV1PickableSkinsParams) (*GetLolChampSelectV1PickableSkinsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampSelectV1PickableSkinsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampSelectV1PickableSkins",
		Method:             "GET",
		PathPattern:        "/lol-champ-select/v1/pickable-skins",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampSelectV1PickableSkinsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampSelectV1PickableSkinsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampSelectV1PickableSkins: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampSelectV1Session get lol champ select v1 session API
*/
func (a *Client) GetLolChampSelectV1Session(params *GetLolChampSelectV1SessionParams) (*GetLolChampSelectV1SessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampSelectV1SessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampSelectV1Session",
		Method:             "GET",
		PathPattern:        "/lol-champ-select/v1/session",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampSelectV1SessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampSelectV1SessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampSelectV1Session: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampSelectV1SessionTimer get lol champ select v1 session timer API
*/
func (a *Client) GetLolChampSelectV1SessionTimer(params *GetLolChampSelectV1SessionTimerParams) (*GetLolChampSelectV1SessionTimerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampSelectV1SessionTimerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampSelectV1SessionTimer",
		Method:             "GET",
		PathPattern:        "/lol-champ-select/v1/session/timer",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampSelectV1SessionTimerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampSelectV1SessionTimerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampSelectV1SessionTimer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampSelectV1SessionTrades get lol champ select v1 session trades API
*/
func (a *Client) GetLolChampSelectV1SessionTrades(params *GetLolChampSelectV1SessionTradesParams) (*GetLolChampSelectV1SessionTradesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampSelectV1SessionTradesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampSelectV1SessionTrades",
		Method:             "GET",
		PathPattern:        "/lol-champ-select/v1/session/trades",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampSelectV1SessionTradesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampSelectV1SessionTradesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampSelectV1SessionTrades: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampSelectV1SessionTradesByID get lol champ select v1 session trades by Id API
*/
func (a *Client) GetLolChampSelectV1SessionTradesByID(params *GetLolChampSelectV1SessionTradesByIDParams) (*GetLolChampSelectV1SessionTradesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampSelectV1SessionTradesByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampSelectV1SessionTradesById",
		Method:             "GET",
		PathPattern:        "/lol-champ-select/v1/session/trades/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampSelectV1SessionTradesByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampSelectV1SessionTradesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampSelectV1SessionTradesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampSelectV1TeamBoost get lol champ select v1 team boost API
*/
func (a *Client) GetLolChampSelectV1TeamBoost(params *GetLolChampSelectV1TeamBoostParams) (*GetLolChampSelectV1TeamBoostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampSelectV1TeamBoostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampSelectV1TeamBoost",
		Method:             "GET",
		PathPattern:        "/lol-champ-select/v1/team-boost",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampSelectV1TeamBoostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampSelectV1TeamBoostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampSelectV1TeamBoost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampionsV1InventoriesBySummonerIDChampions get lol champions v1 inventories by summoner Id champions API
*/
func (a *Client) GetLolChampionsV1InventoriesBySummonerIDChampions(params *GetLolChampionsV1InventoriesBySummonerIDChampionsParams) (*GetLolChampionsV1InventoriesBySummonerIDChampionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampionsV1InventoriesBySummonerIDChampionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampionsV1InventoriesBySummonerIdChampions",
		Method:             "GET",
		PathPattern:        "/lol-champions/v1/inventories/{summonerId}/champions",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampionsV1InventoriesBySummonerIDChampionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampionsV1InventoriesBySummonerIDChampionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampionsV1InventoriesBySummonerIdChampions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampionsV1InventoriesBySummonerIDChampionsByChampionID get lol champions v1 inventories by summoner Id champions by champion Id API
*/
func (a *Client) GetLolChampionsV1InventoriesBySummonerIDChampionsByChampionID(params *GetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDParams) (*GetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampionsV1InventoriesBySummonerIdChampionsByChampionId",
		Method:             "GET",
		PathPattern:        "/lol-champions/v1/inventories/{summonerId}/champions/{championId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampionsV1InventoriesBySummonerIdChampionsByChampionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDSkins get lol champions v1 inventories by summoner Id champions by champion Id skins API
*/
func (a *Client) GetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDSkins(params *GetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDSkinsParams) (*GetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDSkinsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDSkinsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampionsV1InventoriesBySummonerIdChampionsByChampionIdSkins",
		Method:             "GET",
		PathPattern:        "/lol-champions/v1/inventories/{summonerId}/champions/{championId}/skins",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDSkinsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDSkinsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampionsV1InventoriesBySummonerIdChampionsByChampionIdSkins: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDSkinsByChampionSkinID get lol champions v1 inventories by summoner Id champions by champion Id skins by champion skin Id API
*/
func (a *Client) GetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDSkinsByChampionSkinID(params *GetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDSkinsByChampionSkinIDParams) (*GetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDSkinsByChampionSkinIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDSkinsByChampionSkinIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampionsV1InventoriesBySummonerIdChampionsByChampionIdSkinsByChampionSkinId",
		Method:             "GET",
		PathPattern:        "/lol-champions/v1/inventories/{summonerId}/champions/{championId}/skins/{championSkinId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDSkinsByChampionSkinIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDSkinsByChampionSkinIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampionsV1InventoriesBySummonerIdChampionsByChampionIdSkinsByChampionSkinId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDSkinsBySkinIDChromas get lol champions v1 inventories by summoner Id champions by champion Id skins by skin Id chromas API
*/
func (a *Client) GetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDSkinsBySkinIDChromas(params *GetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDSkinsBySkinIDChromasParams) (*GetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDSkinsBySkinIDChromasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDSkinsBySkinIDChromasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampionsV1InventoriesBySummonerIdChampionsByChampionIdSkinsBySkinIdChromas",
		Method:             "GET",
		PathPattern:        "/lol-champions/v1/inventories/{summonerId}/champions/{championId}/skins/{skinId}/chromas",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDSkinsBySkinIDChromasReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampionsV1InventoriesBySummonerIDChampionsByChampionIDSkinsBySkinIDChromasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampionsV1InventoriesBySummonerIdChampionsByChampionIdSkinsBySkinIdChromas: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampionsV1InventoriesBySummonerIDChampionsMinimal get lol champions v1 inventories by summoner Id champions minimal API
*/
func (a *Client) GetLolChampionsV1InventoriesBySummonerIDChampionsMinimal(params *GetLolChampionsV1InventoriesBySummonerIDChampionsMinimalParams) (*GetLolChampionsV1InventoriesBySummonerIDChampionsMinimalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampionsV1InventoriesBySummonerIDChampionsMinimalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampionsV1InventoriesBySummonerIdChampionsMinimal",
		Method:             "GET",
		PathPattern:        "/lol-champions/v1/inventories/{summonerId}/champions-minimal",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampionsV1InventoriesBySummonerIDChampionsMinimalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampionsV1InventoriesBySummonerIDChampionsMinimalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampionsV1InventoriesBySummonerIdChampionsMinimal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampionsV1InventoriesBySummonerIDChampionsPlayableCount get lol champions v1 inventories by summoner Id champions playable count API
*/
func (a *Client) GetLolChampionsV1InventoriesBySummonerIDChampionsPlayableCount(params *GetLolChampionsV1InventoriesBySummonerIDChampionsPlayableCountParams) (*GetLolChampionsV1InventoriesBySummonerIDChampionsPlayableCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampionsV1InventoriesBySummonerIDChampionsPlayableCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampionsV1InventoriesBySummonerIdChampionsPlayableCount",
		Method:             "GET",
		PathPattern:        "/lol-champions/v1/inventories/{summonerId}/champions-playable-count",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampionsV1InventoriesBySummonerIDChampionsPlayableCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampionsV1InventoriesBySummonerIDChampionsPlayableCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampionsV1InventoriesBySummonerIdChampionsPlayableCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampionsV1InventoriesBySummonerIDSkinsMinimal get lol champions v1 inventories by summoner Id skins minimal API
*/
func (a *Client) GetLolChampionsV1InventoriesBySummonerIDSkinsMinimal(params *GetLolChampionsV1InventoriesBySummonerIDSkinsMinimalParams) (*GetLolChampionsV1InventoriesBySummonerIDSkinsMinimalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampionsV1InventoriesBySummonerIDSkinsMinimalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampionsV1InventoriesBySummonerIdSkinsMinimal",
		Method:             "GET",
		PathPattern:        "/lol-champions/v1/inventories/{summonerId}/skins-minimal",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampionsV1InventoriesBySummonerIDSkinsMinimalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampionsV1InventoriesBySummonerIDSkinsMinimalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampionsV1InventoriesBySummonerIdSkinsMinimal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChampionsV1OwnedChampionsMinimal get lol champions v1 owned champions minimal API
*/
func (a *Client) GetLolChampionsV1OwnedChampionsMinimal(params *GetLolChampionsV1OwnedChampionsMinimalParams) (*GetLolChampionsV1OwnedChampionsMinimalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChampionsV1OwnedChampionsMinimalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChampionsV1OwnedChampionsMinimal",
		Method:             "GET",
		PathPattern:        "/lol-champions/v1/owned-champions-minimal",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChampionsV1OwnedChampionsMinimalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChampionsV1OwnedChampionsMinimalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChampionsV1OwnedChampionsMinimal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChatV1BlockedPlayers get lol chat v1 blocked players API
*/
func (a *Client) GetLolChatV1BlockedPlayers(params *GetLolChatV1BlockedPlayersParams) (*GetLolChatV1BlockedPlayersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChatV1BlockedPlayersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChatV1BlockedPlayers",
		Method:             "GET",
		PathPattern:        "/lol-chat/v1/blocked-players",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChatV1BlockedPlayersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChatV1BlockedPlayersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChatV1BlockedPlayers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChatV1BlockedPlayersByID get lol chat v1 blocked players by Id API
*/
func (a *Client) GetLolChatV1BlockedPlayersByID(params *GetLolChatV1BlockedPlayersByIDParams) (*GetLolChatV1BlockedPlayersByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChatV1BlockedPlayersByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChatV1BlockedPlayersById",
		Method:             "GET",
		PathPattern:        "/lol-chat/v1/blocked-players/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChatV1BlockedPlayersByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChatV1BlockedPlayersByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChatV1BlockedPlayersById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChatV1Config get lol chat v1 config API
*/
func (a *Client) GetLolChatV1Config(params *GetLolChatV1ConfigParams) (*GetLolChatV1ConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChatV1ConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChatV1Config",
		Method:             "GET",
		PathPattern:        "/lol-chat/v1/config",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChatV1ConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChatV1ConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChatV1Config: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChatV1Conversations get lol chat v1 conversations API
*/
func (a *Client) GetLolChatV1Conversations(params *GetLolChatV1ConversationsParams) (*GetLolChatV1ConversationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChatV1ConversationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChatV1Conversations",
		Method:             "GET",
		PathPattern:        "/lol-chat/v1/conversations",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChatV1ConversationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChatV1ConversationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChatV1Conversations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChatV1ConversationsActive get lol chat v1 conversations active API
*/
func (a *Client) GetLolChatV1ConversationsActive(params *GetLolChatV1ConversationsActiveParams) (*GetLolChatV1ConversationsActiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChatV1ConversationsActiveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChatV1ConversationsActive",
		Method:             "GET",
		PathPattern:        "/lol-chat/v1/conversations/active",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChatV1ConversationsActiveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChatV1ConversationsActiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChatV1ConversationsActive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChatV1ConversationsByID get lol chat v1 conversations by Id API
*/
func (a *Client) GetLolChatV1ConversationsByID(params *GetLolChatV1ConversationsByIDParams) (*GetLolChatV1ConversationsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChatV1ConversationsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChatV1ConversationsById",
		Method:             "GET",
		PathPattern:        "/lol-chat/v1/conversations/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChatV1ConversationsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChatV1ConversationsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChatV1ConversationsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChatV1ConversationsByIDMessages get lol chat v1 conversations by Id messages API
*/
func (a *Client) GetLolChatV1ConversationsByIDMessages(params *GetLolChatV1ConversationsByIDMessagesParams) (*GetLolChatV1ConversationsByIDMessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChatV1ConversationsByIDMessagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChatV1ConversationsByIdMessages",
		Method:             "GET",
		PathPattern:        "/lol-chat/v1/conversations/{id}/messages",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChatV1ConversationsByIDMessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChatV1ConversationsByIDMessagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChatV1ConversationsByIdMessages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChatV1ConversationsByIDParticipants get lol chat v1 conversations by Id participants API
*/
func (a *Client) GetLolChatV1ConversationsByIDParticipants(params *GetLolChatV1ConversationsByIDParticipantsParams) (*GetLolChatV1ConversationsByIDParticipantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChatV1ConversationsByIDParticipantsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChatV1ConversationsByIdParticipants",
		Method:             "GET",
		PathPattern:        "/lol-chat/v1/conversations/{id}/participants",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChatV1ConversationsByIDParticipantsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChatV1ConversationsByIDParticipantsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChatV1ConversationsByIdParticipants: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChatV1ConversationsNotify get lol chat v1 conversations notify API
*/
func (a *Client) GetLolChatV1ConversationsNotify(params *GetLolChatV1ConversationsNotifyParams) (*GetLolChatV1ConversationsNotifyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChatV1ConversationsNotifyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChatV1ConversationsNotify",
		Method:             "GET",
		PathPattern:        "/lol-chat/v1/conversations/notify",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChatV1ConversationsNotifyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChatV1ConversationsNotifyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChatV1ConversationsNotify: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChatV1Errors get lol chat v1 errors API
*/
func (a *Client) GetLolChatV1Errors(params *GetLolChatV1ErrorsParams) (*GetLolChatV1ErrorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChatV1ErrorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChatV1Errors",
		Method:             "GET",
		PathPattern:        "/lol-chat/v1/errors",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChatV1ErrorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChatV1ErrorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChatV1Errors: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChatV1FriendCounts get lol chat v1 friend counts API
*/
func (a *Client) GetLolChatV1FriendCounts(params *GetLolChatV1FriendCountsParams) (*GetLolChatV1FriendCountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChatV1FriendCountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChatV1FriendCounts",
		Method:             "GET",
		PathPattern:        "/lol-chat/v1/friend-counts",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChatV1FriendCountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChatV1FriendCountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChatV1FriendCounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChatV1FriendGroups get lol chat v1 friend groups API
*/
func (a *Client) GetLolChatV1FriendGroups(params *GetLolChatV1FriendGroupsParams) (*GetLolChatV1FriendGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChatV1FriendGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChatV1FriendGroups",
		Method:             "GET",
		PathPattern:        "/lol-chat/v1/friend-groups",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChatV1FriendGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChatV1FriendGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChatV1FriendGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChatV1FriendGroupsByID get lol chat v1 friend groups by Id API
*/
func (a *Client) GetLolChatV1FriendGroupsByID(params *GetLolChatV1FriendGroupsByIDParams) (*GetLolChatV1FriendGroupsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChatV1FriendGroupsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChatV1FriendGroupsById",
		Method:             "GET",
		PathPattern:        "/lol-chat/v1/friend-groups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChatV1FriendGroupsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChatV1FriendGroupsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChatV1FriendGroupsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChatV1FriendGroupsByIDFriends get lol chat v1 friend groups by Id friends API
*/
func (a *Client) GetLolChatV1FriendGroupsByIDFriends(params *GetLolChatV1FriendGroupsByIDFriendsParams) (*GetLolChatV1FriendGroupsByIDFriendsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChatV1FriendGroupsByIDFriendsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChatV1FriendGroupsByIdFriends",
		Method:             "GET",
		PathPattern:        "/lol-chat/v1/friend-groups/{id}/friends",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChatV1FriendGroupsByIDFriendsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChatV1FriendGroupsByIDFriendsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChatV1FriendGroupsByIdFriends: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChatV1FriendRequests get lol chat v1 friend requests API
*/
func (a *Client) GetLolChatV1FriendRequests(params *GetLolChatV1FriendRequestsParams) (*GetLolChatV1FriendRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChatV1FriendRequestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChatV1FriendRequests",
		Method:             "GET",
		PathPattern:        "/lol-chat/v1/friend-requests",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChatV1FriendRequestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChatV1FriendRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChatV1FriendRequests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChatV1Friends get lol chat v1 friends API
*/
func (a *Client) GetLolChatV1Friends(params *GetLolChatV1FriendsParams) (*GetLolChatV1FriendsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChatV1FriendsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChatV1Friends",
		Method:             "GET",
		PathPattern:        "/lol-chat/v1/friends",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChatV1FriendsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChatV1FriendsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChatV1Friends: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChatV1FriendsByID get lol chat v1 friends by Id API
*/
func (a *Client) GetLolChatV1FriendsByID(params *GetLolChatV1FriendsByIDParams) (*GetLolChatV1FriendsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChatV1FriendsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChatV1FriendsById",
		Method:             "GET",
		PathPattern:        "/lol-chat/v1/friends/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChatV1FriendsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChatV1FriendsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChatV1FriendsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChatV1Me get lol chat v1 me API
*/
func (a *Client) GetLolChatV1Me(params *GetLolChatV1MeParams) (*GetLolChatV1MeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChatV1MeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChatV1Me",
		Method:             "GET",
		PathPattern:        "/lol-chat/v1/me",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChatV1MeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChatV1MeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChatV1Me: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChatV1Resources get lol chat v1 resources API
*/
func (a *Client) GetLolChatV1Resources(params *GetLolChatV1ResourcesParams) (*GetLolChatV1ResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChatV1ResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChatV1Resources",
		Method:             "GET",
		PathPattern:        "/lol-chat/v1/resources",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChatV1ResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChatV1ResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChatV1Resources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChatV1Session get lol chat v1 session API
*/
func (a *Client) GetLolChatV1Session(params *GetLolChatV1SessionParams) (*GetLolChatV1SessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChatV1SessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChatV1Session",
		Method:             "GET",
		PathPattern:        "/lol-chat/v1/session",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChatV1SessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChatV1SessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChatV1Session: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChatV1Settings get lol chat v1 settings API
*/
func (a *Client) GetLolChatV1Settings(params *GetLolChatV1SettingsParams) (*GetLolChatV1SettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChatV1SettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChatV1Settings",
		Method:             "GET",
		PathPattern:        "/lol-chat/v1/settings",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChatV1SettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChatV1SettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChatV1Settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolChatV1SettingsByKey get lol chat v1 settings by key API
*/
func (a *Client) GetLolChatV1SettingsByKey(params *GetLolChatV1SettingsByKeyParams) (*GetLolChatV1SettingsByKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolChatV1SettingsByKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolChatV1SettingsByKey",
		Method:             "GET",
		PathPattern:        "/lol-chat/v1/settings/{key}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolChatV1SettingsByKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolChatV1SettingsByKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolChatV1SettingsByKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1AllTournaments get lol clash v1 all tournaments API
*/
func (a *Client) GetLolClashV1AllTournaments(params *GetLolClashV1AllTournamentsParams) (*GetLolClashV1AllTournamentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1AllTournamentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1AllTournaments",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/all-tournaments",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1AllTournamentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1AllTournamentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1AllTournaments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1BracketByBracketID get lol clash v1 bracket by bracket Id API
*/
func (a *Client) GetLolClashV1BracketByBracketID(params *GetLolClashV1BracketByBracketIDParams) (*GetLolClashV1BracketByBracketIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1BracketByBracketIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1BracketByBracketId",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/bracket/{bracketId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1BracketByBracketIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1BracketByBracketIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1BracketByBracketId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1CheckinAllowed get lol clash v1 checkin allowed API
*/
func (a *Client) GetLolClashV1CheckinAllowed(params *GetLolClashV1CheckinAllowedParams) (*GetLolClashV1CheckinAllowedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1CheckinAllowedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1CheckinAllowed",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/checkin-allowed",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1CheckinAllowedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1CheckinAllowedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1CheckinAllowed: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1CurrentTournamentIds get lol clash v1 current tournament ids API
*/
func (a *Client) GetLolClashV1CurrentTournamentIds(params *GetLolClashV1CurrentTournamentIdsParams) (*GetLolClashV1CurrentTournamentIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1CurrentTournamentIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1CurrentTournamentIds",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/currentTournamentIds",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1CurrentTournamentIdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1CurrentTournamentIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1CurrentTournamentIds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1Enabled get lol clash v1 enabled API
*/
func (a *Client) GetLolClashV1Enabled(params *GetLolClashV1EnabledParams) (*GetLolClashV1EnabledOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1EnabledParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1Enabled",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/enabled",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1EnabledReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1EnabledOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1Enabled: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1EogPlayerUpdate get lol clash v1 eog player update API
*/
func (a *Client) GetLolClashV1EogPlayerUpdate(params *GetLolClashV1EogPlayerUpdateParams) (*GetLolClashV1EogPlayerUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1EogPlayerUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1EogPlayerUpdate",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/eog-player-update",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1EogPlayerUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1EogPlayerUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1EogPlayerUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1EventByUUID get lol clash v1 event by Uuid API
*/
func (a *Client) GetLolClashV1EventByUUID(params *GetLolClashV1EventByUUIDParams) (*GetLolClashV1EventByUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1EventByUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1EventByUuid",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/event/{uuid}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1EventByUUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1EventByUUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1EventByUuid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1GameEnd get lol clash v1 game end API
*/
func (a *Client) GetLolClashV1GameEnd(params *GetLolClashV1GameEndParams) (*GetLolClashV1GameEndOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1GameEndParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1GameEnd",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/game-end",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1GameEndReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1GameEndOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1GameEnd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1Historyandwinners get lol clash v1 historyandwinners API
*/
func (a *Client) GetLolClashV1Historyandwinners(params *GetLolClashV1HistoryandwinnersParams) (*GetLolClashV1HistoryandwinnersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1HistoryandwinnersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1Historyandwinners",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/historyandwinners",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1HistoryandwinnersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1HistoryandwinnersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1Historyandwinners: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1Iconconfig get lol clash v1 iconconfig API
*/
func (a *Client) GetLolClashV1Iconconfig(params *GetLolClashV1IconconfigParams) (*GetLolClashV1IconconfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1IconconfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1Iconconfig",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/iconconfig",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1IconconfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1IconconfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1Iconconfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1InvitedRosterIds get lol clash v1 invited roster ids API
*/
func (a *Client) GetLolClashV1InvitedRosterIds(params *GetLolClashV1InvitedRosterIdsParams) (*GetLolClashV1InvitedRosterIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1InvitedRosterIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1InvitedRosterIds",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/invited-roster-ids",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1InvitedRosterIdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1InvitedRosterIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1InvitedRosterIds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1Notifications get lol clash v1 notifications API
*/
func (a *Client) GetLolClashV1Notifications(params *GetLolClashV1NotificationsParams) (*GetLolClashV1NotificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1NotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1Notifications",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/notifications",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1NotificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1NotificationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1Notifications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1Ping get lol clash v1 ping API
*/
func (a *Client) GetLolClashV1Ping(params *GetLolClashV1PingParams) (*GetLolClashV1PingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1PingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1Ping",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/ping",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1PingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1PingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1Ping: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1Player get lol clash v1 player API
*/
func (a *Client) GetLolClashV1Player(params *GetLolClashV1PlayerParams) (*GetLolClashV1PlayerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1PlayerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1Player",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/player",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1PlayerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1PlayerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1Player: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1PlayerChatRosters get lol clash v1 player chat rosters API
*/
func (a *Client) GetLolClashV1PlayerChatRosters(params *GetLolClashV1PlayerChatRostersParams) (*GetLolClashV1PlayerChatRostersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1PlayerChatRostersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1PlayerChatRosters",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/player/chat-rosters",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1PlayerChatRostersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1PlayerChatRostersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1PlayerChatRosters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1PlayerHistory get lol clash v1 player history API
*/
func (a *Client) GetLolClashV1PlayerHistory(params *GetLolClashV1PlayerHistoryParams) (*GetLolClashV1PlayerHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1PlayerHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1PlayerHistory",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/player/history",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1PlayerHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1PlayerHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1PlayerHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1PlaymodeRestricted get lol clash v1 playmode restricted API
*/
func (a *Client) GetLolClashV1PlaymodeRestricted(params *GetLolClashV1PlaymodeRestrictedParams) (*GetLolClashV1PlaymodeRestrictedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1PlaymodeRestrictedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1PlaymodeRestricted",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/playmode-restricted",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1PlaymodeRestrictedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1PlaymodeRestrictedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1PlaymodeRestricted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1Ready get lol clash v1 ready API
*/
func (a *Client) GetLolClashV1Ready(params *GetLolClashV1ReadyParams) (*GetLolClashV1ReadyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1ReadyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1Ready",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/ready",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1ReadyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1ReadyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1Ready: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1Rewards get lol clash v1 rewards API
*/
func (a *Client) GetLolClashV1Rewards(params *GetLolClashV1RewardsParams) (*GetLolClashV1RewardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1RewardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1Rewards",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/rewards",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1RewardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1RewardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1Rewards: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1RosterByRosterID get lol clash v1 roster by roster Id API
*/
func (a *Client) GetLolClashV1RosterByRosterID(params *GetLolClashV1RosterByRosterIDParams) (*GetLolClashV1RosterByRosterIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1RosterByRosterIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1RosterByRosterId",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1RosterByRosterIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1RosterByRosterIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1RosterByRosterId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1RosterByRosterIDStats get lol clash v1 roster by roster Id stats API
*/
func (a *Client) GetLolClashV1RosterByRosterIDStats(params *GetLolClashV1RosterByRosterIDStatsParams) (*GetLolClashV1RosterByRosterIDStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1RosterByRosterIDStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1RosterByRosterIdStats",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/stats",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1RosterByRosterIDStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1RosterByRosterIDStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1RosterByRosterIdStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1ScoutingChampions get lol clash v1 scouting champions API
*/
func (a *Client) GetLolClashV1ScoutingChampions(params *GetLolClashV1ScoutingChampionsParams) (*GetLolClashV1ScoutingChampionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1ScoutingChampionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1ScoutingChampions",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/scouting/champions",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1ScoutingChampionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1ScoutingChampionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1ScoutingChampions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1ScoutingMatchhistory get lol clash v1 scouting matchhistory API
*/
func (a *Client) GetLolClashV1ScoutingMatchhistory(params *GetLolClashV1ScoutingMatchhistoryParams) (*GetLolClashV1ScoutingMatchhistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1ScoutingMatchhistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1ScoutingMatchhistory",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/scouting/matchhistory",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1ScoutingMatchhistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1ScoutingMatchhistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1ScoutingMatchhistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1SimpleStateFlags get lol clash v1 simple state flags API
*/
func (a *Client) GetLolClashV1SimpleStateFlags(params *GetLolClashV1SimpleStateFlagsParams) (*GetLolClashV1SimpleStateFlagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1SimpleStateFlagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1SimpleStateFlags",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/simple-state-flags",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1SimpleStateFlagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1SimpleStateFlagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1SimpleStateFlags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1ThirdpartyTeamData get lol clash v1 thirdparty team data API
*/
func (a *Client) GetLolClashV1ThirdpartyTeamData(params *GetLolClashV1ThirdpartyTeamDataParams) (*GetLolClashV1ThirdpartyTeamDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1ThirdpartyTeamDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1ThirdpartyTeamData",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/thirdparty/team-data",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1ThirdpartyTeamDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1ThirdpartyTeamDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1ThirdpartyTeamData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1Time get lol clash v1 time API
*/
func (a *Client) GetLolClashV1Time(params *GetLolClashV1TimeParams) (*GetLolClashV1TimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1TimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1Time",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/time",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1TimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1TimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1Time: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1TournamentByTournamentID get lol clash v1 tournament by tournament Id API
*/
func (a *Client) GetLolClashV1TournamentByTournamentID(params *GetLolClashV1TournamentByTournamentIDParams) (*GetLolClashV1TournamentByTournamentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1TournamentByTournamentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1TournamentByTournamentId",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/tournament/{tournamentId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1TournamentByTournamentIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1TournamentByTournamentIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1TournamentByTournamentId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1TournamentByTournamentIDGetPlayerTiers get lol clash v1 tournament by tournament Id get player tiers API
*/
func (a *Client) GetLolClashV1TournamentByTournamentIDGetPlayerTiers(params *GetLolClashV1TournamentByTournamentIDGetPlayerTiersParams) (*GetLolClashV1TournamentByTournamentIDGetPlayerTiersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1TournamentByTournamentIDGetPlayerTiersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1TournamentByTournamentIdGetPlayerTiers",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/tournament/{tournamentId}/get-player-tiers",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1TournamentByTournamentIDGetPlayerTiersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1TournamentByTournamentIDGetPlayerTiersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1TournamentByTournamentIdGetPlayerTiers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1TournamentByTournamentIDPlayer get lol clash v1 tournament by tournament Id player API
*/
func (a *Client) GetLolClashV1TournamentByTournamentIDPlayer(params *GetLolClashV1TournamentByTournamentIDPlayerParams) (*GetLolClashV1TournamentByTournamentIDPlayerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1TournamentByTournamentIDPlayerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1TournamentByTournamentIdPlayer",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/tournament/{tournamentId}/player",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1TournamentByTournamentIDPlayerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1TournamentByTournamentIDPlayerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1TournamentByTournamentIdPlayer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1TournamentByTournamentIDPlayerHonorRestricted get lol clash v1 tournament by tournament Id player honor restricted API
*/
func (a *Client) GetLolClashV1TournamentByTournamentIDPlayerHonorRestricted(params *GetLolClashV1TournamentByTournamentIDPlayerHonorRestrictedParams) (*GetLolClashV1TournamentByTournamentIDPlayerHonorRestrictedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1TournamentByTournamentIDPlayerHonorRestrictedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1TournamentByTournamentIdPlayerHonorRestricted",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/tournament/{tournamentId}/player-honor-restricted",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1TournamentByTournamentIDPlayerHonorRestrictedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1TournamentByTournamentIDPlayerHonorRestrictedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1TournamentByTournamentIdPlayerHonorRestricted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1TournamentByTournamentIDStateInfo get lol clash v1 tournament by tournament Id state info API
*/
func (a *Client) GetLolClashV1TournamentByTournamentIDStateInfo(params *GetLolClashV1TournamentByTournamentIDStateInfoParams) (*GetLolClashV1TournamentByTournamentIDStateInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1TournamentByTournamentIDStateInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1TournamentByTournamentIdStateInfo",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/tournament/{tournamentId}/stateInfo",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1TournamentByTournamentIDStateInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1TournamentByTournamentIDStateInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1TournamentByTournamentIdStateInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1TournamentByTournamentIDWinners get lol clash v1 tournament by tournament Id winners API
*/
func (a *Client) GetLolClashV1TournamentByTournamentIDWinners(params *GetLolClashV1TournamentByTournamentIDWinnersParams) (*GetLolClashV1TournamentByTournamentIDWinnersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1TournamentByTournamentIDWinnersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1TournamentByTournamentIdWinners",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/tournament/{tournamentId}/winners",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1TournamentByTournamentIDWinnersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1TournamentByTournamentIDWinnersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1TournamentByTournamentIdWinners: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1TournamentCancelled get lol clash v1 tournament cancelled API
*/
func (a *Client) GetLolClashV1TournamentCancelled(params *GetLolClashV1TournamentCancelledParams) (*GetLolClashV1TournamentCancelledOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1TournamentCancelledParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1TournamentCancelled",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/tournament/cancelled",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1TournamentCancelledReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1TournamentCancelledOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1TournamentCancelled: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1TournamentGetAllPlayerTiers get lol clash v1 tournament get all player tiers API
*/
func (a *Client) GetLolClashV1TournamentGetAllPlayerTiers(params *GetLolClashV1TournamentGetAllPlayerTiersParams) (*GetLolClashV1TournamentGetAllPlayerTiersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1TournamentGetAllPlayerTiersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1TournamentGetAllPlayerTiers",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/tournament/get-all-player-tiers",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1TournamentGetAllPlayerTiersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1TournamentGetAllPlayerTiersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1TournamentGetAllPlayerTiers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1TournamentStateInfo get lol clash v1 tournament state info API
*/
func (a *Client) GetLolClashV1TournamentStateInfo(params *GetLolClashV1TournamentStateInfoParams) (*GetLolClashV1TournamentStateInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1TournamentStateInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1TournamentStateInfo",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/tournament-state-info",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1TournamentStateInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1TournamentStateInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1TournamentStateInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1TournamentSummary get lol clash v1 tournament summary API
*/
func (a *Client) GetLolClashV1TournamentSummary(params *GetLolClashV1TournamentSummaryParams) (*GetLolClashV1TournamentSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1TournamentSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1TournamentSummary",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/tournament-summary",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1TournamentSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1TournamentSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1TournamentSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1Visible get lol clash v1 visible API
*/
func (a *Client) GetLolClashV1Visible(params *GetLolClashV1VisibleParams) (*GetLolClashV1VisibleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1VisibleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1Visible",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/visible",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1VisibleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1VisibleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1Visible: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV1VoiceEnabled get lol clash v1 voice enabled API
*/
func (a *Client) GetLolClashV1VoiceEnabled(params *GetLolClashV1VoiceEnabledParams) (*GetLolClashV1VoiceEnabledOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV1VoiceEnabledParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV1VoiceEnabled",
		Method:             "GET",
		PathPattern:        "/lol-clash/v1/voice-enabled",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV1VoiceEnabledReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV1VoiceEnabledOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV1VoiceEnabled: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClashV2PlaymodeRestricted get lol clash v2 playmode restricted API
*/
func (a *Client) GetLolClashV2PlaymodeRestricted(params *GetLolClashV2PlaymodeRestrictedParams) (*GetLolClashV2PlaymodeRestrictedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClashV2PlaymodeRestrictedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClashV2PlaymodeRestricted",
		Method:             "GET",
		PathPattern:        "/lol-clash/v2/playmode-restricted",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClashV2PlaymodeRestrictedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClashV2PlaymodeRestrictedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClashV2PlaymodeRestricted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClubsPublicV1ClubsPublic get lol clubs public v1 clubs public API
*/
func (a *Client) GetLolClubsPublicV1ClubsPublic(params *GetLolClubsPublicV1ClubsPublicParams) (*GetLolClubsPublicV1ClubsPublicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClubsPublicV1ClubsPublicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClubsPublicV1ClubsPublic",
		Method:             "GET",
		PathPattern:        "/lol-clubs-public/v1/clubs/public",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClubsPublicV1ClubsPublicReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClubsPublicV1ClubsPublicOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClubsPublicV1ClubsPublic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClubsPublicV1ClubsPublicBySummonerID get lol clubs public v1 clubs public by summoner Id API
*/
func (a *Client) GetLolClubsPublicV1ClubsPublicBySummonerID(params *GetLolClubsPublicV1ClubsPublicBySummonerIDParams) (*GetLolClubsPublicV1ClubsPublicBySummonerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClubsPublicV1ClubsPublicBySummonerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClubsPublicV1ClubsPublicBySummonerId",
		Method:             "GET",
		PathPattern:        "/lol-clubs-public/v1/clubs/public/{summonerId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClubsPublicV1ClubsPublicBySummonerIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClubsPublicV1ClubsPublicBySummonerIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClubsPublicV1ClubsPublicBySummonerId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClubsPublicV1ClubsPublicBySummonerIDTag get lol clubs public v1 clubs public by summoner Id tag API
*/
func (a *Client) GetLolClubsPublicV1ClubsPublicBySummonerIDTag(params *GetLolClubsPublicV1ClubsPublicBySummonerIDTagParams) (*GetLolClubsPublicV1ClubsPublicBySummonerIDTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClubsPublicV1ClubsPublicBySummonerIDTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClubsPublicV1ClubsPublicBySummonerIdTag",
		Method:             "GET",
		PathPattern:        "/lol-clubs-public/v1/clubs/public/{summonerId}/tag",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClubsPublicV1ClubsPublicBySummonerIDTagReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClubsPublicV1ClubsPublicBySummonerIDTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClubsPublicV1ClubsPublicBySummonerIdTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClubsV1Clubs get lol clubs v1 clubs API
*/
func (a *Client) GetLolClubsV1Clubs(params *GetLolClubsV1ClubsParams) (*GetLolClubsV1ClubsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClubsV1ClubsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClubsV1Clubs",
		Method:             "GET",
		PathPattern:        "/lol-clubs/v1/clubs",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClubsV1ClubsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClubsV1ClubsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClubsV1Clubs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClubsV1ClubsByClubKey get lol clubs v1 clubs by club key API
*/
func (a *Client) GetLolClubsV1ClubsByClubKey(params *GetLolClubsV1ClubsByClubKeyParams) (*GetLolClubsV1ClubsByClubKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClubsV1ClubsByClubKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClubsV1ClubsByClubKey",
		Method:             "GET",
		PathPattern:        "/lol-clubs/v1/clubs/{clubKey}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClubsV1ClubsByClubKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClubsV1ClubsByClubKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClubsV1ClubsByClubKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClubsV1ClubsByClubKeyInvitations get lol clubs v1 clubs by club key invitations API
*/
func (a *Client) GetLolClubsV1ClubsByClubKeyInvitations(params *GetLolClubsV1ClubsByClubKeyInvitationsParams) (*GetLolClubsV1ClubsByClubKeyInvitationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClubsV1ClubsByClubKeyInvitationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClubsV1ClubsByClubKeyInvitations",
		Method:             "GET",
		PathPattern:        "/lol-clubs/v1/clubs/{clubKey}/invitations",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClubsV1ClubsByClubKeyInvitationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClubsV1ClubsByClubKeyInvitationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClubsV1ClubsByClubKeyInvitations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClubsV1ClubsByClubKeyMembers get lol clubs v1 clubs by club key members API
*/
func (a *Client) GetLolClubsV1ClubsByClubKeyMembers(params *GetLolClubsV1ClubsByClubKeyMembersParams) (*GetLolClubsV1ClubsByClubKeyMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClubsV1ClubsByClubKeyMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClubsV1ClubsByClubKeyMembers",
		Method:             "GET",
		PathPattern:        "/lol-clubs/v1/clubs/{clubKey}/members",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClubsV1ClubsByClubKeyMembersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClubsV1ClubsByClubKeyMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClubsV1ClubsByClubKeyMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClubsV1ClubsByClubKeyMotd get lol clubs v1 clubs by club key motd API
*/
func (a *Client) GetLolClubsV1ClubsByClubKeyMotd(params *GetLolClubsV1ClubsByClubKeyMotdParams) (*GetLolClubsV1ClubsByClubKeyMotdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClubsV1ClubsByClubKeyMotdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClubsV1ClubsByClubKeyMotd",
		Method:             "GET",
		PathPattern:        "/lol-clubs/v1/clubs/{clubKey}/motd",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClubsV1ClubsByClubKeyMotdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClubsV1ClubsByClubKeyMotdOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClubsV1ClubsByClubKeyMotd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClubsV1ClubsByClubKeyNominations get lol clubs v1 clubs by club key nominations API
*/
func (a *Client) GetLolClubsV1ClubsByClubKeyNominations(params *GetLolClubsV1ClubsByClubKeyNominationsParams) (*GetLolClubsV1ClubsByClubKeyNominationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClubsV1ClubsByClubKeyNominationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClubsV1ClubsByClubKeyNominations",
		Method:             "GET",
		PathPattern:        "/lol-clubs/v1/clubs/{clubKey}/nominations",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClubsV1ClubsByClubKeyNominationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClubsV1ClubsByClubKeyNominationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClubsV1ClubsByClubKeyNominations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClubsV1ClubsInvitations get lol clubs v1 clubs invitations API
*/
func (a *Client) GetLolClubsV1ClubsInvitations(params *GetLolClubsV1ClubsInvitationsParams) (*GetLolClubsV1ClubsInvitationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClubsV1ClubsInvitationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClubsV1ClubsInvitations",
		Method:             "GET",
		PathPattern:        "/lol-clubs/v1/clubs/invitations",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClubsV1ClubsInvitationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClubsV1ClubsInvitationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClubsV1ClubsInvitations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClubsV1ClubsMembership get lol clubs v1 clubs membership API
*/
func (a *Client) GetLolClubsV1ClubsMembership(params *GetLolClubsV1ClubsMembershipParams) (*GetLolClubsV1ClubsMembershipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClubsV1ClubsMembershipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClubsV1ClubsMembership",
		Method:             "GET",
		PathPattern:        "/lol-clubs/v1/clubs/membership",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClubsV1ClubsMembershipReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClubsV1ClubsMembershipOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClubsV1ClubsMembership: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolClubsV1ClubsMembershipPreferences get lol clubs v1 clubs membership preferences API
*/
func (a *Client) GetLolClubsV1ClubsMembershipPreferences(params *GetLolClubsV1ClubsMembershipPreferencesParams) (*GetLolClubsV1ClubsMembershipPreferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolClubsV1ClubsMembershipPreferencesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolClubsV1ClubsMembershipPreferences",
		Method:             "GET",
		PathPattern:        "/lol-clubs/v1/clubs/membership/preferences",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolClubsV1ClubsMembershipPreferencesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolClubsV1ClubsMembershipPreferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolClubsV1ClubsMembershipPreferences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCollectionsV1InventoriesBySummonerIDBackdrop get lol collections v1 inventories by summoner Id backdrop API
*/
func (a *Client) GetLolCollectionsV1InventoriesBySummonerIDBackdrop(params *GetLolCollectionsV1InventoriesBySummonerIDBackdropParams) (*GetLolCollectionsV1InventoriesBySummonerIDBackdropOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCollectionsV1InventoriesBySummonerIDBackdropParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCollectionsV1InventoriesBySummonerIdBackdrop",
		Method:             "GET",
		PathPattern:        "/lol-collections/v1/inventories/{summonerId}/backdrop",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCollectionsV1InventoriesBySummonerIDBackdropReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCollectionsV1InventoriesBySummonerIDBackdropOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCollectionsV1InventoriesBySummonerIdBackdrop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCollectionsV1InventoriesBySummonerIDChampionMastery get lol collections v1 inventories by summoner Id champion mastery API
*/
func (a *Client) GetLolCollectionsV1InventoriesBySummonerIDChampionMastery(params *GetLolCollectionsV1InventoriesBySummonerIDChampionMasteryParams) (*GetLolCollectionsV1InventoriesBySummonerIDChampionMasteryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCollectionsV1InventoriesBySummonerIDChampionMasteryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCollectionsV1InventoriesBySummonerIdChampionMastery",
		Method:             "GET",
		PathPattern:        "/lol-collections/v1/inventories/{summonerId}/champion-mastery",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCollectionsV1InventoriesBySummonerIDChampionMasteryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCollectionsV1InventoriesBySummonerIDChampionMasteryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCollectionsV1InventoriesBySummonerIdChampionMastery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCollectionsV1InventoriesBySummonerIDChampionMasteryTop get lol collections v1 inventories by summoner Id champion mastery top API
*/
func (a *Client) GetLolCollectionsV1InventoriesBySummonerIDChampionMasteryTop(params *GetLolCollectionsV1InventoriesBySummonerIDChampionMasteryTopParams) (*GetLolCollectionsV1InventoriesBySummonerIDChampionMasteryTopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCollectionsV1InventoriesBySummonerIDChampionMasteryTopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCollectionsV1InventoriesBySummonerIdChampionMasteryTop",
		Method:             "GET",
		PathPattern:        "/lol-collections/v1/inventories/{summonerId}/champion-mastery/top",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCollectionsV1InventoriesBySummonerIDChampionMasteryTopReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCollectionsV1InventoriesBySummonerIDChampionMasteryTopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCollectionsV1InventoriesBySummonerIdChampionMasteryTop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCollectionsV1InventoriesBySummonerIDSpells get lol collections v1 inventories by summoner Id spells API
*/
func (a *Client) GetLolCollectionsV1InventoriesBySummonerIDSpells(params *GetLolCollectionsV1InventoriesBySummonerIDSpellsParams) (*GetLolCollectionsV1InventoriesBySummonerIDSpellsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCollectionsV1InventoriesBySummonerIDSpellsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCollectionsV1InventoriesBySummonerIdSpells",
		Method:             "GET",
		PathPattern:        "/lol-collections/v1/inventories/{summonerId}/spells",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCollectionsV1InventoriesBySummonerIDSpellsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCollectionsV1InventoriesBySummonerIDSpellsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCollectionsV1InventoriesBySummonerIdSpells: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCollectionsV1InventoriesBySummonerIDSummonerIcons get lol collections v1 inventories by summoner Id summoner icons API
*/
func (a *Client) GetLolCollectionsV1InventoriesBySummonerIDSummonerIcons(params *GetLolCollectionsV1InventoriesBySummonerIDSummonerIconsParams) (*GetLolCollectionsV1InventoriesBySummonerIDSummonerIconsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCollectionsV1InventoriesBySummonerIDSummonerIconsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCollectionsV1InventoriesBySummonerIdSummonerIcons",
		Method:             "GET",
		PathPattern:        "/lol-collections/v1/inventories/{summonerId}/summoner-icons",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCollectionsV1InventoriesBySummonerIDSummonerIconsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCollectionsV1InventoriesBySummonerIDSummonerIconsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCollectionsV1InventoriesBySummonerIdSummonerIcons: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCollectionsV1InventoriesBySummonerIDWardSkins get lol collections v1 inventories by summoner Id ward skins API
*/
func (a *Client) GetLolCollectionsV1InventoriesBySummonerIDWardSkins(params *GetLolCollectionsV1InventoriesBySummonerIDWardSkinsParams) (*GetLolCollectionsV1InventoriesBySummonerIDWardSkinsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCollectionsV1InventoriesBySummonerIDWardSkinsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCollectionsV1InventoriesBySummonerIdWardSkins",
		Method:             "GET",
		PathPattern:        "/lol-collections/v1/inventories/{summonerId}/ward-skins",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCollectionsV1InventoriesBySummonerIDWardSkinsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCollectionsV1InventoriesBySummonerIDWardSkinsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCollectionsV1InventoriesBySummonerIdWardSkins: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCollectionsV1InventoriesBySummonerIDWardSkinsByWardSkinID get lol collections v1 inventories by summoner Id ward skins by ward skin Id API
*/
func (a *Client) GetLolCollectionsV1InventoriesBySummonerIDWardSkinsByWardSkinID(params *GetLolCollectionsV1InventoriesBySummonerIDWardSkinsByWardSkinIDParams) (*GetLolCollectionsV1InventoriesBySummonerIDWardSkinsByWardSkinIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCollectionsV1InventoriesBySummonerIDWardSkinsByWardSkinIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCollectionsV1InventoriesBySummonerIdWardSkinsByWardSkinId",
		Method:             "GET",
		PathPattern:        "/lol-collections/v1/inventories/{summonerId}/ward-skins/{wardSkinId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCollectionsV1InventoriesBySummonerIDWardSkinsByWardSkinIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCollectionsV1InventoriesBySummonerIDWardSkinsByWardSkinIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCollectionsV1InventoriesBySummonerIdWardSkinsByWardSkinId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCollectionsV1InventoriesChestEligibility get lol collections v1 inventories chest eligibility API
*/
func (a *Client) GetLolCollectionsV1InventoriesChestEligibility(params *GetLolCollectionsV1InventoriesChestEligibilityParams) (*GetLolCollectionsV1InventoriesChestEligibilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCollectionsV1InventoriesChestEligibilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCollectionsV1InventoriesChestEligibility",
		Method:             "GET",
		PathPattern:        "/lol-collections/v1/inventories/chest-eligibility",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCollectionsV1InventoriesChestEligibilityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCollectionsV1InventoriesChestEligibilityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCollectionsV1InventoriesChestEligibility: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCollectionsV2InventoriesBySummonerIDSummonerIcons get lol collections v2 inventories by summoner Id summoner icons API
*/
func (a *Client) GetLolCollectionsV2InventoriesBySummonerIDSummonerIcons(params *GetLolCollectionsV2InventoriesBySummonerIDSummonerIconsParams) (*GetLolCollectionsV2InventoriesBySummonerIDSummonerIconsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCollectionsV2InventoriesBySummonerIDSummonerIconsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCollectionsV2InventoriesBySummonerIdSummonerIcons",
		Method:             "GET",
		PathPattern:        "/lol-collections/v2/inventories/{summonerId}/summoner-icons",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCollectionsV2InventoriesBySummonerIDSummonerIconsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCollectionsV2InventoriesBySummonerIDSummonerIconsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCollectionsV2InventoriesBySummonerIdSummonerIcons: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCollectionsV2InventoriesBySummonerIDSummonerIconsBySummonerIconID get lol collections v2 inventories by summoner Id summoner icons by summoner icon Id API
*/
func (a *Client) GetLolCollectionsV2InventoriesBySummonerIDSummonerIconsBySummonerIconID(params *GetLolCollectionsV2InventoriesBySummonerIDSummonerIconsBySummonerIconIDParams) (*GetLolCollectionsV2InventoriesBySummonerIDSummonerIconsBySummonerIconIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCollectionsV2InventoriesBySummonerIDSummonerIconsBySummonerIconIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCollectionsV2InventoriesBySummonerIdSummonerIconsBySummonerIconId",
		Method:             "GET",
		PathPattern:        "/lol-collections/v2/inventories/{summonerId}/summoner-icons/{summonerIconId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCollectionsV2InventoriesBySummonerIDSummonerIconsBySummonerIconIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCollectionsV2InventoriesBySummonerIDSummonerIconsBySummonerIconIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCollectionsV2InventoriesBySummonerIdSummonerIconsBySummonerIconId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolContentTargetingV1Filters get lol content targeting v1 filters API
*/
func (a *Client) GetLolContentTargetingV1Filters(params *GetLolContentTargetingV1FiltersParams) (*GetLolContentTargetingV1FiltersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolContentTargetingV1FiltersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolContentTargetingV1Filters",
		Method:             "GET",
		PathPattern:        "/lol-content-targeting/v1/filters",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolContentTargetingV1FiltersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolContentTargetingV1FiltersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolContentTargetingV1Filters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolContentTargetingV1Locale get lol content targeting v1 locale API
*/
func (a *Client) GetLolContentTargetingV1Locale(params *GetLolContentTargetingV1LocaleParams) (*GetLolContentTargetingV1LocaleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolContentTargetingV1LocaleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolContentTargetingV1Locale",
		Method:             "GET",
		PathPattern:        "/lol-content-targeting/v1/locale",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolContentTargetingV1LocaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolContentTargetingV1LocaleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolContentTargetingV1Locale: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolContentTargetingV1ProtectedFilters get lol content targeting v1 protected filters API
*/
func (a *Client) GetLolContentTargetingV1ProtectedFilters(params *GetLolContentTargetingV1ProtectedFiltersParams) (*GetLolContentTargetingV1ProtectedFiltersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolContentTargetingV1ProtectedFiltersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolContentTargetingV1ProtectedFilters",
		Method:             "GET",
		PathPattern:        "/lol-content-targeting/v1/protected_filters",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolContentTargetingV1ProtectedFiltersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolContentTargetingV1ProtectedFiltersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolContentTargetingV1ProtectedFilters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCosmeticsV1InventoriesBySetNameCompanions get lol cosmetics v1 inventories by set name companions API
*/
func (a *Client) GetLolCosmeticsV1InventoriesBySetNameCompanions(params *GetLolCosmeticsV1InventoriesBySetNameCompanionsParams) (*GetLolCosmeticsV1InventoriesBySetNameCompanionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCosmeticsV1InventoriesBySetNameCompanionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCosmeticsV1InventoriesBySetNameCompanions",
		Method:             "GET",
		PathPattern:        "/lol-cosmetics/v1/inventories/{setName}/companions",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCosmeticsV1InventoriesBySetNameCompanionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCosmeticsV1InventoriesBySetNameCompanionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCosmeticsV1InventoriesBySetNameCompanions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolCosmeticsV1InventoriesBySetNameMapSkins get lol cosmetics v1 inventories by set name map skins API
*/
func (a *Client) GetLolCosmeticsV1InventoriesBySetNameMapSkins(params *GetLolCosmeticsV1InventoriesBySetNameMapSkinsParams) (*GetLolCosmeticsV1InventoriesBySetNameMapSkinsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolCosmeticsV1InventoriesBySetNameMapSkinsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolCosmeticsV1InventoriesBySetNameMapSkins",
		Method:             "GET",
		PathPattern:        "/lol-cosmetics/v1/inventories/{setName}/map-skins",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolCosmeticsV1InventoriesBySetNameMapSkinsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolCosmeticsV1InventoriesBySetNameMapSkinsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolCosmeticsV1InventoriesBySetNameMapSkins: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolEmailVerificationV1Email get lol email verification v1 email API
*/
func (a *Client) GetLolEmailVerificationV1Email(params *GetLolEmailVerificationV1EmailParams) (*GetLolEmailVerificationV1EmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolEmailVerificationV1EmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolEmailVerificationV1Email",
		Method:             "GET",
		PathPattern:        "/lol-email-verification/v1/email",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolEmailVerificationV1EmailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolEmailVerificationV1EmailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolEmailVerificationV1Email: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolEndOfGameV1ChampionMasteryUpdates get lol end of game v1 champion mastery updates API
*/
func (a *Client) GetLolEndOfGameV1ChampionMasteryUpdates(params *GetLolEndOfGameV1ChampionMasteryUpdatesParams) (*GetLolEndOfGameV1ChampionMasteryUpdatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolEndOfGameV1ChampionMasteryUpdatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolEndOfGameV1ChampionMasteryUpdates",
		Method:             "GET",
		PathPattern:        "/lol-end-of-game/v1/champion-mastery-updates",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolEndOfGameV1ChampionMasteryUpdatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolEndOfGameV1ChampionMasteryUpdatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolEndOfGameV1ChampionMasteryUpdates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolEndOfGameV1EogStatsBlock get lol end of game v1 eog stats block API
*/
func (a *Client) GetLolEndOfGameV1EogStatsBlock(params *GetLolEndOfGameV1EogStatsBlockParams) (*GetLolEndOfGameV1EogStatsBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolEndOfGameV1EogStatsBlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolEndOfGameV1EogStatsBlock",
		Method:             "GET",
		PathPattern:        "/lol-end-of-game/v1/eog-stats-block",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolEndOfGameV1EogStatsBlockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolEndOfGameV1EogStatsBlockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolEndOfGameV1EogStatsBlock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolEndOfGameV1GameclientEogStatsBlock get lol end of game v1 gameclient eog stats block API
*/
func (a *Client) GetLolEndOfGameV1GameclientEogStatsBlock(params *GetLolEndOfGameV1GameclientEogStatsBlockParams) (*GetLolEndOfGameV1GameclientEogStatsBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolEndOfGameV1GameclientEogStatsBlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolEndOfGameV1GameclientEogStatsBlock",
		Method:             "GET",
		PathPattern:        "/lol-end-of-game/v1/gameclient-eog-stats-block",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolEndOfGameV1GameclientEogStatsBlockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolEndOfGameV1GameclientEogStatsBlockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolEndOfGameV1GameclientEogStatsBlock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolEndOfGameV1ReportedPlayers get lol end of game v1 reported players API
*/
func (a *Client) GetLolEndOfGameV1ReportedPlayers(params *GetLolEndOfGameV1ReportedPlayersParams) (*GetLolEndOfGameV1ReportedPlayersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolEndOfGameV1ReportedPlayersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolEndOfGameV1ReportedPlayers",
		Method:             "GET",
		PathPattern:        "/lol-end-of-game/v1/reported-players",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolEndOfGameV1ReportedPlayersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolEndOfGameV1ReportedPlayersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolEndOfGameV1ReportedPlayers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolEndOfGameV1TftEogStats get lol end of game v1 tft eog stats API
*/
func (a *Client) GetLolEndOfGameV1TftEogStats(params *GetLolEndOfGameV1TftEogStatsParams) (*GetLolEndOfGameV1TftEogStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolEndOfGameV1TftEogStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolEndOfGameV1TftEogStats",
		Method:             "GET",
		PathPattern:        "/lol-end-of-game/v1/tft-eog-stats",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolEndOfGameV1TftEogStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolEndOfGameV1TftEogStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolEndOfGameV1TftEogStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolEsportStreamNotificationsV1LiveStreams get lol esport stream notifications v1 live streams API
*/
func (a *Client) GetLolEsportStreamNotificationsV1LiveStreams(params *GetLolEsportStreamNotificationsV1LiveStreamsParams) (*GetLolEsportStreamNotificationsV1LiveStreamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolEsportStreamNotificationsV1LiveStreamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolEsportStreamNotificationsV1LiveStreams",
		Method:             "GET",
		PathPattern:        "/lol-esport-stream-notifications/v1/live-streams",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolEsportStreamNotificationsV1LiveStreamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolEsportStreamNotificationsV1LiveStreamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolEsportStreamNotificationsV1LiveStreams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolEsportStreamNotificationsV1StreamURL get lol esport stream notifications v1 stream Url API
*/
func (a *Client) GetLolEsportStreamNotificationsV1StreamURL(params *GetLolEsportStreamNotificationsV1StreamURLParams) (*GetLolEsportStreamNotificationsV1StreamURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolEsportStreamNotificationsV1StreamURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolEsportStreamNotificationsV1StreamUrl",
		Method:             "GET",
		PathPattern:        "/lol-esport-stream-notifications/v1/stream-url",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolEsportStreamNotificationsV1StreamURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolEsportStreamNotificationsV1StreamURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolEsportStreamNotificationsV1StreamUrl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameClientChatV1Buddies get lol game client chat v1 buddies API
*/
func (a *Client) GetLolGameClientChatV1Buddies(params *GetLolGameClientChatV1BuddiesParams) (*GetLolGameClientChatV1BuddiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameClientChatV1BuddiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameClientChatV1Buddies",
		Method:             "GET",
		PathPattern:        "/lol-game-client-chat/v1/buddies",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameClientChatV1BuddiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameClientChatV1BuddiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameClientChatV1Buddies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameClientChatV1IgnoredSummoners get lol game client chat v1 ignored summoners API
*/
func (a *Client) GetLolGameClientChatV1IgnoredSummoners(params *GetLolGameClientChatV1IgnoredSummonersParams) (*GetLolGameClientChatV1IgnoredSummonersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameClientChatV1IgnoredSummonersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameClientChatV1IgnoredSummoners",
		Method:             "GET",
		PathPattern:        "/lol-game-client-chat/v1/ignored-summoners",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameClientChatV1IgnoredSummonersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameClientChatV1IgnoredSummonersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameClientChatV1IgnoredSummoners: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameQueuesV1Custom get lol game queues v1 custom API
*/
func (a *Client) GetLolGameQueuesV1Custom(params *GetLolGameQueuesV1CustomParams) (*GetLolGameQueuesV1CustomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameQueuesV1CustomParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameQueuesV1Custom",
		Method:             "GET",
		PathPattern:        "/lol-game-queues/v1/custom",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameQueuesV1CustomReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameQueuesV1CustomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameQueuesV1Custom: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameQueuesV1CustomNonDefault get lol game queues v1 custom non default API
*/
func (a *Client) GetLolGameQueuesV1CustomNonDefault(params *GetLolGameQueuesV1CustomNonDefaultParams) (*GetLolGameQueuesV1CustomNonDefaultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameQueuesV1CustomNonDefaultParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameQueuesV1CustomNonDefault",
		Method:             "GET",
		PathPattern:        "/lol-game-queues/v1/custom-non-default",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameQueuesV1CustomNonDefaultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameQueuesV1CustomNonDefaultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameQueuesV1CustomNonDefault: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameQueuesV1GameTypeConfigByGameTypeConfigID get lol game queues v1 game type config by game type config Id API
*/
func (a *Client) GetLolGameQueuesV1GameTypeConfigByGameTypeConfigID(params *GetLolGameQueuesV1GameTypeConfigByGameTypeConfigIDParams) (*GetLolGameQueuesV1GameTypeConfigByGameTypeConfigIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameQueuesV1GameTypeConfigByGameTypeConfigIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameQueuesV1GameTypeConfigByGameTypeConfigId",
		Method:             "GET",
		PathPattern:        "/lol-game-queues/v1/game-type-config/{gameTypeConfigId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameQueuesV1GameTypeConfigByGameTypeConfigIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameQueuesV1GameTypeConfigByGameTypeConfigIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameQueuesV1GameTypeConfigByGameTypeConfigId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameQueuesV1GameTypeConfigByGameTypeConfigIDMapByMapID get lol game queues v1 game type config by game type config Id map by map Id API
*/
func (a *Client) GetLolGameQueuesV1GameTypeConfigByGameTypeConfigIDMapByMapID(params *GetLolGameQueuesV1GameTypeConfigByGameTypeConfigIDMapByMapIDParams) (*GetLolGameQueuesV1GameTypeConfigByGameTypeConfigIDMapByMapIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameQueuesV1GameTypeConfigByGameTypeConfigIDMapByMapIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameQueuesV1GameTypeConfigByGameTypeConfigIdMapByMapId",
		Method:             "GET",
		PathPattern:        "/lol-game-queues/v1/game-type-config/{gameTypeConfigId}/map/{mapId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameQueuesV1GameTypeConfigByGameTypeConfigIDMapByMapIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameQueuesV1GameTypeConfigByGameTypeConfigIDMapByMapIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameQueuesV1GameTypeConfigByGameTypeConfigIdMapByMapId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameQueuesV1Queues get lol game queues v1 queues API
*/
func (a *Client) GetLolGameQueuesV1Queues(params *GetLolGameQueuesV1QueuesParams) (*GetLolGameQueuesV1QueuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameQueuesV1QueuesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameQueuesV1Queues",
		Method:             "GET",
		PathPattern:        "/lol-game-queues/v1/queues",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameQueuesV1QueuesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameQueuesV1QueuesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameQueuesV1Queues: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameQueuesV1QueuesByID get lol game queues v1 queues by Id API
*/
func (a *Client) GetLolGameQueuesV1QueuesByID(params *GetLolGameQueuesV1QueuesByIDParams) (*GetLolGameQueuesV1QueuesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameQueuesV1QueuesByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameQueuesV1QueuesById",
		Method:             "GET",
		PathPattern:        "/lol-game-queues/v1/queues/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameQueuesV1QueuesByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameQueuesV1QueuesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameQueuesV1QueuesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameQueuesV1QueuesTypeByQueueType get lol game queues v1 queues type by queue type API
*/
func (a *Client) GetLolGameQueuesV1QueuesTypeByQueueType(params *GetLolGameQueuesV1QueuesTypeByQueueTypeParams) (*GetLolGameQueuesV1QueuesTypeByQueueTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameQueuesV1QueuesTypeByQueueTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameQueuesV1QueuesTypeByQueueType",
		Method:             "GET",
		PathPattern:        "/lol-game-queues/v1/queues/type/{queueType}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameQueuesV1QueuesTypeByQueueTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameQueuesV1QueuesTypeByQueueTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameQueuesV1QueuesTypeByQueueType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameSettingsV1Didreset get lol game settings v1 didreset API
*/
func (a *Client) GetLolGameSettingsV1Didreset(params *GetLolGameSettingsV1DidresetParams) (*GetLolGameSettingsV1DidresetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameSettingsV1DidresetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameSettingsV1Didreset",
		Method:             "GET",
		PathPattern:        "/lol-game-settings/v1/didreset",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameSettingsV1DidresetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameSettingsV1DidresetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameSettingsV1Didreset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameSettingsV1GameSettings get lol game settings v1 game settings API
*/
func (a *Client) GetLolGameSettingsV1GameSettings(params *GetLolGameSettingsV1GameSettingsParams) (*GetLolGameSettingsV1GameSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameSettingsV1GameSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameSettingsV1GameSettings",
		Method:             "GET",
		PathPattern:        "/lol-game-settings/v1/game-settings",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameSettingsV1GameSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameSettingsV1GameSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameSettingsV1GameSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameSettingsV1GameSettingsSchema get lol game settings v1 game settings schema API
*/
func (a *Client) GetLolGameSettingsV1GameSettingsSchema(params *GetLolGameSettingsV1GameSettingsSchemaParams) (*GetLolGameSettingsV1GameSettingsSchemaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameSettingsV1GameSettingsSchemaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameSettingsV1GameSettingsSchema",
		Method:             "GET",
		PathPattern:        "/lol-game-settings/v1/game-settings-schema",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameSettingsV1GameSettingsSchemaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameSettingsV1GameSettingsSchemaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameSettingsV1GameSettingsSchema: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameSettingsV1InputSettings get lol game settings v1 input settings API
*/
func (a *Client) GetLolGameSettingsV1InputSettings(params *GetLolGameSettingsV1InputSettingsParams) (*GetLolGameSettingsV1InputSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameSettingsV1InputSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameSettingsV1InputSettings",
		Method:             "GET",
		PathPattern:        "/lol-game-settings/v1/input-settings",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameSettingsV1InputSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameSettingsV1InputSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameSettingsV1InputSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameSettingsV1InputSettingsSchema get lol game settings v1 input settings schema API
*/
func (a *Client) GetLolGameSettingsV1InputSettingsSchema(params *GetLolGameSettingsV1InputSettingsSchemaParams) (*GetLolGameSettingsV1InputSettingsSchemaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameSettingsV1InputSettingsSchemaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameSettingsV1InputSettingsSchema",
		Method:             "GET",
		PathPattern:        "/lol-game-settings/v1/input-settings-schema",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameSettingsV1InputSettingsSchemaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameSettingsV1InputSettingsSchemaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameSettingsV1InputSettingsSchema: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameSettingsV1Ready get lol game settings v1 ready API
*/
func (a *Client) GetLolGameSettingsV1Ready(params *GetLolGameSettingsV1ReadyParams) (*GetLolGameSettingsV1ReadyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameSettingsV1ReadyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameSettingsV1Ready",
		Method:             "GET",
		PathPattern:        "/lol-game-settings/v1/ready",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameSettingsV1ReadyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameSettingsV1ReadyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameSettingsV1Ready: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameflowV1ActivePatcherLock get lol gameflow v1 active patcher lock API
*/
func (a *Client) GetLolGameflowV1ActivePatcherLock(params *GetLolGameflowV1ActivePatcherLockParams) (*GetLolGameflowV1ActivePatcherLockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameflowV1ActivePatcherLockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameflowV1ActivePatcherLock",
		Method:             "GET",
		PathPattern:        "/lol-gameflow/v1/active-patcher-lock",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameflowV1ActivePatcherLockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameflowV1ActivePatcherLockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameflowV1ActivePatcherLock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameflowV1Availability get lol gameflow v1 availability API
*/
func (a *Client) GetLolGameflowV1Availability(params *GetLolGameflowV1AvailabilityParams) (*GetLolGameflowV1AvailabilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameflowV1AvailabilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameflowV1Availability",
		Method:             "GET",
		PathPattern:        "/lol-gameflow/v1/availability",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameflowV1AvailabilityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameflowV1AvailabilityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameflowV1Availability: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameflowV1BasicTutorial get lol gameflow v1 basic tutorial API
*/
func (a *Client) GetLolGameflowV1BasicTutorial(params *GetLolGameflowV1BasicTutorialParams) (*GetLolGameflowV1BasicTutorialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameflowV1BasicTutorialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameflowV1BasicTutorial",
		Method:             "GET",
		PathPattern:        "/lol-gameflow/v1/basic-tutorial",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameflowV1BasicTutorialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameflowV1BasicTutorialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameflowV1BasicTutorial: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameflowV1BattleTraining get lol gameflow v1 battle training API
*/
func (a *Client) GetLolGameflowV1BattleTraining(params *GetLolGameflowV1BattleTrainingParams) (*GetLolGameflowV1BattleTrainingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameflowV1BattleTrainingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameflowV1BattleTraining",
		Method:             "GET",
		PathPattern:        "/lol-gameflow/v1/battle-training",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameflowV1BattleTrainingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameflowV1BattleTrainingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameflowV1BattleTraining: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameflowV1EarlyExitNotificationsEog get lol gameflow v1 early exit notifications eog API
*/
func (a *Client) GetLolGameflowV1EarlyExitNotificationsEog(params *GetLolGameflowV1EarlyExitNotificationsEogParams) (*GetLolGameflowV1EarlyExitNotificationsEogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameflowV1EarlyExitNotificationsEogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameflowV1EarlyExitNotificationsEog",
		Method:             "GET",
		PathPattern:        "/lol-gameflow/v1/early-exit-notifications/eog",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameflowV1EarlyExitNotificationsEogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameflowV1EarlyExitNotificationsEogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameflowV1EarlyExitNotificationsEog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameflowV1EarlyExitNotificationsMissions get lol gameflow v1 early exit notifications missions API
*/
func (a *Client) GetLolGameflowV1EarlyExitNotificationsMissions(params *GetLolGameflowV1EarlyExitNotificationsMissionsParams) (*GetLolGameflowV1EarlyExitNotificationsMissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameflowV1EarlyExitNotificationsMissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameflowV1EarlyExitNotificationsMissions",
		Method:             "GET",
		PathPattern:        "/lol-gameflow/v1/early-exit-notifications/missions",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameflowV1EarlyExitNotificationsMissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameflowV1EarlyExitNotificationsMissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameflowV1EarlyExitNotificationsMissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameflowV1ExtraGameClientArgs get lol gameflow v1 extra game client args API
*/
func (a *Client) GetLolGameflowV1ExtraGameClientArgs(params *GetLolGameflowV1ExtraGameClientArgsParams) (*GetLolGameflowV1ExtraGameClientArgsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameflowV1ExtraGameClientArgsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameflowV1ExtraGameClientArgs",
		Method:             "GET",
		PathPattern:        "/lol-gameflow/v1/extra-game-client-args",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameflowV1ExtraGameClientArgsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameflowV1ExtraGameClientArgsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameflowV1ExtraGameClientArgs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameflowV1GameflowMetadataPlayerStatus get lol gameflow v1 gameflow metadata player status API
*/
func (a *Client) GetLolGameflowV1GameflowMetadataPlayerStatus(params *GetLolGameflowV1GameflowMetadataPlayerStatusParams) (*GetLolGameflowV1GameflowMetadataPlayerStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameflowV1GameflowMetadataPlayerStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameflowV1GameflowMetadataPlayerStatus",
		Method:             "GET",
		PathPattern:        "/lol-gameflow/v1/gameflow-metadata/player-status",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameflowV1GameflowMetadataPlayerStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameflowV1GameflowMetadataPlayerStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameflowV1GameflowMetadataPlayerStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameflowV1GameflowMetadataRegistrationStatus get lol gameflow v1 gameflow metadata registration status API
*/
func (a *Client) GetLolGameflowV1GameflowMetadataRegistrationStatus(params *GetLolGameflowV1GameflowMetadataRegistrationStatusParams) (*GetLolGameflowV1GameflowMetadataRegistrationStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameflowV1GameflowMetadataRegistrationStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameflowV1GameflowMetadataRegistrationStatus",
		Method:             "GET",
		PathPattern:        "/lol-gameflow/v1/gameflow-metadata/registration-status",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameflowV1GameflowMetadataRegistrationStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameflowV1GameflowMetadataRegistrationStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameflowV1GameflowMetadataRegistrationStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameflowV1GameflowPhase get lol gameflow v1 gameflow phase API
*/
func (a *Client) GetLolGameflowV1GameflowPhase(params *GetLolGameflowV1GameflowPhaseParams) (*GetLolGameflowV1GameflowPhaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameflowV1GameflowPhaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameflowV1GameflowPhase",
		Method:             "GET",
		PathPattern:        "/lol-gameflow/v1/gameflow-phase",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameflowV1GameflowPhaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameflowV1GameflowPhaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameflowV1GameflowPhase: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameflowV1Session get lol gameflow v1 session API
*/
func (a *Client) GetLolGameflowV1Session(params *GetLolGameflowV1SessionParams) (*GetLolGameflowV1SessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameflowV1SessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameflowV1Session",
		Method:             "GET",
		PathPattern:        "/lol-gameflow/v1/session",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameflowV1SessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameflowV1SessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameflowV1Session: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameflowV1Spectate get lol gameflow v1 spectate API
*/
func (a *Client) GetLolGameflowV1Spectate(params *GetLolGameflowV1SpectateParams) (*GetLolGameflowV1SpectateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameflowV1SpectateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameflowV1Spectate",
		Method:             "GET",
		PathPattern:        "/lol-gameflow/v1/spectate",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameflowV1SpectateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameflowV1SpectateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameflowV1Spectate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameflowV1SpectateDelayedLaunch get lol gameflow v1 spectate delayed launch API
*/
func (a *Client) GetLolGameflowV1SpectateDelayedLaunch(params *GetLolGameflowV1SpectateDelayedLaunchParams) (*GetLolGameflowV1SpectateDelayedLaunchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameflowV1SpectateDelayedLaunchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameflowV1SpectateDelayedLaunch",
		Method:             "GET",
		PathPattern:        "/lol-gameflow/v1/spectate/delayed-launch",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameflowV1SpectateDelayedLaunchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameflowV1SpectateDelayedLaunchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameflowV1SpectateDelayedLaunch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGameflowV1Watch get lol gameflow v1 watch API
*/
func (a *Client) GetLolGameflowV1Watch(params *GetLolGameflowV1WatchParams) (*GetLolGameflowV1WatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGameflowV1WatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGameflowV1Watch",
		Method:             "GET",
		PathPattern:        "/lol-gameflow/v1/watch",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGameflowV1WatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGameflowV1WatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGameflowV1Watch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGamhsV1ProductsByProductIDByPuuidMatches get lol gamhs v1 products by product Id by puuid matches API
*/
func (a *Client) GetLolGamhsV1ProductsByProductIDByPuuidMatches(params *GetLolGamhsV1ProductsByProductIDByPuuidMatchesParams) (*GetLolGamhsV1ProductsByProductIDByPuuidMatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGamhsV1ProductsByProductIDByPuuidMatchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGamhsV1ProductsByProductIdByPuuidMatches",
		Method:             "GET",
		PathPattern:        "/lol-gamhs/v1/products/{productId}/{puuid}/matches",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGamhsV1ProductsByProductIDByPuuidMatchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGamhsV1ProductsByProductIDByPuuidMatchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGamhsV1ProductsByProductIdByPuuidMatches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGamhsV1ProductsByProductIDCurrentSummonerMatches get lol gamhs v1 products by product Id current summoner matches API
*/
func (a *Client) GetLolGamhsV1ProductsByProductIDCurrentSummonerMatches(params *GetLolGamhsV1ProductsByProductIDCurrentSummonerMatchesParams) (*GetLolGamhsV1ProductsByProductIDCurrentSummonerMatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGamhsV1ProductsByProductIDCurrentSummonerMatchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGamhsV1ProductsByProductIdCurrentSummonerMatches",
		Method:             "GET",
		PathPattern:        "/lol-gamhs/v1/products/{productId}/current-summoner/matches",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGamhsV1ProductsByProductIDCurrentSummonerMatchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGamhsV1ProductsByProductIDCurrentSummonerMatchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGamhsV1ProductsByProductIdCurrentSummonerMatches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGamhsV1ProductsByProductIDMatchesByMatchIDDetails get lol gamhs v1 products by product Id matches by match Id details API
*/
func (a *Client) GetLolGamhsV1ProductsByProductIDMatchesByMatchIDDetails(params *GetLolGamhsV1ProductsByProductIDMatchesByMatchIDDetailsParams) (*GetLolGamhsV1ProductsByProductIDMatchesByMatchIDDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGamhsV1ProductsByProductIDMatchesByMatchIDDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGamhsV1ProductsByProductIdMatchesByMatchIdDetails",
		Method:             "GET",
		PathPattern:        "/lol-gamhs/v1/products/{productId}/matches/{matchId}/details",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGamhsV1ProductsByProductIDMatchesByMatchIDDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGamhsV1ProductsByProductIDMatchesByMatchIDDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGamhsV1ProductsByProductIdMatchesByMatchIdDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGamhsV1ProductsByProductIDMatchesByMatchIDSummary get lol gamhs v1 products by product Id matches by match Id summary API
*/
func (a *Client) GetLolGamhsV1ProductsByProductIDMatchesByMatchIDSummary(params *GetLolGamhsV1ProductsByProductIDMatchesByMatchIDSummaryParams) (*GetLolGamhsV1ProductsByProductIDMatchesByMatchIDSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGamhsV1ProductsByProductIDMatchesByMatchIDSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGamhsV1ProductsByProductIdMatchesByMatchIdSummary",
		Method:             "GET",
		PathPattern:        "/lol-gamhs/v1/products/{productId}/matches/{matchId}/summary",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGamhsV1ProductsByProductIDMatchesByMatchIDSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGamhsV1ProductsByProductIDMatchesByMatchIDSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGamhsV1ProductsByProductIdMatchesByMatchIdSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGeoinfoV1Getlocation get lol geoinfo v1 getlocation API
*/
func (a *Client) GetLolGeoinfoV1Getlocation(params *GetLolGeoinfoV1GetlocationParams) (*GetLolGeoinfoV1GetlocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGeoinfoV1GetlocationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGeoinfoV1Getlocation",
		Method:             "GET",
		PathPattern:        "/lol-geoinfo/v1/getlocation",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGeoinfoV1GetlocationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGeoinfoV1GetlocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGeoinfoV1Getlocation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolGeoinfoV1Whereami get lol geoinfo v1 whereami API
*/
func (a *Client) GetLolGeoinfoV1Whereami(params *GetLolGeoinfoV1WhereamiParams) (*GetLolGeoinfoV1WhereamiOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolGeoinfoV1WhereamiParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolGeoinfoV1Whereami",
		Method:             "GET",
		PathPattern:        "/lol-geoinfo/v1/whereami",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolGeoinfoV1WhereamiReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolGeoinfoV1WhereamiOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolGeoinfoV1Whereami: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolHighlightsV1Config get lol highlights v1 config API
*/
func (a *Client) GetLolHighlightsV1Config(params *GetLolHighlightsV1ConfigParams) (*GetLolHighlightsV1ConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolHighlightsV1ConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolHighlightsV1Config",
		Method:             "GET",
		PathPattern:        "/lol-highlights/v1/config",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolHighlightsV1ConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolHighlightsV1ConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolHighlightsV1Config: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolHighlightsV1Highlights get lol highlights v1 highlights API
*/
func (a *Client) GetLolHighlightsV1Highlights(params *GetLolHighlightsV1HighlightsParams) (*GetLolHighlightsV1HighlightsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolHighlightsV1HighlightsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolHighlightsV1Highlights",
		Method:             "GET",
		PathPattern:        "/lol-highlights/v1/highlights",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolHighlightsV1HighlightsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolHighlightsV1HighlightsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolHighlightsV1Highlights: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolHighlightsV1HighlightsByID get lol highlights v1 highlights by Id API
*/
func (a *Client) GetLolHighlightsV1HighlightsByID(params *GetLolHighlightsV1HighlightsByIDParams) (*GetLolHighlightsV1HighlightsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolHighlightsV1HighlightsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolHighlightsV1HighlightsById",
		Method:             "GET",
		PathPattern:        "/lol-highlights/v1/highlights/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolHighlightsV1HighlightsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolHighlightsV1HighlightsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolHighlightsV1HighlightsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolHighlightsV1HighlightsFolderPath get lol highlights v1 highlights folder path API
*/
func (a *Client) GetLolHighlightsV1HighlightsFolderPath(params *GetLolHighlightsV1HighlightsFolderPathParams) (*GetLolHighlightsV1HighlightsFolderPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolHighlightsV1HighlightsFolderPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolHighlightsV1HighlightsFolderPath",
		Method:             "GET",
		PathPattern:        "/lol-highlights/v1/highlights-folder-path",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolHighlightsV1HighlightsFolderPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolHighlightsV1HighlightsFolderPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolHighlightsV1HighlightsFolderPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolHighlightsV1HighlightsFolderPathDefault get lol highlights v1 highlights folder path default API
*/
func (a *Client) GetLolHighlightsV1HighlightsFolderPathDefault(params *GetLolHighlightsV1HighlightsFolderPathDefaultParams) (*GetLolHighlightsV1HighlightsFolderPathDefaultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolHighlightsV1HighlightsFolderPathDefaultParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolHighlightsV1HighlightsFolderPathDefault",
		Method:             "GET",
		PathPattern:        "/lol-highlights/v1/highlights-folder-path/default",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolHighlightsV1HighlightsFolderPathDefaultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolHighlightsV1HighlightsFolderPathDefaultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolHighlightsV1HighlightsFolderPathDefault: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolHonorV2V1Ballot get lol honor v2 v1 ballot API
*/
func (a *Client) GetLolHonorV2V1Ballot(params *GetLolHonorV2V1BallotParams) (*GetLolHonorV2V1BallotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolHonorV2V1BallotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolHonorV2V1Ballot",
		Method:             "GET",
		PathPattern:        "/lol-honor-v2/v1/ballot",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolHonorV2V1BallotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolHonorV2V1BallotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolHonorV2V1Ballot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolHonorV2V1Config get lol honor v2 v1 config API
*/
func (a *Client) GetLolHonorV2V1Config(params *GetLolHonorV2V1ConfigParams) (*GetLolHonorV2V1ConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolHonorV2V1ConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolHonorV2V1Config",
		Method:             "GET",
		PathPattern:        "/lol-honor-v2/v1/config",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolHonorV2V1ConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolHonorV2V1ConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolHonorV2V1Config: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolHonorV2V1LateRecognition get lol honor v2 v1 late recognition API
*/
func (a *Client) GetLolHonorV2V1LateRecognition(params *GetLolHonorV2V1LateRecognitionParams) (*GetLolHonorV2V1LateRecognitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolHonorV2V1LateRecognitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolHonorV2V1LateRecognition",
		Method:             "GET",
		PathPattern:        "/lol-honor-v2/v1/late-recognition",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolHonorV2V1LateRecognitionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolHonorV2V1LateRecognitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolHonorV2V1LateRecognition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolHonorV2V1LatestEligibleGame get lol honor v2 v1 latest eligible game API
*/
func (a *Client) GetLolHonorV2V1LatestEligibleGame(params *GetLolHonorV2V1LatestEligibleGameParams) (*GetLolHonorV2V1LatestEligibleGameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolHonorV2V1LatestEligibleGameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolHonorV2V1LatestEligibleGame",
		Method:             "GET",
		PathPattern:        "/lol-honor-v2/v1/latest-eligible-game",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolHonorV2V1LatestEligibleGameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolHonorV2V1LatestEligibleGameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolHonorV2V1LatestEligibleGame: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolHonorV2V1LevelChange get lol honor v2 v1 level change API
*/
func (a *Client) GetLolHonorV2V1LevelChange(params *GetLolHonorV2V1LevelChangeParams) (*GetLolHonorV2V1LevelChangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolHonorV2V1LevelChangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolHonorV2V1LevelChange",
		Method:             "GET",
		PathPattern:        "/lol-honor-v2/v1/level-change",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolHonorV2V1LevelChangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolHonorV2V1LevelChangeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolHonorV2V1LevelChange: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolHonorV2V1MutualHonor get lol honor v2 v1 mutual honor API
*/
func (a *Client) GetLolHonorV2V1MutualHonor(params *GetLolHonorV2V1MutualHonorParams) (*GetLolHonorV2V1MutualHonorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolHonorV2V1MutualHonorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolHonorV2V1MutualHonor",
		Method:             "GET",
		PathPattern:        "/lol-honor-v2/v1/mutual-honor",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolHonorV2V1MutualHonorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolHonorV2V1MutualHonorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolHonorV2V1MutualHonor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolHonorV2V1Profile get lol honor v2 v1 profile API
*/
func (a *Client) GetLolHonorV2V1Profile(params *GetLolHonorV2V1ProfileParams) (*GetLolHonorV2V1ProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolHonorV2V1ProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolHonorV2V1Profile",
		Method:             "GET",
		PathPattern:        "/lol-honor-v2/v1/profile",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolHonorV2V1ProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolHonorV2V1ProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolHonorV2V1Profile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolHonorV2V1Recognition get lol honor v2 v1 recognition API
*/
func (a *Client) GetLolHonorV2V1Recognition(params *GetLolHonorV2V1RecognitionParams) (*GetLolHonorV2V1RecognitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolHonorV2V1RecognitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolHonorV2V1Recognition",
		Method:             "GET",
		PathPattern:        "/lol-honor-v2/v1/recognition",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolHonorV2V1RecognitionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolHonorV2V1RecognitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolHonorV2V1Recognition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolHonorV2V1RewardGranted get lol honor v2 v1 reward granted API
*/
func (a *Client) GetLolHonorV2V1RewardGranted(params *GetLolHonorV2V1RewardGrantedParams) (*GetLolHonorV2V1RewardGrantedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolHonorV2V1RewardGrantedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolHonorV2V1RewardGranted",
		Method:             "GET",
		PathPattern:        "/lol-honor-v2/v1/reward-granted",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolHonorV2V1RewardGrantedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolHonorV2V1RewardGrantedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolHonorV2V1RewardGranted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolHonorV2V1TeamChoices get lol honor v2 v1 team choices API
*/
func (a *Client) GetLolHonorV2V1TeamChoices(params *GetLolHonorV2V1TeamChoicesParams) (*GetLolHonorV2V1TeamChoicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolHonorV2V1TeamChoicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolHonorV2V1TeamChoices",
		Method:             "GET",
		PathPattern:        "/lol-honor-v2/v1/team-choices",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolHonorV2V1TeamChoicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolHonorV2V1TeamChoicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolHonorV2V1TeamChoices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolHonorV2V1VoteCompletion get lol honor v2 v1 vote completion API
*/
func (a *Client) GetLolHonorV2V1VoteCompletion(params *GetLolHonorV2V1VoteCompletionParams) (*GetLolHonorV2V1VoteCompletionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolHonorV2V1VoteCompletionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolHonorV2V1VoteCompletion",
		Method:             "GET",
		PathPattern:        "/lol-honor-v2/v1/vote-completion",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolHonorV2V1VoteCompletionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolHonorV2V1VoteCompletionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolHonorV2V1VoteCompletion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolInventoryV1ChampSelectInventory get lol inventory v1 champ select inventory API
*/
func (a *Client) GetLolInventoryV1ChampSelectInventory(params *GetLolInventoryV1ChampSelectInventoryParams) (*GetLolInventoryV1ChampSelectInventoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolInventoryV1ChampSelectInventoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolInventoryV1ChampSelectInventory",
		Method:             "GET",
		PathPattern:        "/lol-inventory/v1/champSelectInventory",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolInventoryV1ChampSelectInventoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolInventoryV1ChampSelectInventoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolInventoryV1ChampSelectInventory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolInventoryV1InitialConfigurationComplete get lol inventory v1 initial configuration complete API
*/
func (a *Client) GetLolInventoryV1InitialConfigurationComplete(params *GetLolInventoryV1InitialConfigurationCompleteParams) (*GetLolInventoryV1InitialConfigurationCompleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolInventoryV1InitialConfigurationCompleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolInventoryV1InitialConfigurationComplete",
		Method:             "GET",
		PathPattern:        "/lol-inventory/v1/initial-configuration-complete",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolInventoryV1InitialConfigurationCompleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolInventoryV1InitialConfigurationCompleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolInventoryV1InitialConfigurationComplete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolInventoryV1Inventory get lol inventory v1 inventory API
*/
func (a *Client) GetLolInventoryV1Inventory(params *GetLolInventoryV1InventoryParams) (*GetLolInventoryV1InventoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolInventoryV1InventoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolInventoryV1Inventory",
		Method:             "GET",
		PathPattern:        "/lol-inventory/v1/inventory",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolInventoryV1InventoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolInventoryV1InventoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolInventoryV1Inventory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolInventoryV1InventoryEmotes get lol inventory v1 inventory emotes API
*/
func (a *Client) GetLolInventoryV1InventoryEmotes(params *GetLolInventoryV1InventoryEmotesParams) (*GetLolInventoryV1InventoryEmotesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolInventoryV1InventoryEmotesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolInventoryV1InventoryEmotes",
		Method:             "GET",
		PathPattern:        "/lol-inventory/v1/inventory/emotes",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolInventoryV1InventoryEmotesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolInventoryV1InventoryEmotesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolInventoryV1InventoryEmotes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolInventoryV1NotificationsByInventoryType get lol inventory v1 notifications by inventory type API
*/
func (a *Client) GetLolInventoryV1NotificationsByInventoryType(params *GetLolInventoryV1NotificationsByInventoryTypeParams) (*GetLolInventoryV1NotificationsByInventoryTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolInventoryV1NotificationsByInventoryTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolInventoryV1NotificationsByInventoryType",
		Method:             "GET",
		PathPattern:        "/lol-inventory/v1/notifications/{inventoryType}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolInventoryV1NotificationsByInventoryTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolInventoryV1NotificationsByInventoryTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolInventoryV1NotificationsByInventoryType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolInventoryV1PlayersByPuuidInventory get lol inventory v1 players by puuid inventory API
*/
func (a *Client) GetLolInventoryV1PlayersByPuuidInventory(params *GetLolInventoryV1PlayersByPuuidInventoryParams) (*GetLolInventoryV1PlayersByPuuidInventoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolInventoryV1PlayersByPuuidInventoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolInventoryV1PlayersByPuuidInventory",
		Method:             "GET",
		PathPattern:        "/lol-inventory/v1/players/{puuid}/inventory",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolInventoryV1PlayersByPuuidInventoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolInventoryV1PlayersByPuuidInventoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolInventoryV1PlayersByPuuidInventory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolInventoryV1SignedInventory get lol inventory v1 signed inventory API
*/
func (a *Client) GetLolInventoryV1SignedInventory(params *GetLolInventoryV1SignedInventoryParams) (*GetLolInventoryV1SignedInventoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolInventoryV1SignedInventoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolInventoryV1SignedInventory",
		Method:             "GET",
		PathPattern:        "/lol-inventory/v1/signedInventory",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolInventoryV1SignedInventoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolInventoryV1SignedInventoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolInventoryV1SignedInventory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolInventoryV1SignedInventoryCache get lol inventory v1 signed inventory cache API
*/
func (a *Client) GetLolInventoryV1SignedInventoryCache(params *GetLolInventoryV1SignedInventoryCacheParams) (*GetLolInventoryV1SignedInventoryCacheOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolInventoryV1SignedInventoryCacheParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolInventoryV1SignedInventoryCache",
		Method:             "GET",
		PathPattern:        "/lol-inventory/v1/signedInventoryCache",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolInventoryV1SignedInventoryCacheReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolInventoryV1SignedInventoryCacheOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolInventoryV1SignedInventoryCache: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolInventoryV1SignedInventorySimple get lol inventory v1 signed inventory simple API
*/
func (a *Client) GetLolInventoryV1SignedInventorySimple(params *GetLolInventoryV1SignedInventorySimpleParams) (*GetLolInventoryV1SignedInventorySimpleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolInventoryV1SignedInventorySimpleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolInventoryV1SignedInventorySimple",
		Method:             "GET",
		PathPattern:        "/lol-inventory/v1/signedInventory/simple",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolInventoryV1SignedInventorySimpleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolInventoryV1SignedInventorySimpleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolInventoryV1SignedInventorySimple: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolInventoryV1SignedInventoryTournamentlogos get lol inventory v1 signed inventory tournamentlogos API
*/
func (a *Client) GetLolInventoryV1SignedInventoryTournamentlogos(params *GetLolInventoryV1SignedInventoryTournamentlogosParams) (*GetLolInventoryV1SignedInventoryTournamentlogosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolInventoryV1SignedInventoryTournamentlogosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolInventoryV1SignedInventoryTournamentlogos",
		Method:             "GET",
		PathPattern:        "/lol-inventory/v1/signedInventory/tournamentlogos",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolInventoryV1SignedInventoryTournamentlogosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolInventoryV1SignedInventoryTournamentlogosOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolInventoryV1SignedInventoryTournamentlogos: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolInventoryV1SignedWallet get lol inventory v1 signed wallet API
*/
func (a *Client) GetLolInventoryV1SignedWallet(params *GetLolInventoryV1SignedWalletParams) (*GetLolInventoryV1SignedWalletOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolInventoryV1SignedWalletParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolInventoryV1SignedWallet",
		Method:             "GET",
		PathPattern:        "/lol-inventory/v1/signedWallet",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolInventoryV1SignedWalletReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolInventoryV1SignedWalletOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolInventoryV1SignedWallet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolInventoryV1SignedWalletByCurrencyType get lol inventory v1 signed wallet by currency type API
*/
func (a *Client) GetLolInventoryV1SignedWalletByCurrencyType(params *GetLolInventoryV1SignedWalletByCurrencyTypeParams) (*GetLolInventoryV1SignedWalletByCurrencyTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolInventoryV1SignedWalletByCurrencyTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolInventoryV1SignedWalletByCurrencyType",
		Method:             "GET",
		PathPattern:        "/lol-inventory/v1/signedWallet/{currencyType}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolInventoryV1SignedWalletByCurrencyTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolInventoryV1SignedWalletByCurrencyTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolInventoryV1SignedWalletByCurrencyType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolInventoryV1Wallet get lol inventory v1 wallet API
*/
func (a *Client) GetLolInventoryV1Wallet(params *GetLolInventoryV1WalletParams) (*GetLolInventoryV1WalletOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolInventoryV1WalletParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolInventoryV1Wallet",
		Method:             "GET",
		PathPattern:        "/lol-inventory/v1/wallet",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolInventoryV1WalletReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolInventoryV1WalletOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolInventoryV1Wallet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolInventoryV1WalletByCurrencyType get lol inventory v1 wallet by currency type API
*/
func (a *Client) GetLolInventoryV1WalletByCurrencyType(params *GetLolInventoryV1WalletByCurrencyTypeParams) (*GetLolInventoryV1WalletByCurrencyTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolInventoryV1WalletByCurrencyTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolInventoryV1WalletByCurrencyType",
		Method:             "GET",
		PathPattern:        "/lol-inventory/v1/wallet/{currencyType}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolInventoryV1WalletByCurrencyTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolInventoryV1WalletByCurrencyTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolInventoryV1WalletByCurrencyType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolInventoryV2InventoryByInventoryType get lol inventory v2 inventory by inventory type API
*/
func (a *Client) GetLolInventoryV2InventoryByInventoryType(params *GetLolInventoryV2InventoryByInventoryTypeParams) (*GetLolInventoryV2InventoryByInventoryTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolInventoryV2InventoryByInventoryTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolInventoryV2InventoryByInventoryType",
		Method:             "GET",
		PathPattern:        "/lol-inventory/v2/inventory/{inventoryType}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolInventoryV2InventoryByInventoryTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolInventoryV2InventoryByInventoryTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolInventoryV2InventoryByInventoryType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolItemSetsV1ItemSetsBySummonerIDSets get lol item sets v1 item sets by summoner Id sets API
*/
func (a *Client) GetLolItemSetsV1ItemSetsBySummonerIDSets(params *GetLolItemSetsV1ItemSetsBySummonerIDSetsParams) (*GetLolItemSetsV1ItemSetsBySummonerIDSetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolItemSetsV1ItemSetsBySummonerIDSetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolItemSetsV1ItemSetsBySummonerIdSets",
		Method:             "GET",
		PathPattern:        "/lol-item-sets/v1/item-sets/{summonerId}/sets",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolItemSetsV1ItemSetsBySummonerIDSetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolItemSetsV1ItemSetsBySummonerIDSetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolItemSetsV1ItemSetsBySummonerIdSets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolKickoutV1Notification get lol kickout v1 notification API
*/
func (a *Client) GetLolKickoutV1Notification(params *GetLolKickoutV1NotificationParams) (*GetLolKickoutV1NotificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolKickoutV1NotificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolKickoutV1Notification",
		Method:             "GET",
		PathPattern:        "/lol-kickout/v1/notification",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolKickoutV1NotificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolKickoutV1NotificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolKickoutV1Notification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolKrPlaytimeReminderV1Message get lol kr playtime reminder v1 message API
*/
func (a *Client) GetLolKrPlaytimeReminderV1Message(params *GetLolKrPlaytimeReminderV1MessageParams) (*GetLolKrPlaytimeReminderV1MessageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolKrPlaytimeReminderV1MessageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolKrPlaytimeReminderV1Message",
		Method:             "GET",
		PathPattern:        "/lol-kr-playtime-reminder/v1/message",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolKrPlaytimeReminderV1MessageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolKrPlaytimeReminderV1MessageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolKrPlaytimeReminderV1Message: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolKrPlaytimeReminderV1Playtime get lol kr playtime reminder v1 playtime API
*/
func (a *Client) GetLolKrPlaytimeReminderV1Playtime(params *GetLolKrPlaytimeReminderV1PlaytimeParams) (*GetLolKrPlaytimeReminderV1PlaytimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolKrPlaytimeReminderV1PlaytimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolKrPlaytimeReminderV1Playtime",
		Method:             "GET",
		PathPattern:        "/lol-kr-playtime-reminder/v1/playtime",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolKrPlaytimeReminderV1PlaytimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolKrPlaytimeReminderV1PlaytimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolKrPlaytimeReminderV1Playtime: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolKrShutdownLawV1CustomStatus get lol kr shutdown law v1 custom status API
*/
func (a *Client) GetLolKrShutdownLawV1CustomStatus(params *GetLolKrShutdownLawV1CustomStatusParams) (*GetLolKrShutdownLawV1CustomStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolKrShutdownLawV1CustomStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolKrShutdownLawV1CustomStatus",
		Method:             "GET",
		PathPattern:        "/lol-kr-shutdown-law/v1/custom-status",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolKrShutdownLawV1CustomStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolKrShutdownLawV1CustomStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolKrShutdownLawV1CustomStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolKrShutdownLawV1DisabledQueues get lol kr shutdown law v1 disabled queues API
*/
func (a *Client) GetLolKrShutdownLawV1DisabledQueues(params *GetLolKrShutdownLawV1DisabledQueuesParams) (*GetLolKrShutdownLawV1DisabledQueuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolKrShutdownLawV1DisabledQueuesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolKrShutdownLawV1DisabledQueues",
		Method:             "GET",
		PathPattern:        "/lol-kr-shutdown-law/v1/disabled-queues",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolKrShutdownLawV1DisabledQueuesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolKrShutdownLawV1DisabledQueuesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolKrShutdownLawV1DisabledQueues: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolKrShutdownLawV1Notification get lol kr shutdown law v1 notification API
*/
func (a *Client) GetLolKrShutdownLawV1Notification(params *GetLolKrShutdownLawV1NotificationParams) (*GetLolKrShutdownLawV1NotificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolKrShutdownLawV1NotificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolKrShutdownLawV1Notification",
		Method:             "GET",
		PathPattern:        "/lol-kr-shutdown-law/v1/notification",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolKrShutdownLawV1NotificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolKrShutdownLawV1NotificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolKrShutdownLawV1Notification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolKrShutdownLawV1QueueStatusByQueueID get lol kr shutdown law v1 queue status by queue Id API
*/
func (a *Client) GetLolKrShutdownLawV1QueueStatusByQueueID(params *GetLolKrShutdownLawV1QueueStatusByQueueIDParams) (*GetLolKrShutdownLawV1QueueStatusByQueueIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolKrShutdownLawV1QueueStatusByQueueIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolKrShutdownLawV1QueueStatusByQueueId",
		Method:             "GET",
		PathPattern:        "/lol-kr-shutdown-law/v1/queue-status/{queue_id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolKrShutdownLawV1QueueStatusByQueueIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolKrShutdownLawV1QueueStatusByQueueIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolKrShutdownLawV1QueueStatusByQueueId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolKrShutdownLawV1RatingScreen get lol kr shutdown law v1 rating screen API
*/
func (a *Client) GetLolKrShutdownLawV1RatingScreen(params *GetLolKrShutdownLawV1RatingScreenParams) (*GetLolKrShutdownLawV1RatingScreenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolKrShutdownLawV1RatingScreenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolKrShutdownLawV1RatingScreen",
		Method:             "GET",
		PathPattern:        "/lol-kr-shutdown-law/v1/rating-screen",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolKrShutdownLawV1RatingScreenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolKrShutdownLawV1RatingScreenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolKrShutdownLawV1RatingScreen: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolKrShutdownLawV1Status get lol kr shutdown law v1 status API
*/
func (a *Client) GetLolKrShutdownLawV1Status(params *GetLolKrShutdownLawV1StatusParams) (*GetLolKrShutdownLawV1StatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolKrShutdownLawV1StatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolKrShutdownLawV1Status",
		Method:             "GET",
		PathPattern:        "/lol-kr-shutdown-law/v1/status",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolKrShutdownLawV1StatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolKrShutdownLawV1StatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolKrShutdownLawV1Status: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLeagueSessionV1LeagueSessionToken get lol league session v1 league session token API
*/
func (a *Client) GetLolLeagueSessionV1LeagueSessionToken(params *GetLolLeagueSessionV1LeagueSessionTokenParams) (*GetLolLeagueSessionV1LeagueSessionTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLeagueSessionV1LeagueSessionTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLeagueSessionV1LeagueSessionToken",
		Method:             "GET",
		PathPattern:        "/lol-league-session/v1/league-session-token",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLeagueSessionV1LeagueSessionTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLeagueSessionV1LeagueSessionTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLeagueSessionV1LeagueSessionToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLeaverBusterV1Notifications get lol leaver buster v1 notifications API
*/
func (a *Client) GetLolLeaverBusterV1Notifications(params *GetLolLeaverBusterV1NotificationsParams) (*GetLolLeaverBusterV1NotificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLeaverBusterV1NotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLeaverBusterV1Notifications",
		Method:             "GET",
		PathPattern:        "/lol-leaver-buster/v1/notifications",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLeaverBusterV1NotificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLeaverBusterV1NotificationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLeaverBusterV1Notifications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLeaverBusterV1NotificationsByID get lol leaver buster v1 notifications by Id API
*/
func (a *Client) GetLolLeaverBusterV1NotificationsByID(params *GetLolLeaverBusterV1NotificationsByIDParams) (*GetLolLeaverBusterV1NotificationsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLeaverBusterV1NotificationsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLeaverBusterV1NotificationsById",
		Method:             "GET",
		PathPattern:        "/lol-leaver-buster/v1/notifications/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLeaverBusterV1NotificationsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLeaverBusterV1NotificationsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLeaverBusterV1NotificationsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLicenseAgreementV1Agreements get lol license agreement v1 agreements API
*/
func (a *Client) GetLolLicenseAgreementV1Agreements(params *GetLolLicenseAgreementV1AgreementsParams) (*GetLolLicenseAgreementV1AgreementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLicenseAgreementV1AgreementsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLicenseAgreementV1Agreements",
		Method:             "GET",
		PathPattern:        "/lol-license-agreement/v1/agreements",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLicenseAgreementV1AgreementsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLicenseAgreementV1AgreementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLicenseAgreementV1Agreements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLicenseAgreementV1AllAgreements get lol license agreement v1 all agreements API
*/
func (a *Client) GetLolLicenseAgreementV1AllAgreements(params *GetLolLicenseAgreementV1AllAgreementsParams) (*GetLolLicenseAgreementV1AllAgreementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLicenseAgreementV1AllAgreementsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLicenseAgreementV1AllAgreements",
		Method:             "GET",
		PathPattern:        "/lol-license-agreement/v1/all-agreements",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLicenseAgreementV1AllAgreementsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLicenseAgreementV1AllAgreementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLicenseAgreementV1AllAgreements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLicenseAgreementV1ServeLocation get lol license agreement v1 serve location API
*/
func (a *Client) GetLolLicenseAgreementV1ServeLocation(params *GetLolLicenseAgreementV1ServeLocationParams) (*GetLolLicenseAgreementV1ServeLocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLicenseAgreementV1ServeLocationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLicenseAgreementV1ServeLocation",
		Method:             "GET",
		PathPattern:        "/lol-license-agreement/v1/serve-location",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLicenseAgreementV1ServeLocationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLicenseAgreementV1ServeLocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLicenseAgreementV1ServeLocation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLoadoutsV1LoadoutsReady get lol loadouts v1 loadouts ready API
*/
func (a *Client) GetLolLoadoutsV1LoadoutsReady(params *GetLolLoadoutsV1LoadoutsReadyParams) (*GetLolLoadoutsV1LoadoutsReadyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLoadoutsV1LoadoutsReadyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLoadoutsV1LoadoutsReady",
		Method:             "GET",
		PathPattern:        "/lol-loadouts/v1/loadouts-ready",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLoadoutsV1LoadoutsReadyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLoadoutsV1LoadoutsReadyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLoadoutsV1LoadoutsReady: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLoadoutsV4LoadoutsByLoadoutID get lol loadouts v4 loadouts by loadout Id API
*/
func (a *Client) GetLolLoadoutsV4LoadoutsByLoadoutID(params *GetLolLoadoutsV4LoadoutsByLoadoutIDParams) (*GetLolLoadoutsV4LoadoutsByLoadoutIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLoadoutsV4LoadoutsByLoadoutIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLoadoutsV4LoadoutsByLoadoutId",
		Method:             "GET",
		PathPattern:        "/lol-loadouts/v4/loadouts/{loadoutId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLoadoutsV4LoadoutsByLoadoutIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLoadoutsV4LoadoutsByLoadoutIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLoadoutsV4LoadoutsByLoadoutId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLoadoutsV4LoadoutsScopeAccount get lol loadouts v4 loadouts scope account API
*/
func (a *Client) GetLolLoadoutsV4LoadoutsScopeAccount(params *GetLolLoadoutsV4LoadoutsScopeAccountParams) (*GetLolLoadoutsV4LoadoutsScopeAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLoadoutsV4LoadoutsScopeAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLoadoutsV4LoadoutsScopeAccount",
		Method:             "GET",
		PathPattern:        "/lol-loadouts/v4/loadouts/scope/account",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLoadoutsV4LoadoutsScopeAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLoadoutsV4LoadoutsScopeAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLoadoutsV4LoadoutsScopeAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLoadoutsV4LoadoutsScopeByScopeByScopeItemID get lol loadouts v4 loadouts scope by scope by scope item Id API
*/
func (a *Client) GetLolLoadoutsV4LoadoutsScopeByScopeByScopeItemID(params *GetLolLoadoutsV4LoadoutsScopeByScopeByScopeItemIDParams) (*GetLolLoadoutsV4LoadoutsScopeByScopeByScopeItemIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLoadoutsV4LoadoutsScopeByScopeByScopeItemIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLoadoutsV4LoadoutsScopeByScopeByScopeItemId",
		Method:             "GET",
		PathPattern:        "/lol-loadouts/v4/loadouts/scope/{scope}/{scopeItemId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLoadoutsV4LoadoutsScopeByScopeByScopeItemIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLoadoutsV4LoadoutsScopeByScopeByScopeItemIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLoadoutsV4LoadoutsScopeByScopeByScopeItemId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyTeamBuilderChampSelectV1BannableChampionIds get lol lobby team builder champ select v1 bannable champion ids API
*/
func (a *Client) GetLolLobbyTeamBuilderChampSelectV1BannableChampionIds(params *GetLolLobbyTeamBuilderChampSelectV1BannableChampionIdsParams) (*GetLolLobbyTeamBuilderChampSelectV1BannableChampionIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyTeamBuilderChampSelectV1BannableChampionIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyTeamBuilderChampSelectV1BannableChampionIds",
		Method:             "GET",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/bannable-champion-ids",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyTeamBuilderChampSelectV1BannableChampionIdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyTeamBuilderChampSelectV1BannableChampionIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyTeamBuilderChampSelectV1BannableChampionIds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyTeamBuilderChampSelectV1CurrentChampion get lol lobby team builder champ select v1 current champion API
*/
func (a *Client) GetLolLobbyTeamBuilderChampSelectV1CurrentChampion(params *GetLolLobbyTeamBuilderChampSelectV1CurrentChampionParams) (*GetLolLobbyTeamBuilderChampSelectV1CurrentChampionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyTeamBuilderChampSelectV1CurrentChampionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyTeamBuilderChampSelectV1CurrentChampion",
		Method:             "GET",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/current-champion",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyTeamBuilderChampSelectV1CurrentChampionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyTeamBuilderChampSelectV1CurrentChampionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyTeamBuilderChampSelectV1CurrentChampion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyTeamBuilderChampSelectV1DisabledChampionIds get lol lobby team builder champ select v1 disabled champion ids API
*/
func (a *Client) GetLolLobbyTeamBuilderChampSelectV1DisabledChampionIds(params *GetLolLobbyTeamBuilderChampSelectV1DisabledChampionIdsParams) (*GetLolLobbyTeamBuilderChampSelectV1DisabledChampionIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyTeamBuilderChampSelectV1DisabledChampionIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyTeamBuilderChampSelectV1DisabledChampionIds",
		Method:             "GET",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/disabled-champion-ids",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyTeamBuilderChampSelectV1DisabledChampionIdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyTeamBuilderChampSelectV1DisabledChampionIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyTeamBuilderChampSelectV1DisabledChampionIds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyTeamBuilderChampSelectV1HasAutoAssignedSmite get lol lobby team builder champ select v1 has auto assigned smite API
*/
func (a *Client) GetLolLobbyTeamBuilderChampSelectV1HasAutoAssignedSmite(params *GetLolLobbyTeamBuilderChampSelectV1HasAutoAssignedSmiteParams) (*GetLolLobbyTeamBuilderChampSelectV1HasAutoAssignedSmiteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyTeamBuilderChampSelectV1HasAutoAssignedSmiteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyTeamBuilderChampSelectV1HasAutoAssignedSmite",
		Method:             "GET",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/has-auto-assigned-smite",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyTeamBuilderChampSelectV1HasAutoAssignedSmiteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyTeamBuilderChampSelectV1HasAutoAssignedSmiteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyTeamBuilderChampSelectV1HasAutoAssignedSmite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyTeamBuilderChampSelectV1ImplementationActive get lol lobby team builder champ select v1 implementation active API
*/
func (a *Client) GetLolLobbyTeamBuilderChampSelectV1ImplementationActive(params *GetLolLobbyTeamBuilderChampSelectV1ImplementationActiveParams) (*GetLolLobbyTeamBuilderChampSelectV1ImplementationActiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyTeamBuilderChampSelectV1ImplementationActiveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyTeamBuilderChampSelectV1ImplementationActive",
		Method:             "GET",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/implementation-active",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyTeamBuilderChampSelectV1ImplementationActiveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyTeamBuilderChampSelectV1ImplementationActiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyTeamBuilderChampSelectV1ImplementationActive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyTeamBuilderChampSelectV1PickableChampionIds get lol lobby team builder champ select v1 pickable champion ids API
*/
func (a *Client) GetLolLobbyTeamBuilderChampSelectV1PickableChampionIds(params *GetLolLobbyTeamBuilderChampSelectV1PickableChampionIdsParams) (*GetLolLobbyTeamBuilderChampSelectV1PickableChampionIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyTeamBuilderChampSelectV1PickableChampionIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyTeamBuilderChampSelectV1PickableChampionIds",
		Method:             "GET",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/pickable-champion-ids",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyTeamBuilderChampSelectV1PickableChampionIdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyTeamBuilderChampSelectV1PickableChampionIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyTeamBuilderChampSelectV1PickableChampionIds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyTeamBuilderChampSelectV1PickableSkins get lol lobby team builder champ select v1 pickable skins API
*/
func (a *Client) GetLolLobbyTeamBuilderChampSelectV1PickableSkins(params *GetLolLobbyTeamBuilderChampSelectV1PickableSkinsParams) (*GetLolLobbyTeamBuilderChampSelectV1PickableSkinsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyTeamBuilderChampSelectV1PickableSkinsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyTeamBuilderChampSelectV1PickableSkins",
		Method:             "GET",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/pickable-skins",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyTeamBuilderChampSelectV1PickableSkinsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyTeamBuilderChampSelectV1PickableSkinsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyTeamBuilderChampSelectV1PickableSkins: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyTeamBuilderChampSelectV1Preferences get lol lobby team builder champ select v1 preferences API
*/
func (a *Client) GetLolLobbyTeamBuilderChampSelectV1Preferences(params *GetLolLobbyTeamBuilderChampSelectV1PreferencesParams) (*GetLolLobbyTeamBuilderChampSelectV1PreferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyTeamBuilderChampSelectV1PreferencesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyTeamBuilderChampSelectV1Preferences",
		Method:             "GET",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/preferences",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyTeamBuilderChampSelectV1PreferencesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyTeamBuilderChampSelectV1PreferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyTeamBuilderChampSelectV1Preferences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyTeamBuilderChampSelectV1SendingLoadoutsGcosEnabled get lol lobby team builder champ select v1 sending loadouts gcos enabled API
*/
func (a *Client) GetLolLobbyTeamBuilderChampSelectV1SendingLoadoutsGcosEnabled(params *GetLolLobbyTeamBuilderChampSelectV1SendingLoadoutsGcosEnabledParams) (*GetLolLobbyTeamBuilderChampSelectV1SendingLoadoutsGcosEnabledOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyTeamBuilderChampSelectV1SendingLoadoutsGcosEnabledParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyTeamBuilderChampSelectV1SendingLoadoutsGcosEnabled",
		Method:             "GET",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/sending-loadouts-gcos-enabled",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyTeamBuilderChampSelectV1SendingLoadoutsGcosEnabledReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyTeamBuilderChampSelectV1SendingLoadoutsGcosEnabledOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyTeamBuilderChampSelectV1SendingLoadoutsGcosEnabled: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyTeamBuilderChampSelectV1Session get lol lobby team builder champ select v1 session API
*/
func (a *Client) GetLolLobbyTeamBuilderChampSelectV1Session(params *GetLolLobbyTeamBuilderChampSelectV1SessionParams) (*GetLolLobbyTeamBuilderChampSelectV1SessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyTeamBuilderChampSelectV1SessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyTeamBuilderChampSelectV1Session",
		Method:             "GET",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/session",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyTeamBuilderChampSelectV1SessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyTeamBuilderChampSelectV1SessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyTeamBuilderChampSelectV1Session: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyTeamBuilderChampSelectV1SessionTimer get lol lobby team builder champ select v1 session timer API
*/
func (a *Client) GetLolLobbyTeamBuilderChampSelectV1SessionTimer(params *GetLolLobbyTeamBuilderChampSelectV1SessionTimerParams) (*GetLolLobbyTeamBuilderChampSelectV1SessionTimerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyTeamBuilderChampSelectV1SessionTimerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyTeamBuilderChampSelectV1SessionTimer",
		Method:             "GET",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/session/timer",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyTeamBuilderChampSelectV1SessionTimerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyTeamBuilderChampSelectV1SessionTimerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyTeamBuilderChampSelectV1SessionTimer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyTeamBuilderChampSelectV1SessionTrades get lol lobby team builder champ select v1 session trades API
*/
func (a *Client) GetLolLobbyTeamBuilderChampSelectV1SessionTrades(params *GetLolLobbyTeamBuilderChampSelectV1SessionTradesParams) (*GetLolLobbyTeamBuilderChampSelectV1SessionTradesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyTeamBuilderChampSelectV1SessionTradesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyTeamBuilderChampSelectV1SessionTrades",
		Method:             "GET",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/session/trades",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyTeamBuilderChampSelectV1SessionTradesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyTeamBuilderChampSelectV1SessionTradesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyTeamBuilderChampSelectV1SessionTrades: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyTeamBuilderChampSelectV1SessionTradesByID get lol lobby team builder champ select v1 session trades by Id API
*/
func (a *Client) GetLolLobbyTeamBuilderChampSelectV1SessionTradesByID(params *GetLolLobbyTeamBuilderChampSelectV1SessionTradesByIDParams) (*GetLolLobbyTeamBuilderChampSelectV1SessionTradesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyTeamBuilderChampSelectV1SessionTradesByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyTeamBuilderChampSelectV1SessionTradesById",
		Method:             "GET",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/session/trades/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyTeamBuilderChampSelectV1SessionTradesByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyTeamBuilderChampSelectV1SessionTradesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyTeamBuilderChampSelectV1SessionTradesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyTeamBuilderChampSelectV1TeamBoost get lol lobby team builder champ select v1 team boost API
*/
func (a *Client) GetLolLobbyTeamBuilderChampSelectV1TeamBoost(params *GetLolLobbyTeamBuilderChampSelectV1TeamBoostParams) (*GetLolLobbyTeamBuilderChampSelectV1TeamBoostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyTeamBuilderChampSelectV1TeamBoostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyTeamBuilderChampSelectV1TeamBoost",
		Method:             "GET",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/team-boost",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyTeamBuilderChampSelectV1TeamBoostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyTeamBuilderChampSelectV1TeamBoostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyTeamBuilderChampSelectV1TeamBoost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyTeamBuilderV1Lobby get lol lobby team builder v1 lobby API
*/
func (a *Client) GetLolLobbyTeamBuilderV1Lobby(params *GetLolLobbyTeamBuilderV1LobbyParams) (*GetLolLobbyTeamBuilderV1LobbyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyTeamBuilderV1LobbyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyTeamBuilderV1Lobby",
		Method:             "GET",
		PathPattern:        "/lol-lobby-team-builder/v1/lobby",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyTeamBuilderV1LobbyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyTeamBuilderV1LobbyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyTeamBuilderV1Lobby: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyTeamBuilderV1LobbyCountdown get lol lobby team builder v1 lobby countdown API
*/
func (a *Client) GetLolLobbyTeamBuilderV1LobbyCountdown(params *GetLolLobbyTeamBuilderV1LobbyCountdownParams) (*GetLolLobbyTeamBuilderV1LobbyCountdownOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyTeamBuilderV1LobbyCountdownParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyTeamBuilderV1LobbyCountdown",
		Method:             "GET",
		PathPattern:        "/lol-lobby-team-builder/v1/lobby/countdown",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyTeamBuilderV1LobbyCountdownReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyTeamBuilderV1LobbyCountdownOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyTeamBuilderV1LobbyCountdown: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyTeamBuilderV1Matchmaking get lol lobby team builder v1 matchmaking API
*/
func (a *Client) GetLolLobbyTeamBuilderV1Matchmaking(params *GetLolLobbyTeamBuilderV1MatchmakingParams) (*GetLolLobbyTeamBuilderV1MatchmakingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyTeamBuilderV1MatchmakingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyTeamBuilderV1Matchmaking",
		Method:             "GET",
		PathPattern:        "/lol-lobby-team-builder/v1/matchmaking",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyTeamBuilderV1MatchmakingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyTeamBuilderV1MatchmakingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyTeamBuilderV1Matchmaking: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV1AutofillDisplayed get lol lobby v1 autofill displayed API
*/
func (a *Client) GetLolLobbyV1AutofillDisplayed(params *GetLolLobbyV1AutofillDisplayedParams) (*GetLolLobbyV1AutofillDisplayedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV1AutofillDisplayedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV1AutofillDisplayed",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v1/autofill-displayed",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV1AutofillDisplayedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV1AutofillDisplayedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV1AutofillDisplayed: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV1CustomGames get lol lobby v1 custom games API
*/
func (a *Client) GetLolLobbyV1CustomGames(params *GetLolLobbyV1CustomGamesParams) (*GetLolLobbyV1CustomGamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV1CustomGamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV1CustomGames",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v1/custom-games",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV1CustomGamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV1CustomGamesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV1CustomGames: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV1CustomGamesByID get lol lobby v1 custom games by Id API
*/
func (a *Client) GetLolLobbyV1CustomGamesByID(params *GetLolLobbyV1CustomGamesByIDParams) (*GetLolLobbyV1CustomGamesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV1CustomGamesByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV1CustomGamesById",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v1/custom-games/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV1CustomGamesByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV1CustomGamesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV1CustomGamesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV1LobbyAvailability get lol lobby v1 lobby availability API
*/
func (a *Client) GetLolLobbyV1LobbyAvailability(params *GetLolLobbyV1LobbyAvailabilityParams) (*GetLolLobbyV1LobbyAvailabilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV1LobbyAvailabilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV1LobbyAvailability",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v1/lobby/availability",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV1LobbyAvailabilityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV1LobbyAvailabilityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV1LobbyAvailability: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV1LobbyCountdown get lol lobby v1 lobby countdown API
*/
func (a *Client) GetLolLobbyV1LobbyCountdown(params *GetLolLobbyV1LobbyCountdownParams) (*GetLolLobbyV1LobbyCountdownOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV1LobbyCountdownParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV1LobbyCountdown",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v1/lobby/countdown",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV1LobbyCountdownReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV1LobbyCountdownOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV1LobbyCountdown: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV1LobbyInvitations get lol lobby v1 lobby invitations API
*/
func (a *Client) GetLolLobbyV1LobbyInvitations(params *GetLolLobbyV1LobbyInvitationsParams) (*GetLolLobbyV1LobbyInvitationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV1LobbyInvitationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV1LobbyInvitations",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v1/lobby/invitations",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV1LobbyInvitationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV1LobbyInvitationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV1LobbyInvitations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV1LobbyInvitationsByID get lol lobby v1 lobby invitations by Id API
*/
func (a *Client) GetLolLobbyV1LobbyInvitationsByID(params *GetLolLobbyV1LobbyInvitationsByIDParams) (*GetLolLobbyV1LobbyInvitationsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV1LobbyInvitationsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV1LobbyInvitationsById",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v1/lobby/invitations/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV1LobbyInvitationsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV1LobbyInvitationsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV1LobbyInvitationsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV1PartiesGamemode get lol lobby v1 parties gamemode API
*/
func (a *Client) GetLolLobbyV1PartiesGamemode(params *GetLolLobbyV1PartiesGamemodeParams) (*GetLolLobbyV1PartiesGamemodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV1PartiesGamemodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV1PartiesGamemode",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v1/parties/gamemode",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV1PartiesGamemodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV1PartiesGamemodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV1PartiesGamemode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV1PartiesPlayer get lol lobby v1 parties player API
*/
func (a *Client) GetLolLobbyV1PartiesPlayer(params *GetLolLobbyV1PartiesPlayerParams) (*GetLolLobbyV1PartiesPlayerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV1PartiesPlayerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV1PartiesPlayer",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v1/parties/player",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV1PartiesPlayerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV1PartiesPlayerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV1PartiesPlayer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV1PartyRewards get lol lobby v1 party rewards API
*/
func (a *Client) GetLolLobbyV1PartyRewards(params *GetLolLobbyV1PartyRewardsParams) (*GetLolLobbyV1PartyRewardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV1PartyRewardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV1PartyRewards",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v1/party-rewards",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV1PartyRewardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV1PartyRewardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV1PartyRewards: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV2CommsMembers get lol lobby v2 comms members API
*/
func (a *Client) GetLolLobbyV2CommsMembers(params *GetLolLobbyV2CommsMembersParams) (*GetLolLobbyV2CommsMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV2CommsMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV2CommsMembers",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v2/comms/members",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV2CommsMembersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV2CommsMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV2CommsMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV2CommsToken get lol lobby v2 comms token API
*/
func (a *Client) GetLolLobbyV2CommsToken(params *GetLolLobbyV2CommsTokenParams) (*GetLolLobbyV2CommsTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV2CommsTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV2CommsToken",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v2/comms/token",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV2CommsTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV2CommsTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV2CommsToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV2EligibilityGameSelectEligibilityHash get lol lobby v2 eligibility game select eligibility hash API
*/
func (a *Client) GetLolLobbyV2EligibilityGameSelectEligibilityHash(params *GetLolLobbyV2EligibilityGameSelectEligibilityHashParams) (*GetLolLobbyV2EligibilityGameSelectEligibilityHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV2EligibilityGameSelectEligibilityHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV2EligibilityGameSelectEligibilityHash",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v2/eligibility/game-select-eligibility-hash",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV2EligibilityGameSelectEligibilityHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV2EligibilityGameSelectEligibilityHashOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV2EligibilityGameSelectEligibilityHash: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV2EligibilityInitialConfigurationComplete get lol lobby v2 eligibility initial configuration complete API
*/
func (a *Client) GetLolLobbyV2EligibilityInitialConfigurationComplete(params *GetLolLobbyV2EligibilityInitialConfigurationCompleteParams) (*GetLolLobbyV2EligibilityInitialConfigurationCompleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV2EligibilityInitialConfigurationCompleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV2EligibilityInitialConfigurationComplete",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v2/eligibility/initial-configuration-complete",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV2EligibilityInitialConfigurationCompleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV2EligibilityInitialConfigurationCompleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV2EligibilityInitialConfigurationComplete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV2Lobby get lol lobby v2 lobby API
*/
func (a *Client) GetLolLobbyV2Lobby(params *GetLolLobbyV2LobbyParams) (*GetLolLobbyV2LobbyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV2LobbyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV2Lobby",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v2/lobby",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV2LobbyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV2LobbyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV2Lobby: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV2LobbyCustomAvailableBots get lol lobby v2 lobby custom available bots API
*/
func (a *Client) GetLolLobbyV2LobbyCustomAvailableBots(params *GetLolLobbyV2LobbyCustomAvailableBotsParams) (*GetLolLobbyV2LobbyCustomAvailableBotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV2LobbyCustomAvailableBotsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV2LobbyCustomAvailableBots",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v2/lobby/custom/available-bots",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV2LobbyCustomAvailableBotsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV2LobbyCustomAvailableBotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV2LobbyCustomAvailableBots: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV2LobbyCustomBotsEnabled get lol lobby v2 lobby custom bots enabled API
*/
func (a *Client) GetLolLobbyV2LobbyCustomBotsEnabled(params *GetLolLobbyV2LobbyCustomBotsEnabledParams) (*GetLolLobbyV2LobbyCustomBotsEnabledOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV2LobbyCustomBotsEnabledParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV2LobbyCustomBotsEnabled",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v2/lobby/custom/bots-enabled",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV2LobbyCustomBotsEnabledReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV2LobbyCustomBotsEnabledOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV2LobbyCustomBotsEnabled: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV2LobbyInvitations get lol lobby v2 lobby invitations API
*/
func (a *Client) GetLolLobbyV2LobbyInvitations(params *GetLolLobbyV2LobbyInvitationsParams) (*GetLolLobbyV2LobbyInvitationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV2LobbyInvitationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV2LobbyInvitations",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v2/lobby/invitations",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV2LobbyInvitationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV2LobbyInvitationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV2LobbyInvitations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV2LobbyMatchmakingSearchState get lol lobby v2 lobby matchmaking search state API
*/
func (a *Client) GetLolLobbyV2LobbyMatchmakingSearchState(params *GetLolLobbyV2LobbyMatchmakingSearchStateParams) (*GetLolLobbyV2LobbyMatchmakingSearchStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV2LobbyMatchmakingSearchStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV2LobbyMatchmakingSearchState",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v2/lobby/matchmaking/search-state",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV2LobbyMatchmakingSearchStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV2LobbyMatchmakingSearchStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV2LobbyMatchmakingSearchState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV2LobbyMembers get lol lobby v2 lobby members API
*/
func (a *Client) GetLolLobbyV2LobbyMembers(params *GetLolLobbyV2LobbyMembersParams) (*GetLolLobbyV2LobbyMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV2LobbyMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV2LobbyMembers",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v2/lobby/members",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV2LobbyMembersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV2LobbyMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV2LobbyMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV2Notifications get lol lobby v2 notifications API
*/
func (a *Client) GetLolLobbyV2Notifications(params *GetLolLobbyV2NotificationsParams) (*GetLolLobbyV2NotificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV2NotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV2Notifications",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v2/notifications",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV2NotificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV2NotificationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV2Notifications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV2PartyActive get lol lobby v2 party active API
*/
func (a *Client) GetLolLobbyV2PartyActive(params *GetLolLobbyV2PartyActiveParams) (*GetLolLobbyV2PartyActiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV2PartyActiveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV2PartyActive",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v2/party-active",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV2PartyActiveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV2PartyActiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV2PartyActive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV2PartyEogStatus get lol lobby v2 party eog status API
*/
func (a *Client) GetLolLobbyV2PartyEogStatus(params *GetLolLobbyV2PartyEogStatusParams) (*GetLolLobbyV2PartyEogStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV2PartyEogStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV2PartyEogStatus",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v2/party/eog-status",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV2PartyEogStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV2PartyEogStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV2PartyEogStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV2ReceivedInvitations get lol lobby v2 received invitations API
*/
func (a *Client) GetLolLobbyV2ReceivedInvitations(params *GetLolLobbyV2ReceivedInvitationsParams) (*GetLolLobbyV2ReceivedInvitationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV2ReceivedInvitationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV2ReceivedInvitations",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v2/received-invitations",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV2ReceivedInvitationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV2ReceivedInvitationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV2ReceivedInvitations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLobbyV2RegistrationStatus get lol lobby v2 registration status API
*/
func (a *Client) GetLolLobbyV2RegistrationStatus(params *GetLolLobbyV2RegistrationStatusParams) (*GetLolLobbyV2RegistrationStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLobbyV2RegistrationStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLobbyV2RegistrationStatus",
		Method:             "GET",
		PathPattern:        "/lol-lobby/v2/registration-status",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLobbyV2RegistrationStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLobbyV2RegistrationStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLobbyV2RegistrationStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLoginV1AccountState get lol login v1 account state API
*/
func (a *Client) GetLolLoginV1AccountState(params *GetLolLoginV1AccountStateParams) (*GetLolLoginV1AccountStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLoginV1AccountStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLoginV1AccountState",
		Method:             "GET",
		PathPattern:        "/lol-login/v1/account-state",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLoginV1AccountStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLoginV1AccountStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLoginV1AccountState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLoginV1LeagueSessionInitToken get lol login v1 league session init token API
*/
func (a *Client) GetLolLoginV1LeagueSessionInitToken(params *GetLolLoginV1LeagueSessionInitTokenParams) (*GetLolLoginV1LeagueSessionInitTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLoginV1LeagueSessionInitTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLoginV1LeagueSessionInitToken",
		Method:             "GET",
		PathPattern:        "/lol-login/v1/league-session-init-token",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLoginV1LeagueSessionInitTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLoginV1LeagueSessionInitTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLoginV1LeagueSessionInitToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLoginV1LeagueSessionLogoutOnFailure get lol login v1 league session logout on failure API
*/
func (a *Client) GetLolLoginV1LeagueSessionLogoutOnFailure(params *GetLolLoginV1LeagueSessionLogoutOnFailureParams) (*GetLolLoginV1LeagueSessionLogoutOnFailureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLoginV1LeagueSessionLogoutOnFailureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLoginV1LeagueSessionLogoutOnFailure",
		Method:             "GET",
		PathPattern:        "/lol-login/v1/league-session-logout-on-failure",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLoginV1LeagueSessionLogoutOnFailureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLoginV1LeagueSessionLogoutOnFailureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLoginV1LeagueSessionLogoutOnFailure: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLoginV1LoginConnectionState get lol login v1 login connection state API
*/
func (a *Client) GetLolLoginV1LoginConnectionState(params *GetLolLoginV1LoginConnectionStateParams) (*GetLolLoginV1LoginConnectionStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLoginV1LoginConnectionStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLoginV1LoginConnectionState",
		Method:             "GET",
		PathPattern:        "/lol-login/v1/login-connection-state",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLoginV1LoginConnectionStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLoginV1LoginConnectionStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLoginV1LoginConnectionState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLoginV1LoginDataPacket get lol login v1 login data packet API
*/
func (a *Client) GetLolLoginV1LoginDataPacket(params *GetLolLoginV1LoginDataPacketParams) (*GetLolLoginV1LoginDataPacketOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLoginV1LoginDataPacketParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLoginV1LoginDataPacket",
		Method:             "GET",
		PathPattern:        "/lol-login/v1/login-data-packet",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLoginV1LoginDataPacketReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLoginV1LoginDataPacketOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLoginV1LoginDataPacket: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLoginV1LoginInGameCreds get lol login v1 login in game creds API
*/
func (a *Client) GetLolLoginV1LoginInGameCreds(params *GetLolLoginV1LoginInGameCredsParams) (*GetLolLoginV1LoginInGameCredsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLoginV1LoginInGameCredsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLoginV1LoginInGameCreds",
		Method:             "GET",
		PathPattern:        "/lol-login/v1/login-in-game-creds",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLoginV1LoginInGameCredsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLoginV1LoginInGameCredsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLoginV1LoginInGameCreds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLoginV1LoginPlatformCredentials get lol login v1 login platform credentials API
*/
func (a *Client) GetLolLoginV1LoginPlatformCredentials(params *GetLolLoginV1LoginPlatformCredentialsParams) (*GetLolLoginV1LoginPlatformCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLoginV1LoginPlatformCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLoginV1LoginPlatformCredentials",
		Method:             "GET",
		PathPattern:        "/lol-login/v1/login-platform-credentials",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLoginV1LoginPlatformCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLoginV1LoginPlatformCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLoginV1LoginPlatformCredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLoginV1LoginQueueState get lol login v1 login queue state API
*/
func (a *Client) GetLolLoginV1LoginQueueState(params *GetLolLoginV1LoginQueueStateParams) (*GetLolLoginV1LoginQueueStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLoginV1LoginQueueStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLoginV1LoginQueueState",
		Method:             "GET",
		PathPattern:        "/lol-login/v1/login-queue-state",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLoginV1LoginQueueStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLoginV1LoginQueueStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLoginV1LoginQueueState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLoginV1Session get lol login v1 session API
*/
func (a *Client) GetLolLoginV1Session(params *GetLolLoginV1SessionParams) (*GetLolLoginV1SessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLoginV1SessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLoginV1Session",
		Method:             "GET",
		PathPattern:        "/lol-login/v1/session",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLoginV1SessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLoginV1SessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLoginV1Session: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLoginV1Wallet get lol login v1 wallet API
*/
func (a *Client) GetLolLoginV1Wallet(params *GetLolLoginV1WalletParams) (*GetLolLoginV1WalletOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLoginV1WalletParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLoginV1Wallet",
		Method:             "GET",
		PathPattern:        "/lol-login/v1/wallet",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLoginV1WalletReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLoginV1WalletOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLoginV1Wallet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLootV1CurrencyConfiguration get lol loot v1 currency configuration API
*/
func (a *Client) GetLolLootV1CurrencyConfiguration(params *GetLolLootV1CurrencyConfigurationParams) (*GetLolLootV1CurrencyConfigurationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLootV1CurrencyConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLootV1CurrencyConfiguration",
		Method:             "GET",
		PathPattern:        "/lol-loot/v1/currency-configuration",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLootV1CurrencyConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLootV1CurrencyConfigurationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLootV1CurrencyConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLootV1Enabled get lol loot v1 enabled API
*/
func (a *Client) GetLolLootV1Enabled(params *GetLolLootV1EnabledParams) (*GetLolLootV1EnabledOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLootV1EnabledParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLootV1Enabled",
		Method:             "GET",
		PathPattern:        "/lol-loot/v1/enabled",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLootV1EnabledReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLootV1EnabledOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLootV1Enabled: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLootV1LootGrants get lol loot v1 loot grants API
*/
func (a *Client) GetLolLootV1LootGrants(params *GetLolLootV1LootGrantsParams) (*GetLolLootV1LootGrantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLootV1LootGrantsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLootV1LootGrants",
		Method:             "GET",
		PathPattern:        "/lol-loot/v1/loot-grants",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLootV1LootGrantsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLootV1LootGrantsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLootV1LootGrants: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLootV1LootItems get lol loot v1 loot items API
*/
func (a *Client) GetLolLootV1LootItems(params *GetLolLootV1LootItemsParams) (*GetLolLootV1LootItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLootV1LootItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLootV1LootItems",
		Method:             "GET",
		PathPattern:        "/lol-loot/v1/loot-items",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLootV1LootItemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLootV1LootItemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLootV1LootItems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLootV1NewPlayerCheckDone get lol loot v1 new player check done API
*/
func (a *Client) GetLolLootV1NewPlayerCheckDone(params *GetLolLootV1NewPlayerCheckDoneParams) (*GetLolLootV1NewPlayerCheckDoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLootV1NewPlayerCheckDoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLootV1NewPlayerCheckDone",
		Method:             "GET",
		PathPattern:        "/lol-loot/v1/new-player-check-done",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLootV1NewPlayerCheckDoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLootV1NewPlayerCheckDoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLootV1NewPlayerCheckDone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLootV1PlayerDisplayCategories get lol loot v1 player display categories API
*/
func (a *Client) GetLolLootV1PlayerDisplayCategories(params *GetLolLootV1PlayerDisplayCategoriesParams) (*GetLolLootV1PlayerDisplayCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLootV1PlayerDisplayCategoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLootV1PlayerDisplayCategories",
		Method:             "GET",
		PathPattern:        "/lol-loot/v1/player-display-categories",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLootV1PlayerDisplayCategoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLootV1PlayerDisplayCategoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLootV1PlayerDisplayCategories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLootV1PlayerLoot get lol loot v1 player loot API
*/
func (a *Client) GetLolLootV1PlayerLoot(params *GetLolLootV1PlayerLootParams) (*GetLolLootV1PlayerLootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLootV1PlayerLootParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLootV1PlayerLoot",
		Method:             "GET",
		PathPattern:        "/lol-loot/v1/player-loot",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLootV1PlayerLootReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLootV1PlayerLootOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLootV1PlayerLoot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLootV1PlayerLootByLootID get lol loot v1 player loot by loot Id API
*/
func (a *Client) GetLolLootV1PlayerLootByLootID(params *GetLolLootV1PlayerLootByLootIDParams) (*GetLolLootV1PlayerLootByLootIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLootV1PlayerLootByLootIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLootV1PlayerLootByLootId",
		Method:             "GET",
		PathPattern:        "/lol-loot/v1/player-loot/{lootId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLootV1PlayerLootByLootIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLootV1PlayerLootByLootIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLootV1PlayerLootByLootId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLootV1PlayerLootByLootIDContextMenu get lol loot v1 player loot by loot Id context menu API
*/
func (a *Client) GetLolLootV1PlayerLootByLootIDContextMenu(params *GetLolLootV1PlayerLootByLootIDContextMenuParams) (*GetLolLootV1PlayerLootByLootIDContextMenuOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLootV1PlayerLootByLootIDContextMenuParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLootV1PlayerLootByLootIdContextMenu",
		Method:             "GET",
		PathPattern:        "/lol-loot/v1/player-loot/{lootId}/context-menu",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLootV1PlayerLootByLootIDContextMenuReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLootV1PlayerLootByLootIDContextMenuOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLootV1PlayerLootByLootIdContextMenu: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLootV1PlayerLootMap get lol loot v1 player loot map API
*/
func (a *Client) GetLolLootV1PlayerLootMap(params *GetLolLootV1PlayerLootMapParams) (*GetLolLootV1PlayerLootMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLootV1PlayerLootMapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLootV1PlayerLootMap",
		Method:             "GET",
		PathPattern:        "/lol-loot/v1/player-loot-map",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLootV1PlayerLootMapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLootV1PlayerLootMapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLootV1PlayerLootMap: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLootV1PlayerLootNotifications get lol loot v1 player loot notifications API
*/
func (a *Client) GetLolLootV1PlayerLootNotifications(params *GetLolLootV1PlayerLootNotificationsParams) (*GetLolLootV1PlayerLootNotificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLootV1PlayerLootNotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLootV1PlayerLootNotifications",
		Method:             "GET",
		PathPattern:        "/lol-loot/v1/player-loot-notifications",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLootV1PlayerLootNotificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLootV1PlayerLootNotificationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLootV1PlayerLootNotifications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLootV1Ready get lol loot v1 ready API
*/
func (a *Client) GetLolLootV1Ready(params *GetLolLootV1ReadyParams) (*GetLolLootV1ReadyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLootV1ReadyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLootV1Ready",
		Method:             "GET",
		PathPattern:        "/lol-loot/v1/ready",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLootV1ReadyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLootV1ReadyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLootV1Ready: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLootV1RecipesConfiguration get lol loot v1 recipes configuration API
*/
func (a *Client) GetLolLootV1RecipesConfiguration(params *GetLolLootV1RecipesConfigurationParams) (*GetLolLootV1RecipesConfigurationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLootV1RecipesConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLootV1RecipesConfiguration",
		Method:             "GET",
		PathPattern:        "/lol-loot/v1/recipes/configuration",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLootV1RecipesConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLootV1RecipesConfigurationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLootV1RecipesConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLootV1RecipesInitialItemByLootID get lol loot v1 recipes initial item by loot Id API
*/
func (a *Client) GetLolLootV1RecipesInitialItemByLootID(params *GetLolLootV1RecipesInitialItemByLootIDParams) (*GetLolLootV1RecipesInitialItemByLootIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLootV1RecipesInitialItemByLootIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLootV1RecipesInitialItemByLootId",
		Method:             "GET",
		PathPattern:        "/lol-loot/v1/recipes/initial-item/{lootId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLootV1RecipesInitialItemByLootIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLootV1RecipesInitialItemByLootIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLootV1RecipesInitialItemByLootId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLootV2PlayerLootMap get lol loot v2 player loot map API
*/
func (a *Client) GetLolLootV2PlayerLootMap(params *GetLolLootV2PlayerLootMapParams) (*GetLolLootV2PlayerLootMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLootV2PlayerLootMapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLootV2PlayerLootMap",
		Method:             "GET",
		PathPattern:        "/lol-loot/v2/player-loot-map",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLootV2PlayerLootMapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLootV2PlayerLootMapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLootV2PlayerLootMap: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolLoyaltyV1StatusNotification get lol loyalty v1 status notification API
*/
func (a *Client) GetLolLoyaltyV1StatusNotification(params *GetLolLoyaltyV1StatusNotificationParams) (*GetLolLoyaltyV1StatusNotificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolLoyaltyV1StatusNotificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolLoyaltyV1StatusNotification",
		Method:             "GET",
		PathPattern:        "/lol-loyalty/v1/status-notification",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolLoyaltyV1StatusNotificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolLoyaltyV1StatusNotificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolLoyaltyV1StatusNotification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolMapsV1MapByID get lol maps v1 map by Id API
*/
func (a *Client) GetLolMapsV1MapByID(params *GetLolMapsV1MapByIDParams) (*GetLolMapsV1MapByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolMapsV1MapByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolMapsV1MapById",
		Method:             "GET",
		PathPattern:        "/lol-maps/v1/map/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolMapsV1MapByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolMapsV1MapByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolMapsV1MapById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolMapsV1Maps get lol maps v1 maps API
*/
func (a *Client) GetLolMapsV1Maps(params *GetLolMapsV1MapsParams) (*GetLolMapsV1MapsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolMapsV1MapsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolMapsV1Maps",
		Method:             "GET",
		PathPattern:        "/lol-maps/v1/maps",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolMapsV1MapsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolMapsV1MapsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolMapsV1Maps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolMapsV2MapByIDByGameMode get lol maps v2 map by Id by game mode API
*/
func (a *Client) GetLolMapsV2MapByIDByGameMode(params *GetLolMapsV2MapByIDByGameModeParams) (*GetLolMapsV2MapByIDByGameModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolMapsV2MapByIDByGameModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolMapsV2MapByIdByGameMode",
		Method:             "GET",
		PathPattern:        "/lol-maps/v2/map/{id}/{gameMode}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolMapsV2MapByIDByGameModeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolMapsV2MapByIDByGameModeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolMapsV2MapByIdByGameMode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolMapsV2MapByIDByGameModeByGameMutator get lol maps v2 map by Id by game mode by game mutator API
*/
func (a *Client) GetLolMapsV2MapByIDByGameModeByGameMutator(params *GetLolMapsV2MapByIDByGameModeByGameMutatorParams) (*GetLolMapsV2MapByIDByGameModeByGameMutatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolMapsV2MapByIDByGameModeByGameMutatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolMapsV2MapByIdByGameModeByGameMutator",
		Method:             "GET",
		PathPattern:        "/lol-maps/v2/map/{id}/{gameMode}/{gameMutator}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolMapsV2MapByIDByGameModeByGameMutatorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolMapsV2MapByIDByGameModeByGameMutatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolMapsV2MapByIdByGameModeByGameMutator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolMapsV2Maps get lol maps v2 maps API
*/
func (a *Client) GetLolMapsV2Maps(params *GetLolMapsV2MapsParams) (*GetLolMapsV2MapsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolMapsV2MapsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolMapsV2Maps",
		Method:             "GET",
		PathPattern:        "/lol-maps/v2/maps",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolMapsV2MapsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolMapsV2MapsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolMapsV2Maps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolMatchHistoryV1Delta get lol match history v1 delta API
*/
func (a *Client) GetLolMatchHistoryV1Delta(params *GetLolMatchHistoryV1DeltaParams) (*GetLolMatchHistoryV1DeltaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolMatchHistoryV1DeltaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolMatchHistoryV1Delta",
		Method:             "GET",
		PathPattern:        "/lol-match-history/v1/delta",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolMatchHistoryV1DeltaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolMatchHistoryV1DeltaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolMatchHistoryV1Delta: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolMatchHistoryV1FriendMatchlistsByAccountID get lol match history v1 friend matchlists by account Id API
*/
func (a *Client) GetLolMatchHistoryV1FriendMatchlistsByAccountID(params *GetLolMatchHistoryV1FriendMatchlistsByAccountIDParams) (*GetLolMatchHistoryV1FriendMatchlistsByAccountIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolMatchHistoryV1FriendMatchlistsByAccountIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolMatchHistoryV1FriendMatchlistsByAccountId",
		Method:             "GET",
		PathPattern:        "/lol-match-history/v1/friend-matchlists/{accountId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolMatchHistoryV1FriendMatchlistsByAccountIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolMatchHistoryV1FriendMatchlistsByAccountIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolMatchHistoryV1FriendMatchlistsByAccountId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolMatchHistoryV1GameTimelinesByGameID get lol match history v1 game timelines by game Id API
*/
func (a *Client) GetLolMatchHistoryV1GameTimelinesByGameID(params *GetLolMatchHistoryV1GameTimelinesByGameIDParams) (*GetLolMatchHistoryV1GameTimelinesByGameIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolMatchHistoryV1GameTimelinesByGameIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolMatchHistoryV1GameTimelinesByGameId",
		Method:             "GET",
		PathPattern:        "/lol-match-history/v1/game-timelines/{gameId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolMatchHistoryV1GameTimelinesByGameIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolMatchHistoryV1GameTimelinesByGameIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolMatchHistoryV1GameTimelinesByGameId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolMatchHistoryV1GamesByGameID get lol match history v1 games by game Id API
*/
func (a *Client) GetLolMatchHistoryV1GamesByGameID(params *GetLolMatchHistoryV1GamesByGameIDParams) (*GetLolMatchHistoryV1GamesByGameIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolMatchHistoryV1GamesByGameIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolMatchHistoryV1GamesByGameId",
		Method:             "GET",
		PathPattern:        "/lol-match-history/v1/games/{gameId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolMatchHistoryV1GamesByGameIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolMatchHistoryV1GamesByGameIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolMatchHistoryV1GamesByGameId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolMatchHistoryV1Matchlist get lol match history v1 matchlist API
*/
func (a *Client) GetLolMatchHistoryV1Matchlist(params *GetLolMatchHistoryV1MatchlistParams) (*GetLolMatchHistoryV1MatchlistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolMatchHistoryV1MatchlistParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolMatchHistoryV1Matchlist",
		Method:             "GET",
		PathPattern:        "/lol-match-history/v1/matchlist",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolMatchHistoryV1MatchlistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolMatchHistoryV1MatchlistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolMatchHistoryV1Matchlist: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolMatchHistoryV1RecentlyPlayedSummoners get lol match history v1 recently played summoners API
*/
func (a *Client) GetLolMatchHistoryV1RecentlyPlayedSummoners(params *GetLolMatchHistoryV1RecentlyPlayedSummonersParams) (*GetLolMatchHistoryV1RecentlyPlayedSummonersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolMatchHistoryV1RecentlyPlayedSummonersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolMatchHistoryV1RecentlyPlayedSummoners",
		Method:             "GET",
		PathPattern:        "/lol-match-history/v1/recently-played-summoners",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolMatchHistoryV1RecentlyPlayedSummonersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolMatchHistoryV1RecentlyPlayedSummonersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolMatchHistoryV1RecentlyPlayedSummoners: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolMatchHistoryV1WebURL get lol match history v1 web Url API
*/
func (a *Client) GetLolMatchHistoryV1WebURL(params *GetLolMatchHistoryV1WebURLParams) (*GetLolMatchHistoryV1WebURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolMatchHistoryV1WebURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolMatchHistoryV1WebUrl",
		Method:             "GET",
		PathPattern:        "/lol-match-history/v1/web-url",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolMatchHistoryV1WebURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolMatchHistoryV1WebURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolMatchHistoryV1WebUrl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolMatchHistoryV2Matchlist get lol match history v2 matchlist API
*/
func (a *Client) GetLolMatchHistoryV2Matchlist(params *GetLolMatchHistoryV2MatchlistParams) (*GetLolMatchHistoryV2MatchlistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolMatchHistoryV2MatchlistParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolMatchHistoryV2Matchlist",
		Method:             "GET",
		PathPattern:        "/lol-match-history/v2/matchlist",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolMatchHistoryV2MatchlistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolMatchHistoryV2MatchlistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolMatchHistoryV2Matchlist: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolMatchmakingV1ReadyCheck get lol matchmaking v1 ready check API
*/
func (a *Client) GetLolMatchmakingV1ReadyCheck(params *GetLolMatchmakingV1ReadyCheckParams) (*GetLolMatchmakingV1ReadyCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolMatchmakingV1ReadyCheckParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolMatchmakingV1ReadyCheck",
		Method:             "GET",
		PathPattern:        "/lol-matchmaking/v1/ready-check",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolMatchmakingV1ReadyCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolMatchmakingV1ReadyCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolMatchmakingV1ReadyCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolMatchmakingV1Search get lol matchmaking v1 search API
*/
func (a *Client) GetLolMatchmakingV1Search(params *GetLolMatchmakingV1SearchParams) (*GetLolMatchmakingV1SearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolMatchmakingV1SearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolMatchmakingV1Search",
		Method:             "GET",
		PathPattern:        "/lol-matchmaking/v1/search",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolMatchmakingV1SearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolMatchmakingV1SearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolMatchmakingV1Search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolMatchmakingV1SearchErrors get lol matchmaking v1 search errors API
*/
func (a *Client) GetLolMatchmakingV1SearchErrors(params *GetLolMatchmakingV1SearchErrorsParams) (*GetLolMatchmakingV1SearchErrorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolMatchmakingV1SearchErrorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolMatchmakingV1SearchErrors",
		Method:             "GET",
		PathPattern:        "/lol-matchmaking/v1/search/errors",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolMatchmakingV1SearchErrorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolMatchmakingV1SearchErrorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolMatchmakingV1SearchErrors: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolMatchmakingV1SearchErrorsByID get lol matchmaking v1 search errors by Id API
*/
func (a *Client) GetLolMatchmakingV1SearchErrorsByID(params *GetLolMatchmakingV1SearchErrorsByIDParams) (*GetLolMatchmakingV1SearchErrorsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolMatchmakingV1SearchErrorsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolMatchmakingV1SearchErrorsById",
		Method:             "GET",
		PathPattern:        "/lol-matchmaking/v1/search/errors/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolMatchmakingV1SearchErrorsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolMatchmakingV1SearchErrorsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolMatchmakingV1SearchErrorsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolMissionsV1Data get lol missions v1 data API
*/
func (a *Client) GetLolMissionsV1Data(params *GetLolMissionsV1DataParams) (*GetLolMissionsV1DataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolMissionsV1DataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolMissionsV1Data",
		Method:             "GET",
		PathPattern:        "/lol-missions/v1/data",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolMissionsV1DataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolMissionsV1DataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolMissionsV1Data: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolMissionsV1Missions get lol missions v1 missions API
*/
func (a *Client) GetLolMissionsV1Missions(params *GetLolMissionsV1MissionsParams) (*GetLolMissionsV1MissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolMissionsV1MissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolMissionsV1Missions",
		Method:             "GET",
		PathPattern:        "/lol-missions/v1/missions",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolMissionsV1MissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolMissionsV1MissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolMissionsV1Missions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolMissionsV1Series get lol missions v1 series API
*/
func (a *Client) GetLolMissionsV1Series(params *GetLolMissionsV1SeriesParams) (*GetLolMissionsV1SeriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolMissionsV1SeriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolMissionsV1Series",
		Method:             "GET",
		PathPattern:        "/lol-missions/v1/series",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolMissionsV1SeriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolMissionsV1SeriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolMissionsV1Series: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolNpeRewardsV1ChallengesProgress get lol npe rewards v1 challenges progress API
*/
func (a *Client) GetLolNpeRewardsV1ChallengesProgress(params *GetLolNpeRewardsV1ChallengesProgressParams) (*GetLolNpeRewardsV1ChallengesProgressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolNpeRewardsV1ChallengesProgressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolNpeRewardsV1ChallengesProgress",
		Method:             "GET",
		PathPattern:        "/lol-npe-rewards/v1/challenges/progress",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolNpeRewardsV1ChallengesProgressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolNpeRewardsV1ChallengesProgressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolNpeRewardsV1ChallengesProgress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolNpeRewardsV1LevelRewards get lol npe rewards v1 level rewards API
*/
func (a *Client) GetLolNpeRewardsV1LevelRewards(params *GetLolNpeRewardsV1LevelRewardsParams) (*GetLolNpeRewardsV1LevelRewardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolNpeRewardsV1LevelRewardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolNpeRewardsV1LevelRewards",
		Method:             "GET",
		PathPattern:        "/lol-npe-rewards/v1/level-rewards",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolNpeRewardsV1LevelRewardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolNpeRewardsV1LevelRewardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolNpeRewardsV1LevelRewards: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolNpeRewardsV1LevelRewardsState get lol npe rewards v1 level rewards state API
*/
func (a *Client) GetLolNpeRewardsV1LevelRewardsState(params *GetLolNpeRewardsV1LevelRewardsStateParams) (*GetLolNpeRewardsV1LevelRewardsStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolNpeRewardsV1LevelRewardsStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolNpeRewardsV1LevelRewardsState",
		Method:             "GET",
		PathPattern:        "/lol-npe-rewards/v1/level-rewards/state",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolNpeRewardsV1LevelRewardsStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolNpeRewardsV1LevelRewardsStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolNpeRewardsV1LevelRewardsState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolNpeRewardsV1LoginRewards get lol npe rewards v1 login rewards API
*/
func (a *Client) GetLolNpeRewardsV1LoginRewards(params *GetLolNpeRewardsV1LoginRewardsParams) (*GetLolNpeRewardsV1LoginRewardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolNpeRewardsV1LoginRewardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolNpeRewardsV1LoginRewards",
		Method:             "GET",
		PathPattern:        "/lol-npe-rewards/v1/login-rewards",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolNpeRewardsV1LoginRewardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolNpeRewardsV1LoginRewardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolNpeRewardsV1LoginRewards: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolNpeRewardsV1LoginRewardsState get lol npe rewards v1 login rewards state API
*/
func (a *Client) GetLolNpeRewardsV1LoginRewardsState(params *GetLolNpeRewardsV1LoginRewardsStateParams) (*GetLolNpeRewardsV1LoginRewardsStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolNpeRewardsV1LoginRewardsStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolNpeRewardsV1LoginRewardsState",
		Method:             "GET",
		PathPattern:        "/lol-npe-rewards/v1/login-rewards/state",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolNpeRewardsV1LoginRewardsStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolNpeRewardsV1LoginRewardsStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolNpeRewardsV1LoginRewardsState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolNpeTutorialPathV1RewardsChamp get lol npe tutorial path v1 rewards champ API
*/
func (a *Client) GetLolNpeTutorialPathV1RewardsChamp(params *GetLolNpeTutorialPathV1RewardsChampParams) (*GetLolNpeTutorialPathV1RewardsChampOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolNpeTutorialPathV1RewardsChampParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolNpeTutorialPathV1RewardsChamp",
		Method:             "GET",
		PathPattern:        "/lol-npe-tutorial-path/v1/rewards/champ",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolNpeTutorialPathV1RewardsChampReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolNpeTutorialPathV1RewardsChampOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolNpeTutorialPathV1RewardsChamp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolNpeTutorialPathV1Settings get lol npe tutorial path v1 settings API
*/
func (a *Client) GetLolNpeTutorialPathV1Settings(params *GetLolNpeTutorialPathV1SettingsParams) (*GetLolNpeTutorialPathV1SettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolNpeTutorialPathV1SettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolNpeTutorialPathV1Settings",
		Method:             "GET",
		PathPattern:        "/lol-npe-tutorial-path/v1/settings",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolNpeTutorialPathV1SettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolNpeTutorialPathV1SettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolNpeTutorialPathV1Settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolNpeTutorialPathV1Tutorials get lol npe tutorial path v1 tutorials API
*/
func (a *Client) GetLolNpeTutorialPathV1Tutorials(params *GetLolNpeTutorialPathV1TutorialsParams) (*GetLolNpeTutorialPathV1TutorialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolNpeTutorialPathV1TutorialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolNpeTutorialPathV1Tutorials",
		Method:             "GET",
		PathPattern:        "/lol-npe-tutorial-path/v1/tutorials",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolNpeTutorialPathV1TutorialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolNpeTutorialPathV1TutorialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolNpeTutorialPathV1Tutorials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPatchV1Environment get lol patch v1 environment API
*/
func (a *Client) GetLolPatchV1Environment(params *GetLolPatchV1EnvironmentParams) (*GetLolPatchV1EnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPatchV1EnvironmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPatchV1Environment",
		Method:             "GET",
		PathPattern:        "/lol-patch/v1/environment",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPatchV1EnvironmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPatchV1EnvironmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPatchV1Environment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPatchV1GameVersion get lol patch v1 game version API
*/
func (a *Client) GetLolPatchV1GameVersion(params *GetLolPatchV1GameVersionParams) (*GetLolPatchV1GameVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPatchV1GameVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPatchV1GameVersion",
		Method:             "GET",
		PathPattern:        "/lol-patch/v1/game-version",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPatchV1GameVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPatchV1GameVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPatchV1GameVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPatchV1Notifications get lol patch v1 notifications API
*/
func (a *Client) GetLolPatchV1Notifications(params *GetLolPatchV1NotificationsParams) (*GetLolPatchV1NotificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPatchV1NotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPatchV1Notifications",
		Method:             "GET",
		PathPattern:        "/lol-patch/v1/notifications",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPatchV1NotificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPatchV1NotificationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPatchV1Notifications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPatchV1ProductsLeagueOfLegendsInstallLocation get lol patch v1 products league of legends install location API
*/
func (a *Client) GetLolPatchV1ProductsLeagueOfLegendsInstallLocation(params *GetLolPatchV1ProductsLeagueOfLegendsInstallLocationParams) (*GetLolPatchV1ProductsLeagueOfLegendsInstallLocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPatchV1ProductsLeagueOfLegendsInstallLocationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPatchV1ProductsLeagueOfLegendsInstallLocation",
		Method:             "GET",
		PathPattern:        "/lol-patch/v1/products/league_of_legends/install-location",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPatchV1ProductsLeagueOfLegendsInstallLocationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPatchV1ProductsLeagueOfLegendsInstallLocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPatchV1ProductsLeagueOfLegendsInstallLocation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPatchV1ProductsLeagueOfLegendsState get lol patch v1 products league of legends state API
*/
func (a *Client) GetLolPatchV1ProductsLeagueOfLegendsState(params *GetLolPatchV1ProductsLeagueOfLegendsStateParams) (*GetLolPatchV1ProductsLeagueOfLegendsStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPatchV1ProductsLeagueOfLegendsStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPatchV1ProductsLeagueOfLegendsState",
		Method:             "GET",
		PathPattern:        "/lol-patch/v1/products/league_of_legends/state",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPatchV1ProductsLeagueOfLegendsStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPatchV1ProductsLeagueOfLegendsStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPatchV1ProductsLeagueOfLegendsState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPatchV1Status get lol patch v1 status API
*/
func (a *Client) GetLolPatchV1Status(params *GetLolPatchV1StatusParams) (*GetLolPatchV1StatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPatchV1StatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPatchV1Status",
		Method:             "GET",
		PathPattern:        "/lol-patch/v1/status",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPatchV1StatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPatchV1StatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPatchV1Status: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPerksV1Currentpage get lol perks v1 currentpage API
*/
func (a *Client) GetLolPerksV1Currentpage(params *GetLolPerksV1CurrentpageParams) (*GetLolPerksV1CurrentpageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPerksV1CurrentpageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPerksV1Currentpage",
		Method:             "GET",
		PathPattern:        "/lol-perks/v1/currentpage",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPerksV1CurrentpageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPerksV1CurrentpageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPerksV1Currentpage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPerksV1Customizationlimits get lol perks v1 customizationlimits API
*/
func (a *Client) GetLolPerksV1Customizationlimits(params *GetLolPerksV1CustomizationlimitsParams) (*GetLolPerksV1CustomizationlimitsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPerksV1CustomizationlimitsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPerksV1Customizationlimits",
		Method:             "GET",
		PathPattern:        "/lol-perks/v1/customizationlimits",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPerksV1CustomizationlimitsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPerksV1CustomizationlimitsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPerksV1Customizationlimits: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPerksV1Inventory get lol perks v1 inventory API
*/
func (a *Client) GetLolPerksV1Inventory(params *GetLolPerksV1InventoryParams) (*GetLolPerksV1InventoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPerksV1InventoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPerksV1Inventory",
		Method:             "GET",
		PathPattern:        "/lol-perks/v1/inventory",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPerksV1InventoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPerksV1InventoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPerksV1Inventory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPerksV1Pages get lol perks v1 pages API
*/
func (a *Client) GetLolPerksV1Pages(params *GetLolPerksV1PagesParams) (*GetLolPerksV1PagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPerksV1PagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPerksV1Pages",
		Method:             "GET",
		PathPattern:        "/lol-perks/v1/pages",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPerksV1PagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPerksV1PagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPerksV1Pages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPerksV1PagesByID get lol perks v1 pages by Id API
*/
func (a *Client) GetLolPerksV1PagesByID(params *GetLolPerksV1PagesByIDParams) (*GetLolPerksV1PagesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPerksV1PagesByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPerksV1PagesById",
		Method:             "GET",
		PathPattern:        "/lol-perks/v1/pages/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPerksV1PagesByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPerksV1PagesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPerksV1PagesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPerksV1Perks get lol perks v1 perks API
*/
func (a *Client) GetLolPerksV1Perks(params *GetLolPerksV1PerksParams) (*GetLolPerksV1PerksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPerksV1PerksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPerksV1Perks",
		Method:             "GET",
		PathPattern:        "/lol-perks/v1/perks",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPerksV1PerksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPerksV1PerksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPerksV1Perks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPerksV1PerksDisabled get lol perks v1 perks disabled API
*/
func (a *Client) GetLolPerksV1PerksDisabled(params *GetLolPerksV1PerksDisabledParams) (*GetLolPerksV1PerksDisabledOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPerksV1PerksDisabledParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPerksV1PerksDisabled",
		Method:             "GET",
		PathPattern:        "/lol-perks/v1/perks/disabled",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPerksV1PerksDisabledReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPerksV1PerksDisabledOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPerksV1PerksDisabled: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPerksV1PerksGameplayUpdated get lol perks v1 perks gameplay updated API
*/
func (a *Client) GetLolPerksV1PerksGameplayUpdated(params *GetLolPerksV1PerksGameplayUpdatedParams) (*GetLolPerksV1PerksGameplayUpdatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPerksV1PerksGameplayUpdatedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPerksV1PerksGameplayUpdated",
		Method:             "GET",
		PathPattern:        "/lol-perks/v1/perks/gameplay-updated",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPerksV1PerksGameplayUpdatedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPerksV1PerksGameplayUpdatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPerksV1PerksGameplayUpdated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPerksV1SchemaVersion get lol perks v1 schema version API
*/
func (a *Client) GetLolPerksV1SchemaVersion(params *GetLolPerksV1SchemaVersionParams) (*GetLolPerksV1SchemaVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPerksV1SchemaVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPerksV1SchemaVersion",
		Method:             "GET",
		PathPattern:        "/lol-perks/v1/schema-version",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPerksV1SchemaVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPerksV1SchemaVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPerksV1SchemaVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPerksV1Servicesettings get lol perks v1 servicesettings API
*/
func (a *Client) GetLolPerksV1Servicesettings(params *GetLolPerksV1ServicesettingsParams) (*GetLolPerksV1ServicesettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPerksV1ServicesettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPerksV1Servicesettings",
		Method:             "GET",
		PathPattern:        "/lol-perks/v1/servicesettings",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPerksV1ServicesettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPerksV1ServicesettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPerksV1Servicesettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPerksV1Settings get lol perks v1 settings API
*/
func (a *Client) GetLolPerksV1Settings(params *GetLolPerksV1SettingsParams) (*GetLolPerksV1SettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPerksV1SettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPerksV1Settings",
		Method:             "GET",
		PathPattern:        "/lol-perks/v1/settings",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPerksV1SettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPerksV1SettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPerksV1Settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPerksV1ShowAutoModifiedPagesNotification get lol perks v1 show auto modified pages notification API
*/
func (a *Client) GetLolPerksV1ShowAutoModifiedPagesNotification(params *GetLolPerksV1ShowAutoModifiedPagesNotificationParams) (*GetLolPerksV1ShowAutoModifiedPagesNotificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPerksV1ShowAutoModifiedPagesNotificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPerksV1ShowAutoModifiedPagesNotification",
		Method:             "GET",
		PathPattern:        "/lol-perks/v1/show-auto-modified-pages-notification",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPerksV1ShowAutoModifiedPagesNotificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPerksV1ShowAutoModifiedPagesNotificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPerksV1ShowAutoModifiedPagesNotification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPerksV1Styles get lol perks v1 styles API
*/
func (a *Client) GetLolPerksV1Styles(params *GetLolPerksV1StylesParams) (*GetLolPerksV1StylesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPerksV1StylesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPerksV1Styles",
		Method:             "GET",
		PathPattern:        "/lol-perks/v1/styles",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPerksV1StylesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPerksV1StylesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPerksV1Styles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPersonalizedOffersV1Offers get lol personalized offers v1 offers API
*/
func (a *Client) GetLolPersonalizedOffersV1Offers(params *GetLolPersonalizedOffersV1OffersParams) (*GetLolPersonalizedOffersV1OffersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPersonalizedOffersV1OffersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPersonalizedOffersV1Offers",
		Method:             "GET",
		PathPattern:        "/lol-personalized-offers/v1/offers",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPersonalizedOffersV1OffersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPersonalizedOffersV1OffersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPersonalizedOffersV1Offers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPersonalizedOffersV1Status get lol personalized offers v1 status API
*/
func (a *Client) GetLolPersonalizedOffersV1Status(params *GetLolPersonalizedOffersV1StatusParams) (*GetLolPersonalizedOffersV1StatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPersonalizedOffersV1StatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPersonalizedOffersV1Status",
		Method:             "GET",
		PathPattern:        "/lol-personalized-offers/v1/status",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPersonalizedOffersV1StatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPersonalizedOffersV1StatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPersonalizedOffersV1Status: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPersonalizedOffersV1Themed get lol personalized offers v1 themed API
*/
func (a *Client) GetLolPersonalizedOffersV1Themed(params *GetLolPersonalizedOffersV1ThemedParams) (*GetLolPersonalizedOffersV1ThemedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPersonalizedOffersV1ThemedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPersonalizedOffersV1Themed",
		Method:             "GET",
		PathPattern:        "/lol-personalized-offers/v1/themed",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPersonalizedOffersV1ThemedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPersonalizedOffersV1ThemedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPersonalizedOffersV1Themed: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPftV2Survey get lol pft v2 survey API
*/
func (a *Client) GetLolPftV2Survey(params *GetLolPftV2SurveyParams) (*GetLolPftV2SurveyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPftV2SurveyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPftV2Survey",
		Method:             "GET",
		PathPattern:        "/lol-pft/v2/survey",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPftV2SurveyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPftV2SurveyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPftV2Survey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPlatformConfigV1InitialConfigurationComplete get lol platform config v1 initial configuration complete API
*/
func (a *Client) GetLolPlatformConfigV1InitialConfigurationComplete(params *GetLolPlatformConfigV1InitialConfigurationCompleteParams) (*GetLolPlatformConfigV1InitialConfigurationCompleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPlatformConfigV1InitialConfigurationCompleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPlatformConfigV1InitialConfigurationComplete",
		Method:             "GET",
		PathPattern:        "/lol-platform-config/v1/initial-configuration-complete",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPlatformConfigV1InitialConfigurationCompleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPlatformConfigV1InitialConfigurationCompleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPlatformConfigV1InitialConfigurationComplete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPlatformConfigV1Namespaces get lol platform config v1 namespaces API
*/
func (a *Client) GetLolPlatformConfigV1Namespaces(params *GetLolPlatformConfigV1NamespacesParams) (*GetLolPlatformConfigV1NamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPlatformConfigV1NamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPlatformConfigV1Namespaces",
		Method:             "GET",
		PathPattern:        "/lol-platform-config/v1/namespaces",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPlatformConfigV1NamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPlatformConfigV1NamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPlatformConfigV1Namespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPlatformConfigV1NamespacesByNs get lol platform config v1 namespaces by ns API
*/
func (a *Client) GetLolPlatformConfigV1NamespacesByNs(params *GetLolPlatformConfigV1NamespacesByNsParams) (*GetLolPlatformConfigV1NamespacesByNsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPlatformConfigV1NamespacesByNsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPlatformConfigV1NamespacesByNs",
		Method:             "GET",
		PathPattern:        "/lol-platform-config/v1/namespaces/{ns}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPlatformConfigV1NamespacesByNsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPlatformConfigV1NamespacesByNsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPlatformConfigV1NamespacesByNs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPlatformConfigV1NamespacesByNsByKey get lol platform config v1 namespaces by ns by key API
*/
func (a *Client) GetLolPlatformConfigV1NamespacesByNsByKey(params *GetLolPlatformConfigV1NamespacesByNsByKeyParams) (*GetLolPlatformConfigV1NamespacesByNsByKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPlatformConfigV1NamespacesByNsByKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPlatformConfigV1NamespacesByNsByKey",
		Method:             "GET",
		PathPattern:        "/lol-platform-config/v1/namespaces/{ns}/{key}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPlatformConfigV1NamespacesByNsByKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPlatformConfigV1NamespacesByNsByKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPlatformConfigV1NamespacesByNsByKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPlayerBehaviorV1Ban get lol player behavior v1 ban API
*/
func (a *Client) GetLolPlayerBehaviorV1Ban(params *GetLolPlayerBehaviorV1BanParams) (*GetLolPlayerBehaviorV1BanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPlayerBehaviorV1BanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPlayerBehaviorV1Ban",
		Method:             "GET",
		PathPattern:        "/lol-player-behavior/v1/ban",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPlayerBehaviorV1BanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPlayerBehaviorV1BanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPlayerBehaviorV1Ban: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPlayerBehaviorV1ChatRestriction get lol player behavior v1 chat restriction API
*/
func (a *Client) GetLolPlayerBehaviorV1ChatRestriction(params *GetLolPlayerBehaviorV1ChatRestrictionParams) (*GetLolPlayerBehaviorV1ChatRestrictionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPlayerBehaviorV1ChatRestrictionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPlayerBehaviorV1ChatRestriction",
		Method:             "GET",
		PathPattern:        "/lol-player-behavior/v1/chat-restriction",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPlayerBehaviorV1ChatRestrictionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPlayerBehaviorV1ChatRestrictionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPlayerBehaviorV1ChatRestriction: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPlayerBehaviorV1Config get lol player behavior v1 config API
*/
func (a *Client) GetLolPlayerBehaviorV1Config(params *GetLolPlayerBehaviorV1ConfigParams) (*GetLolPlayerBehaviorV1ConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPlayerBehaviorV1ConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPlayerBehaviorV1Config",
		Method:             "GET",
		PathPattern:        "/lol-player-behavior/v1/config",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPlayerBehaviorV1ConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPlayerBehaviorV1ConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPlayerBehaviorV1Config: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPlayerBehaviorV1RankedRestriction get lol player behavior v1 ranked restriction API
*/
func (a *Client) GetLolPlayerBehaviorV1RankedRestriction(params *GetLolPlayerBehaviorV1RankedRestrictionParams) (*GetLolPlayerBehaviorV1RankedRestrictionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPlayerBehaviorV1RankedRestrictionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPlayerBehaviorV1RankedRestriction",
		Method:             "GET",
		PathPattern:        "/lol-player-behavior/v1/ranked-restriction",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPlayerBehaviorV1RankedRestrictionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPlayerBehaviorV1RankedRestrictionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPlayerBehaviorV1RankedRestriction: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPlayerBehaviorV1ReformCard get lol player behavior v1 reform card API
*/
func (a *Client) GetLolPlayerBehaviorV1ReformCard(params *GetLolPlayerBehaviorV1ReformCardParams) (*GetLolPlayerBehaviorV1ReformCardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPlayerBehaviorV1ReformCardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPlayerBehaviorV1ReformCard",
		Method:             "GET",
		PathPattern:        "/lol-player-behavior/v1/reform-card",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPlayerBehaviorV1ReformCardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPlayerBehaviorV1ReformCardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPlayerBehaviorV1ReformCard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPlayerBehaviorV1ReporterFeedback get lol player behavior v1 reporter feedback API
*/
func (a *Client) GetLolPlayerBehaviorV1ReporterFeedback(params *GetLolPlayerBehaviorV1ReporterFeedbackParams) (*GetLolPlayerBehaviorV1ReporterFeedbackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPlayerBehaviorV1ReporterFeedbackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPlayerBehaviorV1ReporterFeedback",
		Method:             "GET",
		PathPattern:        "/lol-player-behavior/v1/reporter-feedback",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPlayerBehaviorV1ReporterFeedbackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPlayerBehaviorV1ReporterFeedbackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPlayerBehaviorV1ReporterFeedback: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPlayerBehaviorV1ReporterFeedbackByID get lol player behavior v1 reporter feedback by Id API
*/
func (a *Client) GetLolPlayerBehaviorV1ReporterFeedbackByID(params *GetLolPlayerBehaviorV1ReporterFeedbackByIDParams) (*GetLolPlayerBehaviorV1ReporterFeedbackByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPlayerBehaviorV1ReporterFeedbackByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPlayerBehaviorV1ReporterFeedbackById",
		Method:             "GET",
		PathPattern:        "/lol-player-behavior/v1/reporter-feedback/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPlayerBehaviorV1ReporterFeedbackByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPlayerBehaviorV1ReporterFeedbackByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPlayerBehaviorV1ReporterFeedbackById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPlayerBehaviorV2ReformCard get lol player behavior v2 reform card API
*/
func (a *Client) GetLolPlayerBehaviorV2ReformCard(params *GetLolPlayerBehaviorV2ReformCardParams) (*GetLolPlayerBehaviorV2ReformCardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPlayerBehaviorV2ReformCardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPlayerBehaviorV2ReformCard",
		Method:             "GET",
		PathPattern:        "/lol-player-behavior/v2/reform-card",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPlayerBehaviorV2ReformCardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPlayerBehaviorV2ReformCardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPlayerBehaviorV2ReformCard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPlayerLevelUpV1LevelUp get lol player level up v1 level up API
*/
func (a *Client) GetLolPlayerLevelUpV1LevelUp(params *GetLolPlayerLevelUpV1LevelUpParams) (*GetLolPlayerLevelUpV1LevelUpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPlayerLevelUpV1LevelUpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPlayerLevelUpV1LevelUp",
		Method:             "GET",
		PathPattern:        "/lol-player-level-up/v1/level-up",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPlayerLevelUpV1LevelUpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPlayerLevelUpV1LevelUpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPlayerLevelUpV1LevelUp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPlayerLevelUpV1LevelUpNotificationsByPluginName get lol player level up v1 level up notifications by plugin name API
*/
func (a *Client) GetLolPlayerLevelUpV1LevelUpNotificationsByPluginName(params *GetLolPlayerLevelUpV1LevelUpNotificationsByPluginNameParams) (*GetLolPlayerLevelUpV1LevelUpNotificationsByPluginNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPlayerLevelUpV1LevelUpNotificationsByPluginNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPlayerLevelUpV1LevelUpNotificationsByPluginName",
		Method:             "GET",
		PathPattern:        "/lol-player-level-up/v1/level-up-notifications/{pluginName}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPlayerLevelUpV1LevelUpNotificationsByPluginNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPlayerLevelUpV1LevelUpNotificationsByPluginNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPlayerLevelUpV1LevelUpNotificationsByPluginName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPlayerMessagingV1CelebrationNotification get lol player messaging v1 celebration notification API
*/
func (a *Client) GetLolPlayerMessagingV1CelebrationNotification(params *GetLolPlayerMessagingV1CelebrationNotificationParams) (*GetLolPlayerMessagingV1CelebrationNotificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPlayerMessagingV1CelebrationNotificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPlayerMessagingV1CelebrationNotification",
		Method:             "GET",
		PathPattern:        "/lol-player-messaging/v1/celebration/notification",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPlayerMessagingV1CelebrationNotificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPlayerMessagingV1CelebrationNotificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPlayerMessagingV1CelebrationNotification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPlayerMessagingV1Notification get lol player messaging v1 notification API
*/
func (a *Client) GetLolPlayerMessagingV1Notification(params *GetLolPlayerMessagingV1NotificationParams) (*GetLolPlayerMessagingV1NotificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPlayerMessagingV1NotificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPlayerMessagingV1Notification",
		Method:             "GET",
		PathPattern:        "/lol-player-messaging/v1/notification",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPlayerMessagingV1NotificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPlayerMessagingV1NotificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPlayerMessagingV1Notification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPlayerPreferencesV1PlayerPreferencesReady get lol player preferences v1 player preferences ready API
*/
func (a *Client) GetLolPlayerPreferencesV1PlayerPreferencesReady(params *GetLolPlayerPreferencesV1PlayerPreferencesReadyParams) (*GetLolPlayerPreferencesV1PlayerPreferencesReadyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPlayerPreferencesV1PlayerPreferencesReadyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPlayerPreferencesV1PlayerPreferencesReady",
		Method:             "GET",
		PathPattern:        "/lol-player-preferences/v1/player-preferences-ready",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPlayerPreferencesV1PlayerPreferencesReadyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPlayerPreferencesV1PlayerPreferencesReadyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPlayerPreferencesV1PlayerPreferencesReady: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPlayerPreferencesV1PreferenceByType get lol player preferences v1 preference by type API
*/
func (a *Client) GetLolPlayerPreferencesV1PreferenceByType(params *GetLolPlayerPreferencesV1PreferenceByTypeParams) (*GetLolPlayerPreferencesV1PreferenceByTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPlayerPreferencesV1PreferenceByTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPlayerPreferencesV1PreferenceByType",
		Method:             "GET",
		PathPattern:        "/lol-player-preferences/v1/preference/{type}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPlayerPreferencesV1PreferenceByTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPlayerPreferencesV1PreferenceByTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPlayerPreferencesV1PreferenceByType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPreEndOfGameV1CurrentSequenceEvent get lol pre end of game v1 current sequence event API
*/
func (a *Client) GetLolPreEndOfGameV1CurrentSequenceEvent(params *GetLolPreEndOfGameV1CurrentSequenceEventParams) (*GetLolPreEndOfGameV1CurrentSequenceEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPreEndOfGameV1CurrentSequenceEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPreEndOfGameV1CurrentSequenceEvent",
		Method:             "GET",
		PathPattern:        "/lol-pre-end-of-game/v1/currentSequenceEvent",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPreEndOfGameV1CurrentSequenceEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPreEndOfGameV1CurrentSequenceEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPreEndOfGameV1CurrentSequenceEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPremadeVoiceV1Availability get lol premade voice v1 availability API
*/
func (a *Client) GetLolPremadeVoiceV1Availability(params *GetLolPremadeVoiceV1AvailabilityParams) (*GetLolPremadeVoiceV1AvailabilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPremadeVoiceV1AvailabilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPremadeVoiceV1Availability",
		Method:             "GET",
		PathPattern:        "/lol-premade-voice/v1/availability",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPremadeVoiceV1AvailabilityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPremadeVoiceV1AvailabilityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPremadeVoiceV1Availability: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPremadeVoiceV1Capturedevices get lol premade voice v1 capturedevices API
*/
func (a *Client) GetLolPremadeVoiceV1Capturedevices(params *GetLolPremadeVoiceV1CapturedevicesParams) (*GetLolPremadeVoiceV1CapturedevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPremadeVoiceV1CapturedevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPremadeVoiceV1Capturedevices",
		Method:             "GET",
		PathPattern:        "/lol-premade-voice/v1/capturedevices",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPremadeVoiceV1CapturedevicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPremadeVoiceV1CapturedevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPremadeVoiceV1Capturedevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPremadeVoiceV1FirstExperience get lol premade voice v1 first experience API
*/
func (a *Client) GetLolPremadeVoiceV1FirstExperience(params *GetLolPremadeVoiceV1FirstExperienceParams) (*GetLolPremadeVoiceV1FirstExperienceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPremadeVoiceV1FirstExperienceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPremadeVoiceV1FirstExperience",
		Method:             "GET",
		PathPattern:        "/lol-premade-voice/v1/first-experience",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPremadeVoiceV1FirstExperienceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPremadeVoiceV1FirstExperienceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPremadeVoiceV1FirstExperience: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPremadeVoiceV1MicTest get lol premade voice v1 mic test API
*/
func (a *Client) GetLolPremadeVoiceV1MicTest(params *GetLolPremadeVoiceV1MicTestParams) (*GetLolPremadeVoiceV1MicTestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPremadeVoiceV1MicTestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPremadeVoiceV1MicTest",
		Method:             "GET",
		PathPattern:        "/lol-premade-voice/v1/mic-test",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPremadeVoiceV1MicTestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPremadeVoiceV1MicTestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPremadeVoiceV1MicTest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPremadeVoiceV1ParticipantRecords get lol premade voice v1 participant records API
*/
func (a *Client) GetLolPremadeVoiceV1ParticipantRecords(params *GetLolPremadeVoiceV1ParticipantRecordsParams) (*GetLolPremadeVoiceV1ParticipantRecordsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPremadeVoiceV1ParticipantRecordsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPremadeVoiceV1ParticipantRecords",
		Method:             "GET",
		PathPattern:        "/lol-premade-voice/v1/participant-records",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPremadeVoiceV1ParticipantRecordsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPremadeVoiceV1ParticipantRecordsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPremadeVoiceV1ParticipantRecords: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPremadeVoiceV1Participants get lol premade voice v1 participants API
*/
func (a *Client) GetLolPremadeVoiceV1Participants(params *GetLolPremadeVoiceV1ParticipantsParams) (*GetLolPremadeVoiceV1ParticipantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPremadeVoiceV1ParticipantsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPremadeVoiceV1Participants",
		Method:             "GET",
		PathPattern:        "/lol-premade-voice/v1/participants",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPremadeVoiceV1ParticipantsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPremadeVoiceV1ParticipantsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPremadeVoiceV1Participants: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPremadeVoiceV1Settings get lol premade voice v1 settings API
*/
func (a *Client) GetLolPremadeVoiceV1Settings(params *GetLolPremadeVoiceV1SettingsParams) (*GetLolPremadeVoiceV1SettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPremadeVoiceV1SettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPremadeVoiceV1Settings",
		Method:             "GET",
		PathPattern:        "/lol-premade-voice/v1/settings",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPremadeVoiceV1SettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPremadeVoiceV1SettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPremadeVoiceV1Settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPurchaseWidgetV1Configuration get lol purchase widget v1 configuration API
*/
func (a *Client) GetLolPurchaseWidgetV1Configuration(params *GetLolPurchaseWidgetV1ConfigurationParams) (*GetLolPurchaseWidgetV1ConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPurchaseWidgetV1ConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPurchaseWidgetV1Configuration",
		Method:             "GET",
		PathPattern:        "/lol-purchase-widget/v1/configuration",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPurchaseWidgetV1ConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPurchaseWidgetV1ConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPurchaseWidgetV1Configuration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPurchaseWidgetV1OrderNotifications get lol purchase widget v1 order notifications API
*/
func (a *Client) GetLolPurchaseWidgetV1OrderNotifications(params *GetLolPurchaseWidgetV1OrderNotificationsParams) (*GetLolPurchaseWidgetV1OrderNotificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPurchaseWidgetV1OrderNotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPurchaseWidgetV1OrderNotifications",
		Method:             "GET",
		PathPattern:        "/lol-purchase-widget/v1/order-notifications",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPurchaseWidgetV1OrderNotificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPurchaseWidgetV1OrderNotificationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPurchaseWidgetV1OrderNotifications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolPurchaseWidgetV1PurchasableItem get lol purchase widget v1 purchasable item API
*/
func (a *Client) GetLolPurchaseWidgetV1PurchasableItem(params *GetLolPurchaseWidgetV1PurchasableItemParams) (*GetLolPurchaseWidgetV1PurchasableItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolPurchaseWidgetV1PurchasableItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolPurchaseWidgetV1PurchasableItem",
		Method:             "GET",
		PathPattern:        "/lol-purchase-widget/v1/purchasable-item",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolPurchaseWidgetV1PurchasableItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolPurchaseWidgetV1PurchasableItemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolPurchaseWidgetV1PurchasableItem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolQueueEligibilityV1InitialConfigurationComplete get lol queue eligibility v1 initial configuration complete API
*/
func (a *Client) GetLolQueueEligibilityV1InitialConfigurationComplete(params *GetLolQueueEligibilityV1InitialConfigurationCompleteParams) (*GetLolQueueEligibilityV1InitialConfigurationCompleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolQueueEligibilityV1InitialConfigurationCompleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolQueueEligibilityV1InitialConfigurationComplete",
		Method:             "GET",
		PathPattern:        "/lol-queue-eligibility/v1/initial-configuration-complete",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolQueueEligibilityV1InitialConfigurationCompleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolQueueEligibilityV1InitialConfigurationCompleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolQueueEligibilityV1InitialConfigurationComplete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolQueueEligibilityV3Custom get lol queue eligibility v3 custom API
*/
func (a *Client) GetLolQueueEligibilityV3Custom(params *GetLolQueueEligibilityV3CustomParams) (*GetLolQueueEligibilityV3CustomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolQueueEligibilityV3CustomParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolQueueEligibilityV3Custom",
		Method:             "GET",
		PathPattern:        "/lol-queue-eligibility/v3/custom",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolQueueEligibilityV3CustomReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolQueueEligibilityV3CustomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolQueueEligibilityV3Custom: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolQueueEligibilityV3Eligibility get lol queue eligibility v3 eligibility API
*/
func (a *Client) GetLolQueueEligibilityV3Eligibility(params *GetLolQueueEligibilityV3EligibilityParams) (*GetLolQueueEligibilityV3EligibilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolQueueEligibilityV3EligibilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolQueueEligibilityV3Eligibility",
		Method:             "GET",
		PathPattern:        "/lol-queue-eligibility/v3/eligibility",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolQueueEligibilityV3EligibilityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolQueueEligibilityV3EligibilityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolQueueEligibilityV3Eligibility: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRankedV1ApexLeaguesByQueueTypeByTier get lol ranked v1 apex leagues by queue type by tier API
*/
func (a *Client) GetLolRankedV1ApexLeaguesByQueueTypeByTier(params *GetLolRankedV1ApexLeaguesByQueueTypeByTierParams) (*GetLolRankedV1ApexLeaguesByQueueTypeByTierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRankedV1ApexLeaguesByQueueTypeByTierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRankedV1ApexLeaguesByQueueTypeByTier",
		Method:             "GET",
		PathPattern:        "/lol-ranked/v1/apex-leagues/{queueType}/{tier}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRankedV1ApexLeaguesByQueueTypeByTierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRankedV1ApexLeaguesByQueueTypeByTierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRankedV1ApexLeaguesByQueueTypeByTier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRankedV1CurrentLpChangeNotification get lol ranked v1 current lp change notification API
*/
func (a *Client) GetLolRankedV1CurrentLpChangeNotification(params *GetLolRankedV1CurrentLpChangeNotificationParams) (*GetLolRankedV1CurrentLpChangeNotificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRankedV1CurrentLpChangeNotificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRankedV1CurrentLpChangeNotification",
		Method:             "GET",
		PathPattern:        "/lol-ranked/v1/current-lp-change-notification",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRankedV1CurrentLpChangeNotificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRankedV1CurrentLpChangeNotificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRankedV1CurrentLpChangeNotification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRankedV1CurrentRankedStats get lol ranked v1 current ranked stats API
*/
func (a *Client) GetLolRankedV1CurrentRankedStats(params *GetLolRankedV1CurrentRankedStatsParams) (*GetLolRankedV1CurrentRankedStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRankedV1CurrentRankedStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRankedV1CurrentRankedStats",
		Method:             "GET",
		PathPattern:        "/lol-ranked/v1/current-ranked-stats",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRankedV1CurrentRankedStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRankedV1CurrentRankedStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRankedV1CurrentRankedStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRankedV1EosNotifications get lol ranked v1 eos notifications API
*/
func (a *Client) GetLolRankedV1EosNotifications(params *GetLolRankedV1EosNotificationsParams) (*GetLolRankedV1EosNotificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRankedV1EosNotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRankedV1EosNotifications",
		Method:             "GET",
		PathPattern:        "/lol-ranked/v1/eos-notifications",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRankedV1EosNotificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRankedV1EosNotificationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRankedV1EosNotifications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRankedV1EosRewards get lol ranked v1 eos rewards API
*/
func (a *Client) GetLolRankedV1EosRewards(params *GetLolRankedV1EosRewardsParams) (*GetLolRankedV1EosRewardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRankedV1EosRewardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRankedV1EosRewards",
		Method:             "GET",
		PathPattern:        "/lol-ranked/v1/eos-rewards",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRankedV1EosRewardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRankedV1EosRewardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRankedV1EosRewards: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRankedV1LeagueLaddersByPuuid get lol ranked v1 league ladders by puuid API
*/
func (a *Client) GetLolRankedV1LeagueLaddersByPuuid(params *GetLolRankedV1LeagueLaddersByPuuidParams) (*GetLolRankedV1LeagueLaddersByPuuidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRankedV1LeagueLaddersByPuuidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRankedV1LeagueLaddersByPuuid",
		Method:             "GET",
		PathPattern:        "/lol-ranked/v1/league-ladders/{puuid}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRankedV1LeagueLaddersByPuuidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRankedV1LeagueLaddersByPuuidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRankedV1LeagueLaddersByPuuid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRankedV1Notifications get lol ranked v1 notifications API
*/
func (a *Client) GetLolRankedV1Notifications(params *GetLolRankedV1NotificationsParams) (*GetLolRankedV1NotificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRankedV1NotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRankedV1Notifications",
		Method:             "GET",
		PathPattern:        "/lol-ranked/v1/notifications",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRankedV1NotificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRankedV1NotificationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRankedV1Notifications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRankedV1RankedStats get lol ranked v1 ranked stats API
*/
func (a *Client) GetLolRankedV1RankedStats(params *GetLolRankedV1RankedStatsParams) (*GetLolRankedV1RankedStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRankedV1RankedStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRankedV1RankedStats",
		Method:             "GET",
		PathPattern:        "/lol-ranked/v1/ranked-stats",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRankedV1RankedStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRankedV1RankedStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRankedV1RankedStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRankedV1RankedStatsByPuuid get lol ranked v1 ranked stats by puuid API
*/
func (a *Client) GetLolRankedV1RankedStatsByPuuid(params *GetLolRankedV1RankedStatsByPuuidParams) (*GetLolRankedV1RankedStatsByPuuidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRankedV1RankedStatsByPuuidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRankedV1RankedStatsByPuuid",
		Method:             "GET",
		PathPattern:        "/lol-ranked/v1/ranked-stats/{puuid}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRankedV1RankedStatsByPuuidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRankedV1RankedStatsByPuuidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRankedV1RankedStatsByPuuid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRankedV1SignedRankedStats get lol ranked v1 signed ranked stats API
*/
func (a *Client) GetLolRankedV1SignedRankedStats(params *GetLolRankedV1SignedRankedStatsParams) (*GetLolRankedV1SignedRankedStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRankedV1SignedRankedStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRankedV1SignedRankedStats",
		Method:             "GET",
		PathPattern:        "/lol-ranked/v1/signed-ranked-stats",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRankedV1SignedRankedStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRankedV1SignedRankedStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRankedV1SignedRankedStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRankedV1SplitsConfig get lol ranked v1 splits config API
*/
func (a *Client) GetLolRankedV1SplitsConfig(params *GetLolRankedV1SplitsConfigParams) (*GetLolRankedV1SplitsConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRankedV1SplitsConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRankedV1SplitsConfig",
		Method:             "GET",
		PathPattern:        "/lol-ranked/v1/splits-config",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRankedV1SplitsConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRankedV1SplitsConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRankedV1SplitsConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRecommendationsV1Recommendations get lol recommendations v1 recommendations API
*/
func (a *Client) GetLolRecommendationsV1Recommendations(params *GetLolRecommendationsV1RecommendationsParams) (*GetLolRecommendationsV1RecommendationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRecommendationsV1RecommendationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRecommendationsV1Recommendations",
		Method:             "GET",
		PathPattern:        "/lol-recommendations/v1/recommendations",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRecommendationsV1RecommendationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRecommendationsV1RecommendationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRecommendationsV1Recommendations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRegaliaV2Config get lol regalia v2 config API
*/
func (a *Client) GetLolRegaliaV2Config(params *GetLolRegaliaV2ConfigParams) (*GetLolRegaliaV2ConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRegaliaV2ConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRegaliaV2Config",
		Method:             "GET",
		PathPattern:        "/lol-regalia/v2/config",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRegaliaV2ConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRegaliaV2ConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRegaliaV2Config: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRegaliaV2CurrentSummonerRegalia get lol regalia v2 current summoner regalia API
*/
func (a *Client) GetLolRegaliaV2CurrentSummonerRegalia(params *GetLolRegaliaV2CurrentSummonerRegaliaParams) (*GetLolRegaliaV2CurrentSummonerRegaliaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRegaliaV2CurrentSummonerRegaliaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRegaliaV2CurrentSummonerRegalia",
		Method:             "GET",
		PathPattern:        "/lol-regalia/v2/current-summoner/regalia",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRegaliaV2CurrentSummonerRegaliaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRegaliaV2CurrentSummonerRegaliaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRegaliaV2CurrentSummonerRegalia: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRegaliaV2SummonersBySummonerIDQueuesByQueuePositionsByPositionRegalia get lol regalia v2 summoners by summoner Id queues by queue positions by position regalia API
*/
func (a *Client) GetLolRegaliaV2SummonersBySummonerIDQueuesByQueuePositionsByPositionRegalia(params *GetLolRegaliaV2SummonersBySummonerIDQueuesByQueuePositionsByPositionRegaliaParams) (*GetLolRegaliaV2SummonersBySummonerIDQueuesByQueuePositionsByPositionRegaliaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRegaliaV2SummonersBySummonerIDQueuesByQueuePositionsByPositionRegaliaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRegaliaV2SummonersBySummonerIdQueuesByQueuePositionsByPositionRegalia",
		Method:             "GET",
		PathPattern:        "/lol-regalia/v2/summoners/{summonerId}/queues/{queue}/positions/{position}/regalia",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRegaliaV2SummonersBySummonerIDQueuesByQueuePositionsByPositionRegaliaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRegaliaV2SummonersBySummonerIDQueuesByQueuePositionsByPositionRegaliaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRegaliaV2SummonersBySummonerIdQueuesByQueuePositionsByPositionRegalia: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRegaliaV2SummonersBySummonerIDQueuesByQueueRegalia get lol regalia v2 summoners by summoner Id queues by queue regalia API
*/
func (a *Client) GetLolRegaliaV2SummonersBySummonerIDQueuesByQueueRegalia(params *GetLolRegaliaV2SummonersBySummonerIDQueuesByQueueRegaliaParams) (*GetLolRegaliaV2SummonersBySummonerIDQueuesByQueueRegaliaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRegaliaV2SummonersBySummonerIDQueuesByQueueRegaliaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRegaliaV2SummonersBySummonerIdQueuesByQueueRegalia",
		Method:             "GET",
		PathPattern:        "/lol-regalia/v2/summoners/{summonerId}/queues/{queue}/regalia",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRegaliaV2SummonersBySummonerIDQueuesByQueueRegaliaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRegaliaV2SummonersBySummonerIDQueuesByQueueRegaliaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRegaliaV2SummonersBySummonerIdQueuesByQueueRegalia: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRegaliaV2SummonersBySummonerIDRegalia get lol regalia v2 summoners by summoner Id regalia API
*/
func (a *Client) GetLolRegaliaV2SummonersBySummonerIDRegalia(params *GetLolRegaliaV2SummonersBySummonerIDRegaliaParams) (*GetLolRegaliaV2SummonersBySummonerIDRegaliaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRegaliaV2SummonersBySummonerIDRegaliaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRegaliaV2SummonersBySummonerIdRegalia",
		Method:             "GET",
		PathPattern:        "/lol-regalia/v2/summoners/{summonerId}/regalia",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRegaliaV2SummonersBySummonerIDRegaliaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRegaliaV2SummonersBySummonerIDRegaliaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRegaliaV2SummonersBySummonerIdRegalia: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRegaliaV2SummonersBySummonerIDRegaliaAsync get lol regalia v2 summoners by summoner Id regalia async API
*/
func (a *Client) GetLolRegaliaV2SummonersBySummonerIDRegaliaAsync(params *GetLolRegaliaV2SummonersBySummonerIDRegaliaAsyncParams) (*GetLolRegaliaV2SummonersBySummonerIDRegaliaAsyncOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRegaliaV2SummonersBySummonerIDRegaliaAsyncParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRegaliaV2SummonersBySummonerIdRegaliaAsync",
		Method:             "GET",
		PathPattern:        "/lol-regalia/v2/summoners/{summonerId}/regalia/async",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRegaliaV2SummonersBySummonerIDRegaliaAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRegaliaV2SummonersBySummonerIDRegaliaAsyncOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRegaliaV2SummonersBySummonerIdRegaliaAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolReplaysV1Configuration get lol replays v1 configuration API
*/
func (a *Client) GetLolReplaysV1Configuration(params *GetLolReplaysV1ConfigurationParams) (*GetLolReplaysV1ConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolReplaysV1ConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolReplaysV1Configuration",
		Method:             "GET",
		PathPattern:        "/lol-replays/v1/configuration",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolReplaysV1ConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolReplaysV1ConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolReplaysV1Configuration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolReplaysV1MetadataByGameID get lol replays v1 metadata by game Id API
*/
func (a *Client) GetLolReplaysV1MetadataByGameID(params *GetLolReplaysV1MetadataByGameIDParams) (*GetLolReplaysV1MetadataByGameIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolReplaysV1MetadataByGameIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolReplaysV1MetadataByGameId",
		Method:             "GET",
		PathPattern:        "/lol-replays/v1/metadata/{gameId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolReplaysV1MetadataByGameIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolReplaysV1MetadataByGameIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolReplaysV1MetadataByGameId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolReplaysV1RoflsPath get lol replays v1 rofls path API
*/
func (a *Client) GetLolReplaysV1RoflsPath(params *GetLolReplaysV1RoflsPathParams) (*GetLolReplaysV1RoflsPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolReplaysV1RoflsPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolReplaysV1RoflsPath",
		Method:             "GET",
		PathPattern:        "/lol-replays/v1/rofls/path",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolReplaysV1RoflsPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolReplaysV1RoflsPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolReplaysV1RoflsPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolReplaysV1RoflsPathDefault get lol replays v1 rofls path default API
*/
func (a *Client) GetLolReplaysV1RoflsPathDefault(params *GetLolReplaysV1RoflsPathDefaultParams) (*GetLolReplaysV1RoflsPathDefaultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolReplaysV1RoflsPathDefaultParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolReplaysV1RoflsPathDefault",
		Method:             "GET",
		PathPattern:        "/lol-replays/v1/rofls/path/default",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolReplaysV1RoflsPathDefaultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolReplaysV1RoflsPathDefaultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolReplaysV1RoflsPathDefault: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRevivalsV1ChallengesProgress get lol revivals v1 challenges progress API
*/
func (a *Client) GetLolRevivalsV1ChallengesProgress(params *GetLolRevivalsV1ChallengesProgressParams) (*GetLolRevivalsV1ChallengesProgressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRevivalsV1ChallengesProgressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRevivalsV1ChallengesProgress",
		Method:             "GET",
		PathPattern:        "/lol-revivals/v1/challenges-progress",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRevivalsV1ChallengesProgressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRevivalsV1ChallengesProgressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRevivalsV1ChallengesProgress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRevivalsV1DailyPlayProgress get lol revivals v1 daily play progress API
*/
func (a *Client) GetLolRevivalsV1DailyPlayProgress(params *GetLolRevivalsV1DailyPlayProgressParams) (*GetLolRevivalsV1DailyPlayProgressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRevivalsV1DailyPlayProgressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRevivalsV1DailyPlayProgress",
		Method:             "GET",
		PathPattern:        "/lol-revivals/v1/daily-play-progress",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRevivalsV1DailyPlayProgressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRevivalsV1DailyPlayProgressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRevivalsV1DailyPlayProgress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRevivalsV1Eligibility get lol revivals v1 eligibility API
*/
func (a *Client) GetLolRevivalsV1Eligibility(params *GetLolRevivalsV1EligibilityParams) (*GetLolRevivalsV1EligibilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRevivalsV1EligibilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRevivalsV1Eligibility",
		Method:             "GET",
		PathPattern:        "/lol-revivals/v1/eligibility",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRevivalsV1EligibilityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRevivalsV1EligibilityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRevivalsV1Eligibility: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRmsV1ChampionMasteryLeaveupUpdate get lol rms v1 champion mastery leaveup update API
*/
func (a *Client) GetLolRmsV1ChampionMasteryLeaveupUpdate(params *GetLolRmsV1ChampionMasteryLeaveupUpdateParams) (*GetLolRmsV1ChampionMasteryLeaveupUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRmsV1ChampionMasteryLeaveupUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRmsV1ChampionMasteryLeaveupUpdate",
		Method:             "GET",
		PathPattern:        "/lol-rms/v1/champion-mastery-leaveup-update",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRmsV1ChampionMasteryLeaveupUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRmsV1ChampionMasteryLeaveupUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRmsV1ChampionMasteryLeaveupUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRsoAuthV1AuthHintsHint get lol rso auth v1 auth hints hint API
*/
func (a *Client) GetLolRsoAuthV1AuthHintsHint(params *GetLolRsoAuthV1AuthHintsHintParams) (*GetLolRsoAuthV1AuthHintsHintOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRsoAuthV1AuthHintsHintParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRsoAuthV1AuthHintsHint",
		Method:             "GET",
		PathPattern:        "/lol-rso-auth/v1/auth-hints/hint",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRsoAuthV1AuthHintsHintReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRsoAuthV1AuthHintsHintOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRsoAuthV1AuthHintsHint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRsoAuthV1Authorization get lol rso auth v1 authorization API
*/
func (a *Client) GetLolRsoAuthV1Authorization(params *GetLolRsoAuthV1AuthorizationParams) (*GetLolRsoAuthV1AuthorizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRsoAuthV1AuthorizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRsoAuthV1Authorization",
		Method:             "GET",
		PathPattern:        "/lol-rso-auth/v1/authorization",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRsoAuthV1AuthorizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRsoAuthV1AuthorizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRsoAuthV1Authorization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRsoAuthV1AuthorizationAccessToken get lol rso auth v1 authorization access token API
*/
func (a *Client) GetLolRsoAuthV1AuthorizationAccessToken(params *GetLolRsoAuthV1AuthorizationAccessTokenParams) (*GetLolRsoAuthV1AuthorizationAccessTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRsoAuthV1AuthorizationAccessTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRsoAuthV1AuthorizationAccessToken",
		Method:             "GET",
		PathPattern:        "/lol-rso-auth/v1/authorization/access-token",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRsoAuthV1AuthorizationAccessTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRsoAuthV1AuthorizationAccessTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRsoAuthV1AuthorizationAccessToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRsoAuthV1AuthorizationError get lol rso auth v1 authorization error API
*/
func (a *Client) GetLolRsoAuthV1AuthorizationError(params *GetLolRsoAuthV1AuthorizationErrorParams) (*GetLolRsoAuthV1AuthorizationErrorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRsoAuthV1AuthorizationErrorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRsoAuthV1AuthorizationError",
		Method:             "GET",
		PathPattern:        "/lol-rso-auth/v1/authorization/error",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRsoAuthV1AuthorizationErrorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRsoAuthV1AuthorizationErrorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRsoAuthV1AuthorizationError: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRsoAuthV1AuthorizationIDToken get lol rso auth v1 authorization Id token API
*/
func (a *Client) GetLolRsoAuthV1AuthorizationIDToken(params *GetLolRsoAuthV1AuthorizationIDTokenParams) (*GetLolRsoAuthV1AuthorizationIDTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRsoAuthV1AuthorizationIDTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRsoAuthV1AuthorizationIdToken",
		Method:             "GET",
		PathPattern:        "/lol-rso-auth/v1/authorization/id-token",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRsoAuthV1AuthorizationIDTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRsoAuthV1AuthorizationIDTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRsoAuthV1AuthorizationIdToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRsoAuthV1AuthorizationUserinfo get lol rso auth v1 authorization userinfo API
*/
func (a *Client) GetLolRsoAuthV1AuthorizationUserinfo(params *GetLolRsoAuthV1AuthorizationUserinfoParams) (*GetLolRsoAuthV1AuthorizationUserinfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRsoAuthV1AuthorizationUserinfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRsoAuthV1AuthorizationUserinfo",
		Method:             "GET",
		PathPattern:        "/lol-rso-auth/v1/authorization/userinfo",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRsoAuthV1AuthorizationUserinfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRsoAuthV1AuthorizationUserinfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRsoAuthV1AuthorizationUserinfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolRsoAuthV1StatusByPlatformID get lol rso auth v1 status by platform Id API
*/
func (a *Client) GetLolRsoAuthV1StatusByPlatformID(params *GetLolRsoAuthV1StatusByPlatformIDParams) (*GetLolRsoAuthV1StatusByPlatformIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolRsoAuthV1StatusByPlatformIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolRsoAuthV1StatusByPlatformId",
		Method:             "GET",
		PathPattern:        "/lol-rso-auth/v1/status/{platformId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolRsoAuthV1StatusByPlatformIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolRsoAuthV1StatusByPlatformIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolRsoAuthV1StatusByPlatformId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolServiceStatusV1LcuStatus get lol service status v1 lcu status API
*/
func (a *Client) GetLolServiceStatusV1LcuStatus(params *GetLolServiceStatusV1LcuStatusParams) (*GetLolServiceStatusV1LcuStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolServiceStatusV1LcuStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolServiceStatusV1LcuStatus",
		Method:             "GET",
		PathPattern:        "/lol-service-status/v1/lcu-status",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolServiceStatusV1LcuStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolServiceStatusV1LcuStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolServiceStatusV1LcuStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolServiceStatusV1TickerMessages get lol service status v1 ticker messages API
*/
func (a *Client) GetLolServiceStatusV1TickerMessages(params *GetLolServiceStatusV1TickerMessagesParams) (*GetLolServiceStatusV1TickerMessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolServiceStatusV1TickerMessagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolServiceStatusV1TickerMessages",
		Method:             "GET",
		PathPattern:        "/lol-service-status/v1/ticker-messages",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolServiceStatusV1TickerMessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolServiceStatusV1TickerMessagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolServiceStatusV1TickerMessages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSettingsV1AccountByCategory get lol settings v1 account by category API
*/
func (a *Client) GetLolSettingsV1AccountByCategory(params *GetLolSettingsV1AccountByCategoryParams) (*GetLolSettingsV1AccountByCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSettingsV1AccountByCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSettingsV1AccountByCategory",
		Method:             "GET",
		PathPattern:        "/lol-settings/v1/account/{category}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSettingsV1AccountByCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSettingsV1AccountByCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSettingsV1AccountByCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSettingsV1AccountDidreset get lol settings v1 account didreset API
*/
func (a *Client) GetLolSettingsV1AccountDidreset(params *GetLolSettingsV1AccountDidresetParams) (*GetLolSettingsV1AccountDidresetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSettingsV1AccountDidresetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSettingsV1AccountDidreset",
		Method:             "GET",
		PathPattern:        "/lol-settings/v1/account/didreset",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSettingsV1AccountDidresetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSettingsV1AccountDidresetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSettingsV1AccountDidreset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSettingsV1LocalByCategory get lol settings v1 local by category API
*/
func (a *Client) GetLolSettingsV1LocalByCategory(params *GetLolSettingsV1LocalByCategoryParams) (*GetLolSettingsV1LocalByCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSettingsV1LocalByCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSettingsV1LocalByCategory",
		Method:             "GET",
		PathPattern:        "/lol-settings/v1/local/{category}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSettingsV1LocalByCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSettingsV1LocalByCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSettingsV1LocalByCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSettingsV2AccountByPpTypeByCategory get lol settings v2 account by pp type by category API
*/
func (a *Client) GetLolSettingsV2AccountByPpTypeByCategory(params *GetLolSettingsV2AccountByPpTypeByCategoryParams) (*GetLolSettingsV2AccountByPpTypeByCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSettingsV2AccountByPpTypeByCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSettingsV2AccountByPpTypeByCategory",
		Method:             "GET",
		PathPattern:        "/lol-settings/v2/account/{ppType}/{category}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSettingsV2AccountByPpTypeByCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSettingsV2AccountByPpTypeByCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSettingsV2AccountByPpTypeByCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSettingsV2DidresetByPpType get lol settings v2 didreset by pp type API
*/
func (a *Client) GetLolSettingsV2DidresetByPpType(params *GetLolSettingsV2DidresetByPpTypeParams) (*GetLolSettingsV2DidresetByPpTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSettingsV2DidresetByPpTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSettingsV2DidresetByPpType",
		Method:             "GET",
		PathPattern:        "/lol-settings/v2/didreset/{ppType}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSettingsV2DidresetByPpTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSettingsV2DidresetByPpTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSettingsV2DidresetByPpType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSettingsV2LocalByCategory get lol settings v2 local by category API
*/
func (a *Client) GetLolSettingsV2LocalByCategory(params *GetLolSettingsV2LocalByCategoryParams) (*GetLolSettingsV2LocalByCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSettingsV2LocalByCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSettingsV2LocalByCategory",
		Method:             "GET",
		PathPattern:        "/lol-settings/v2/local/{category}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSettingsV2LocalByCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSettingsV2LocalByCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSettingsV2LocalByCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSettingsV2Ready get lol settings v2 ready API
*/
func (a *Client) GetLolSettingsV2Ready(params *GetLolSettingsV2ReadyParams) (*GetLolSettingsV2ReadyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSettingsV2ReadyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSettingsV2Ready",
		Method:             "GET",
		PathPattern:        "/lol-settings/v2/ready",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSettingsV2ReadyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSettingsV2ReadyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSettingsV2Ready: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolShutdownV1Notification get lol shutdown v1 notification API
*/
func (a *Client) GetLolShutdownV1Notification(params *GetLolShutdownV1NotificationParams) (*GetLolShutdownV1NotificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolShutdownV1NotificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolShutdownV1Notification",
		Method:             "GET",
		PathPattern:        "/lol-shutdown/v1/notification",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolShutdownV1NotificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolShutdownV1NotificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolShutdownV1Notification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSimpleDialogMessagesV1Messages get lol simple dialog messages v1 messages API
*/
func (a *Client) GetLolSimpleDialogMessagesV1Messages(params *GetLolSimpleDialogMessagesV1MessagesParams) (*GetLolSimpleDialogMessagesV1MessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSimpleDialogMessagesV1MessagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSimpleDialogMessagesV1Messages",
		Method:             "GET",
		PathPattern:        "/lol-simple-dialog-messages/v1/messages",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSimpleDialogMessagesV1MessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSimpleDialogMessagesV1MessagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSimpleDialogMessagesV1Messages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSpectatorV1Spectate get lol spectator v1 spectate API
*/
func (a *Client) GetLolSpectatorV1Spectate(params *GetLolSpectatorV1SpectateParams) (*GetLolSpectatorV1SpectateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSpectatorV1SpectateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSpectatorV1Spectate",
		Method:             "GET",
		PathPattern:        "/lol-spectator/v1/spectate",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSpectatorV1SpectateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSpectatorV1SpectateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSpectatorV1Spectate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolStatstonesV1EogNotifications get lol statstones v1 eog notifications API
*/
func (a *Client) GetLolStatstonesV1EogNotifications(params *GetLolStatstonesV1EogNotificationsParams) (*GetLolStatstonesV1EogNotificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolStatstonesV1EogNotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolStatstonesV1EogNotifications",
		Method:             "GET",
		PathPattern:        "/lol-statstones/v1/eog-notifications",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolStatstonesV1EogNotificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolStatstonesV1EogNotificationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolStatstonesV1EogNotifications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolStatstonesV1FeaturedChampionStatstonesByChampionItemID get lol statstones v1 featured champion statstones by champion item Id API
*/
func (a *Client) GetLolStatstonesV1FeaturedChampionStatstonesByChampionItemID(params *GetLolStatstonesV1FeaturedChampionStatstonesByChampionItemIDParams) (*GetLolStatstonesV1FeaturedChampionStatstonesByChampionItemIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolStatstonesV1FeaturedChampionStatstonesByChampionItemIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolStatstonesV1FeaturedChampionStatstonesByChampionItemId",
		Method:             "GET",
		PathPattern:        "/lol-statstones/v1/featured-champion-statstones/{championItemId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolStatstonesV1FeaturedChampionStatstonesByChampionItemIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolStatstonesV1FeaturedChampionStatstonesByChampionItemIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolStatstonesV1FeaturedChampionStatstonesByChampionItemId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolStatstonesV1ProfileSummaryByPuuid get lol statstones v1 profile summary by puuid API
*/
func (a *Client) GetLolStatstonesV1ProfileSummaryByPuuid(params *GetLolStatstonesV1ProfileSummaryByPuuidParams) (*GetLolStatstonesV1ProfileSummaryByPuuidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolStatstonesV1ProfileSummaryByPuuidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolStatstonesV1ProfileSummaryByPuuid",
		Method:             "GET",
		PathPattern:        "/lol-statstones/v1/profile-summary/{puuid}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolStatstonesV1ProfileSummaryByPuuidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolStatstonesV1ProfileSummaryByPuuidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolStatstonesV1ProfileSummaryByPuuid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolStatstonesV1StatstonesEnabledQueueIds get lol statstones v1 statstones enabled queue ids API
*/
func (a *Client) GetLolStatstonesV1StatstonesEnabledQueueIds(params *GetLolStatstonesV1StatstonesEnabledQueueIdsParams) (*GetLolStatstonesV1StatstonesEnabledQueueIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolStatstonesV1StatstonesEnabledQueueIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolStatstonesV1StatstonesEnabledQueueIds",
		Method:             "GET",
		PathPattern:        "/lol-statstones/v1/statstones-enabled-queue-ids",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolStatstonesV1StatstonesEnabledQueueIdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolStatstonesV1StatstonesEnabledQueueIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolStatstonesV1StatstonesEnabledQueueIds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolStatstonesV1VignetteNotifications get lol statstones v1 vignette notifications API
*/
func (a *Client) GetLolStatstonesV1VignetteNotifications(params *GetLolStatstonesV1VignetteNotificationsParams) (*GetLolStatstonesV1VignetteNotificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolStatstonesV1VignetteNotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolStatstonesV1VignetteNotifications",
		Method:             "GET",
		PathPattern:        "/lol-statstones/v1/vignette-notifications",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolStatstonesV1VignetteNotificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolStatstonesV1VignetteNotificationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolStatstonesV1VignetteNotifications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolStatstonesV2PlayerStatstonesSelfByChampionItemID get lol statstones v2 player statstones self by champion item Id API
*/
func (a *Client) GetLolStatstonesV2PlayerStatstonesSelfByChampionItemID(params *GetLolStatstonesV2PlayerStatstonesSelfByChampionItemIDParams) (*GetLolStatstonesV2PlayerStatstonesSelfByChampionItemIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolStatstonesV2PlayerStatstonesSelfByChampionItemIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolStatstonesV2PlayerStatstonesSelfByChampionItemId",
		Method:             "GET",
		PathPattern:        "/lol-statstones/v2/player-statstones-self/{championItemId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolStatstonesV2PlayerStatstonesSelfByChampionItemIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolStatstonesV2PlayerStatstonesSelfByChampionItemIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolStatstonesV2PlayerStatstonesSelfByChampionItemId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolStatstonesV2PlayerSummarySelf get lol statstones v2 player summary self API
*/
func (a *Client) GetLolStatstonesV2PlayerSummarySelf(params *GetLolStatstonesV2PlayerSummarySelfParams) (*GetLolStatstonesV2PlayerSummarySelfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolStatstonesV2PlayerSummarySelfParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolStatstonesV2PlayerSummarySelf",
		Method:             "GET",
		PathPattern:        "/lol-statstones/v2/player-summary-self",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolStatstonesV2PlayerSummarySelfReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolStatstonesV2PlayerSummarySelfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolStatstonesV2PlayerSummarySelf: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolStoreV1ByPageType get lol store v1 by page type API
*/
func (a *Client) GetLolStoreV1ByPageType(params *GetLolStoreV1ByPageTypeParams) (*GetLolStoreV1ByPageTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolStoreV1ByPageTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolStoreV1ByPageType",
		Method:             "GET",
		PathPattern:        "/lol-store/v1/{pageType}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolStoreV1ByPageTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolStoreV1ByPageTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolStoreV1ByPageType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolStoreV1Catalog get lol store v1 catalog API
*/
func (a *Client) GetLolStoreV1Catalog(params *GetLolStoreV1CatalogParams) (*GetLolStoreV1CatalogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolStoreV1CatalogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolStoreV1Catalog",
		Method:             "GET",
		PathPattern:        "/lol-store/v1/catalog",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolStoreV1CatalogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolStoreV1CatalogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolStoreV1Catalog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolStoreV1CatalogByInstanceIds get lol store v1 catalog by instance ids API
*/
func (a *Client) GetLolStoreV1CatalogByInstanceIds(params *GetLolStoreV1CatalogByInstanceIdsParams) (*GetLolStoreV1CatalogByInstanceIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolStoreV1CatalogByInstanceIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolStoreV1CatalogByInstanceIds",
		Method:             "GET",
		PathPattern:        "/lol-store/v1/catalogByInstanceIds",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolStoreV1CatalogByInstanceIdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolStoreV1CatalogByInstanceIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolStoreV1CatalogByInstanceIds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolStoreV1GetStoreURL get lol store v1 get store Url API
*/
func (a *Client) GetLolStoreV1GetStoreURL(params *GetLolStoreV1GetStoreURLParams) (*GetLolStoreV1GetStoreURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolStoreV1GetStoreURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolStoreV1GetStoreUrl",
		Method:             "GET",
		PathPattern:        "/lol-store/v1/getStoreUrl",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolStoreV1GetStoreURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolStoreV1GetStoreURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolStoreV1GetStoreUrl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolStoreV1Giftablefriends get lol store v1 giftablefriends API
*/
func (a *Client) GetLolStoreV1Giftablefriends(params *GetLolStoreV1GiftablefriendsParams) (*GetLolStoreV1GiftablefriendsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolStoreV1GiftablefriendsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolStoreV1Giftablefriends",
		Method:             "GET",
		PathPattern:        "/lol-store/v1/giftablefriends",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolStoreV1GiftablefriendsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolStoreV1GiftablefriendsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolStoreV1Giftablefriends: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolStoreV1ItemKeysFromInstanceIds get lol store v1 item keys from instance ids API
*/
func (a *Client) GetLolStoreV1ItemKeysFromInstanceIds(params *GetLolStoreV1ItemKeysFromInstanceIdsParams) (*GetLolStoreV1ItemKeysFromInstanceIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolStoreV1ItemKeysFromInstanceIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolStoreV1ItemKeysFromInstanceIds",
		Method:             "GET",
		PathPattern:        "/lol-store/v1/itemKeysFromInstanceIds",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolStoreV1ItemKeysFromInstanceIdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolStoreV1ItemKeysFromInstanceIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolStoreV1ItemKeysFromInstanceIds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolStoreV1LastPage get lol store v1 last page API
*/
func (a *Client) GetLolStoreV1LastPage(params *GetLolStoreV1LastPageParams) (*GetLolStoreV1LastPageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolStoreV1LastPageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolStoreV1LastPage",
		Method:             "GET",
		PathPattern:        "/lol-store/v1/lastPage",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolStoreV1LastPageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolStoreV1LastPageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolStoreV1LastPage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolStoreV1OrderNotifications get lol store v1 order notifications API
*/
func (a *Client) GetLolStoreV1OrderNotifications(params *GetLolStoreV1OrderNotificationsParams) (*GetLolStoreV1OrderNotificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolStoreV1OrderNotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolStoreV1OrderNotifications",
		Method:             "GET",
		PathPattern:        "/lol-store/v1/order-notifications",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolStoreV1OrderNotificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolStoreV1OrderNotificationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolStoreV1OrderNotifications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolStoreV1OrderNotificationsByID get lol store v1 order notifications by Id API
*/
func (a *Client) GetLolStoreV1OrderNotificationsByID(params *GetLolStoreV1OrderNotificationsByIDParams) (*GetLolStoreV1OrderNotificationsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolStoreV1OrderNotificationsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolStoreV1OrderNotificationsById",
		Method:             "GET",
		PathPattern:        "/lol-store/v1/order-notifications/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolStoreV1OrderNotificationsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolStoreV1OrderNotificationsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolStoreV1OrderNotificationsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolStoreV1PaymentDetails get lol store v1 payment details API
*/
func (a *Client) GetLolStoreV1PaymentDetails(params *GetLolStoreV1PaymentDetailsParams) (*GetLolStoreV1PaymentDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolStoreV1PaymentDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolStoreV1PaymentDetails",
		Method:             "GET",
		PathPattern:        "/lol-store/v1/paymentDetails",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolStoreV1PaymentDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolStoreV1PaymentDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolStoreV1PaymentDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolStoreV1SkinsBySkinID get lol store v1 skins by skin Id API
*/
func (a *Client) GetLolStoreV1SkinsBySkinID(params *GetLolStoreV1SkinsBySkinIDParams) (*GetLolStoreV1SkinsBySkinIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolStoreV1SkinsBySkinIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolStoreV1SkinsBySkinId",
		Method:             "GET",
		PathPattern:        "/lol-store/v1/skins/{skinId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolStoreV1SkinsBySkinIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolStoreV1SkinsBySkinIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolStoreV1SkinsBySkinId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolStoreV1Status get lol store v1 status API
*/
func (a *Client) GetLolStoreV1Status(params *GetLolStoreV1StatusParams) (*GetLolStoreV1StatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolStoreV1StatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolStoreV1Status",
		Method:             "GET",
		PathPattern:        "/lol-store/v1/status",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolStoreV1StatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolStoreV1StatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolStoreV1Status: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolStoreV1StoreReady get lol store v1 store ready API
*/
func (a *Client) GetLolStoreV1StoreReady(params *GetLolStoreV1StoreReadyParams) (*GetLolStoreV1StoreReadyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolStoreV1StoreReadyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolStoreV1StoreReady",
		Method:             "GET",
		PathPattern:        "/lol-store/v1/store-ready",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolStoreV1StoreReadyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolStoreV1StoreReadyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolStoreV1StoreReady: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolStoreV1Wallet get lol store v1 wallet API
*/
func (a *Client) GetLolStoreV1Wallet(params *GetLolStoreV1WalletParams) (*GetLolStoreV1WalletOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolStoreV1WalletParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolStoreV1Wallet",
		Method:             "GET",
		PathPattern:        "/lol-store/v1/wallet",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolStoreV1WalletReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolStoreV1WalletOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolStoreV1Wallet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSuggestedPlayersV1SuggestedPlayers get lol suggested players v1 suggested players API
*/
func (a *Client) GetLolSuggestedPlayersV1SuggestedPlayers(params *GetLolSuggestedPlayersV1SuggestedPlayersParams) (*GetLolSuggestedPlayersV1SuggestedPlayersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSuggestedPlayersV1SuggestedPlayersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSuggestedPlayersV1SuggestedPlayers",
		Method:             "GET",
		PathPattern:        "/lol-suggested-players/v1/suggested-players",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSuggestedPlayersV1SuggestedPlayersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSuggestedPlayersV1SuggestedPlayersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSuggestedPlayersV1SuggestedPlayers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSummonerV1CheckNameAvailabilityByName get lol summoner v1 check name availability by name API
*/
func (a *Client) GetLolSummonerV1CheckNameAvailabilityByName(params *GetLolSummonerV1CheckNameAvailabilityByNameParams) (*GetLolSummonerV1CheckNameAvailabilityByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSummonerV1CheckNameAvailabilityByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSummonerV1CheckNameAvailabilityByName",
		Method:             "GET",
		PathPattern:        "/lol-summoner/v1/check-name-availability/{name}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSummonerV1CheckNameAvailabilityByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSummonerV1CheckNameAvailabilityByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSummonerV1CheckNameAvailabilityByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSummonerV1CheckNameAvailabilityNewSummonersByName get lol summoner v1 check name availability new summoners by name API
*/
func (a *Client) GetLolSummonerV1CheckNameAvailabilityNewSummonersByName(params *GetLolSummonerV1CheckNameAvailabilityNewSummonersByNameParams) (*GetLolSummonerV1CheckNameAvailabilityNewSummonersByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSummonerV1CheckNameAvailabilityNewSummonersByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSummonerV1CheckNameAvailabilityNewSummonersByName",
		Method:             "GET",
		PathPattern:        "/lol-summoner/v1/check-name-availability-new-summoners/{name}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSummonerV1CheckNameAvailabilityNewSummonersByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSummonerV1CheckNameAvailabilityNewSummonersByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSummonerV1CheckNameAvailabilityNewSummonersByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSummonerV1CurrentSummoner get lol summoner v1 current summoner API
*/
func (a *Client) GetLolSummonerV1CurrentSummoner(params *GetLolSummonerV1CurrentSummonerParams) (*GetLolSummonerV1CurrentSummonerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSummonerV1CurrentSummonerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSummonerV1CurrentSummoner",
		Method:             "GET",
		PathPattern:        "/lol-summoner/v1/current-summoner",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSummonerV1CurrentSummonerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSummonerV1CurrentSummonerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSummonerV1CurrentSummoner: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSummonerV1CurrentSummonerAutofill get lol summoner v1 current summoner autofill API
*/
func (a *Client) GetLolSummonerV1CurrentSummonerAutofill(params *GetLolSummonerV1CurrentSummonerAutofillParams) (*GetLolSummonerV1CurrentSummonerAutofillOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSummonerV1CurrentSummonerAutofillParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSummonerV1CurrentSummonerAutofill",
		Method:             "GET",
		PathPattern:        "/lol-summoner/v1/current-summoner/autofill",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSummonerV1CurrentSummonerAutofillReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSummonerV1CurrentSummonerAutofillOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSummonerV1CurrentSummonerAutofill: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSummonerV1CurrentSummonerJwt get lol summoner v1 current summoner jwt API
*/
func (a *Client) GetLolSummonerV1CurrentSummonerJwt(params *GetLolSummonerV1CurrentSummonerJwtParams) (*GetLolSummonerV1CurrentSummonerJwtOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSummonerV1CurrentSummonerJwtParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSummonerV1CurrentSummonerJwt",
		Method:             "GET",
		PathPattern:        "/lol-summoner/v1/current-summoner/jwt",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSummonerV1CurrentSummonerJwtReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSummonerV1CurrentSummonerJwtOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSummonerV1CurrentSummonerJwt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSummonerV1CurrentSummonerRerollPoints get lol summoner v1 current summoner reroll points API
*/
func (a *Client) GetLolSummonerV1CurrentSummonerRerollPoints(params *GetLolSummonerV1CurrentSummonerRerollPointsParams) (*GetLolSummonerV1CurrentSummonerRerollPointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSummonerV1CurrentSummonerRerollPointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSummonerV1CurrentSummonerRerollPoints",
		Method:             "GET",
		PathPattern:        "/lol-summoner/v1/current-summoner/rerollPoints",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSummonerV1CurrentSummonerRerollPointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSummonerV1CurrentSummonerRerollPointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSummonerV1CurrentSummonerRerollPoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSummonerV1CurrentSummonerSummonerProfile get lol summoner v1 current summoner summoner profile API
*/
func (a *Client) GetLolSummonerV1CurrentSummonerSummonerProfile(params *GetLolSummonerV1CurrentSummonerSummonerProfileParams) (*GetLolSummonerV1CurrentSummonerSummonerProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSummonerV1CurrentSummonerSummonerProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSummonerV1CurrentSummonerSummonerProfile",
		Method:             "GET",
		PathPattern:        "/lol-summoner/v1/current-summoner/summoner-profile",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSummonerV1CurrentSummonerSummonerProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSummonerV1CurrentSummonerSummonerProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSummonerV1CurrentSummonerSummonerProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSummonerV1SummonerProfile get lol summoner v1 summoner profile API
*/
func (a *Client) GetLolSummonerV1SummonerProfile(params *GetLolSummonerV1SummonerProfileParams) (*GetLolSummonerV1SummonerProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSummonerV1SummonerProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSummonerV1SummonerProfile",
		Method:             "GET",
		PathPattern:        "/lol-summoner/v1/summoner-profile",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSummonerV1SummonerProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSummonerV1SummonerProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSummonerV1SummonerProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSummonerV1Summoners get lol summoner v1 summoners API
*/
func (a *Client) GetLolSummonerV1Summoners(params *GetLolSummonerV1SummonersParams) (*GetLolSummonerV1SummonersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSummonerV1SummonersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSummonerV1Summoners",
		Method:             "GET",
		PathPattern:        "/lol-summoner/v1/summoners",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSummonerV1SummonersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSummonerV1SummonersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSummonerV1Summoners: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSummonerV1SummonersByID get lol summoner v1 summoners by Id API
*/
func (a *Client) GetLolSummonerV1SummonersByID(params *GetLolSummonerV1SummonersByIDParams) (*GetLolSummonerV1SummonersByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSummonerV1SummonersByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSummonerV1SummonersById",
		Method:             "GET",
		PathPattern:        "/lol-summoner/v1/summoners/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSummonerV1SummonersByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSummonerV1SummonersByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSummonerV1SummonersById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSummonerV1SummonersByPuuidCachedByPuuid get lol summoner v1 summoners by puuid cached by puuid API
*/
func (a *Client) GetLolSummonerV1SummonersByPuuidCachedByPuuid(params *GetLolSummonerV1SummonersByPuuidCachedByPuuidParams) (*GetLolSummonerV1SummonersByPuuidCachedByPuuidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSummonerV1SummonersByPuuidCachedByPuuidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSummonerV1SummonersByPuuidCachedByPuuid",
		Method:             "GET",
		PathPattern:        "/lol-summoner/v1/summoners-by-puuid-cached/{puuid}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSummonerV1SummonersByPuuidCachedByPuuidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSummonerV1SummonersByPuuidCachedByPuuidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSummonerV1SummonersByPuuidCachedByPuuid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSummonerV2SummonerIcons get lol summoner v2 summoner icons API
*/
func (a *Client) GetLolSummonerV2SummonerIcons(params *GetLolSummonerV2SummonerIconsParams) (*GetLolSummonerV2SummonerIconsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSummonerV2SummonerIconsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSummonerV2SummonerIcons",
		Method:             "GET",
		PathPattern:        "/lol-summoner/v2/summoner-icons",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSummonerV2SummonerIconsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSummonerV2SummonerIconsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSummonerV2SummonerIcons: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSummonerV2SummonerNames get lol summoner v2 summoner names API
*/
func (a *Client) GetLolSummonerV2SummonerNames(params *GetLolSummonerV2SummonerNamesParams) (*GetLolSummonerV2SummonerNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSummonerV2SummonerNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSummonerV2SummonerNames",
		Method:             "GET",
		PathPattern:        "/lol-summoner/v2/summoner-names",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSummonerV2SummonerNamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSummonerV2SummonerNamesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSummonerV2SummonerNames: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSummonerV2Summoners get lol summoner v2 summoners API
*/
func (a *Client) GetLolSummonerV2Summoners(params *GetLolSummonerV2SummonersParams) (*GetLolSummonerV2SummonersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSummonerV2SummonersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSummonerV2Summoners",
		Method:             "GET",
		PathPattern:        "/lol-summoner/v2/summoners",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSummonerV2SummonersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSummonerV2SummonersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSummonerV2Summoners: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolSummonerV2SummonersPuuidByPuuid get lol summoner v2 summoners puuid by puuid API
*/
func (a *Client) GetLolSummonerV2SummonersPuuidByPuuid(params *GetLolSummonerV2SummonersPuuidByPuuidParams) (*GetLolSummonerV2SummonersPuuidByPuuidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolSummonerV2SummonersPuuidByPuuidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolSummonerV2SummonersPuuidByPuuid",
		Method:             "GET",
		PathPattern:        "/lol-summoner/v2/summoners/puuid/{puuid}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolSummonerV2SummonersPuuidByPuuidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolSummonerV2SummonersPuuidByPuuidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolSummonerV2SummonersPuuidByPuuid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolTencentQtV1UIStates get lol tencent qt v1 Ui states API
*/
func (a *Client) GetLolTencentQtV1UIStates(params *GetLolTencentQtV1UIStatesParams) (*GetLolTencentQtV1UIStatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolTencentQtV1UIStatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolTencentQtV1UiStates",
		Method:             "GET",
		PathPattern:        "/lol-tencent-qt/v1/ui-states",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolTencentQtV1UIStatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolTencentQtV1UIStatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolTencentQtV1UiStates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolTencentQtV1UIStatesByFeature get lol tencent qt v1 Ui states by feature API
*/
func (a *Client) GetLolTencentQtV1UIStatesByFeature(params *GetLolTencentQtV1UIStatesByFeatureParams) (*GetLolTencentQtV1UIStatesByFeatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolTencentQtV1UIStatesByFeatureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolTencentQtV1UiStatesByFeature",
		Method:             "GET",
		PathPattern:        "/lol-tencent-qt/v1/ui-states/{feature}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolTencentQtV1UIStatesByFeatureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolTencentQtV1UIStatesByFeatureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolTencentQtV1UiStatesByFeature: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolTftV1TftBattlepass get lol tft v1 tft battlepass API
*/
func (a *Client) GetLolTftV1TftBattlepass(params *GetLolTftV1TftBattlepassParams) (*GetLolTftV1TftBattlepassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolTftV1TftBattlepassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolTftV1TftBattlepass",
		Method:             "GET",
		PathPattern:        "/lol-tft/v1/tft/battlepass",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolTftV1TftBattlepassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolTftV1TftBattlepassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolTftV1TftBattlepass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolTftV1TftOrb get lol tft v1 tft orb API
*/
func (a *Client) GetLolTftV1TftOrb(params *GetLolTftV1TftOrbParams) (*GetLolTftV1TftOrbOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolTftV1TftOrbParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolTftV1TftOrb",
		Method:             "GET",
		PathPattern:        "/lol-tft/v1/tft/orb",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolTftV1TftOrbReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolTftV1TftOrbOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolTftV1TftOrb: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolTftV1TftPendingTftGamesCount get lol tft v1 tft pending tft games count API
*/
func (a *Client) GetLolTftV1TftPendingTftGamesCount(params *GetLolTftV1TftPendingTftGamesCountParams) (*GetLolTftV1TftPendingTftGamesCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolTftV1TftPendingTftGamesCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolTftV1TftPendingTftGamesCount",
		Method:             "GET",
		PathPattern:        "/lol-tft/v1/tft/pending-tft-games-count",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolTftV1TftPendingTftGamesCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolTftV1TftPendingTftGamesCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolTftV1TftPendingTftGamesCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolTftV1TftWeeklyMissions get lol tft v1 tft weekly missions API
*/
func (a *Client) GetLolTftV1TftWeeklyMissions(params *GetLolTftV1TftWeeklyMissionsParams) (*GetLolTftV1TftWeeklyMissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolTftV1TftWeeklyMissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolTftV1TftWeeklyMissions",
		Method:             "GET",
		PathPattern:        "/lol-tft/v1/tft/weekly-missions",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolTftV1TftWeeklyMissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolTftV1TftWeeklyMissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolTftV1TftWeeklyMissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolTokenUpsellV1All get lol token upsell v1 all API
*/
func (a *Client) GetLolTokenUpsellV1All(params *GetLolTokenUpsellV1AllParams) (*GetLolTokenUpsellV1AllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolTokenUpsellV1AllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolTokenUpsellV1All",
		Method:             "GET",
		PathPattern:        "/lol-token-upsell/v1/all",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolTokenUpsellV1AllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolTokenUpsellV1AllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolTokenUpsellV1All: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolTrophiesV1CurrentSummonerTrophiesProfile get lol trophies v1 current summoner trophies profile API
*/
func (a *Client) GetLolTrophiesV1CurrentSummonerTrophiesProfile(params *GetLolTrophiesV1CurrentSummonerTrophiesProfileParams) (*GetLolTrophiesV1CurrentSummonerTrophiesProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolTrophiesV1CurrentSummonerTrophiesProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolTrophiesV1CurrentSummonerTrophiesProfile",
		Method:             "GET",
		PathPattern:        "/lol-trophies/v1/current-summoner/trophies/profile",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolTrophiesV1CurrentSummonerTrophiesProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolTrophiesV1CurrentSummonerTrophiesProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolTrophiesV1CurrentSummonerTrophiesProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLolTrophiesV1PlayersByPuuidTrophiesProfile get lol trophies v1 players by puuid trophies profile API
*/
func (a *Client) GetLolTrophiesV1PlayersByPuuidTrophiesProfile(params *GetLolTrophiesV1PlayersByPuuidTrophiesProfileParams) (*GetLolTrophiesV1PlayersByPuuidTrophiesProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLolTrophiesV1PlayersByPuuidTrophiesProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLolTrophiesV1PlayersByPuuidTrophiesProfile",
		Method:             "GET",
		PathPattern:        "/lol-trophies/v1/players/{puuid}/trophies/profile",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLolTrophiesV1PlayersByPuuidTrophiesProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLolTrophiesV1PlayersByPuuidTrophiesProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLolTrophiesV1PlayersByPuuidTrophiesProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPatcherV1Notifications get patcher v1 notifications API
*/
func (a *Client) GetPatcherV1Notifications(params *GetPatcherV1NotificationsParams) (*GetPatcherV1NotificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPatcherV1NotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPatcherV1Notifications",
		Method:             "GET",
		PathPattern:        "/patcher/v1/notifications",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPatcherV1NotificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPatcherV1NotificationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPatcherV1Notifications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPatcherV1P2pStatus get patcher v1 p2p status API
*/
func (a *Client) GetPatcherV1P2pStatus(params *GetPatcherV1P2pStatusParams) (*GetPatcherV1P2pStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPatcherV1P2pStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPatcherV1P2pStatus",
		Method:             "GET",
		PathPattern:        "/patcher/v1/p2p/status",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPatcherV1P2pStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPatcherV1P2pStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPatcherV1P2pStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPatcherV1Products get patcher v1 products API
*/
func (a *Client) GetPatcherV1Products(params *GetPatcherV1ProductsParams) (*GetPatcherV1ProductsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPatcherV1ProductsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPatcherV1Products",
		Method:             "GET",
		PathPattern:        "/patcher/v1/products",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPatcherV1ProductsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPatcherV1ProductsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPatcherV1Products: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPatcherV1ProductsByProductIDPaths get patcher v1 products by product Id paths API
*/
func (a *Client) GetPatcherV1ProductsByProductIDPaths(params *GetPatcherV1ProductsByProductIDPathsParams) (*GetPatcherV1ProductsByProductIDPathsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPatcherV1ProductsByProductIDPathsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPatcherV1ProductsByProductIdPaths",
		Method:             "GET",
		PathPattern:        "/patcher/v1/products/{product-id}/paths",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPatcherV1ProductsByProductIDPathsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPatcherV1ProductsByProductIDPathsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPatcherV1ProductsByProductIdPaths: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPatcherV1ProductsByProductIDState get patcher v1 products by product Id state API
*/
func (a *Client) GetPatcherV1ProductsByProductIDState(params *GetPatcherV1ProductsByProductIDStateParams) (*GetPatcherV1ProductsByProductIDStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPatcherV1ProductsByProductIDStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPatcherV1ProductsByProductIdState",
		Method:             "GET",
		PathPattern:        "/patcher/v1/products/{product-id}/state",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPatcherV1ProductsByProductIDStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPatcherV1ProductsByProductIDStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPatcherV1ProductsByProductIdState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPatcherV1ProductsByProductIDTags get patcher v1 products by product Id tags API
*/
func (a *Client) GetPatcherV1ProductsByProductIDTags(params *GetPatcherV1ProductsByProductIDTagsParams) (*GetPatcherV1ProductsByProductIDTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPatcherV1ProductsByProductIDTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPatcherV1ProductsByProductIdTags",
		Method:             "GET",
		PathPattern:        "/patcher/v1/products/{product-id}/tags",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPatcherV1ProductsByProductIDTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPatcherV1ProductsByProductIDTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPatcherV1ProductsByProductIdTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPatcherV1Status get patcher v1 status API
*/
func (a *Client) GetPatcherV1Status(params *GetPatcherV1StatusParams) (*GetPatcherV1StatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPatcherV1StatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPatcherV1Status",
		Method:             "GET",
		PathPattern:        "/patcher/v1/status",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPatcherV1StatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPatcherV1StatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPatcherV1Status: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPlayerNotificationsV1Config get player notifications v1 config API
*/
func (a *Client) GetPlayerNotificationsV1Config(params *GetPlayerNotificationsV1ConfigParams) (*GetPlayerNotificationsV1ConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlayerNotificationsV1ConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPlayerNotificationsV1Config",
		Method:             "GET",
		PathPattern:        "/player-notifications/v1/config",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPlayerNotificationsV1ConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPlayerNotificationsV1ConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPlayerNotificationsV1Config: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPlayerNotificationsV1Notifications get player notifications v1 notifications API
*/
func (a *Client) GetPlayerNotificationsV1Notifications(params *GetPlayerNotificationsV1NotificationsParams) (*GetPlayerNotificationsV1NotificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlayerNotificationsV1NotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPlayerNotificationsV1Notifications",
		Method:             "GET",
		PathPattern:        "/player-notifications/v1/notifications",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPlayerNotificationsV1NotificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPlayerNotificationsV1NotificationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPlayerNotificationsV1Notifications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPlayerNotificationsV1NotificationsByID get player notifications v1 notifications by Id API
*/
func (a *Client) GetPlayerNotificationsV1NotificationsByID(params *GetPlayerNotificationsV1NotificationsByIDParams) (*GetPlayerNotificationsV1NotificationsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlayerNotificationsV1NotificationsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPlayerNotificationsV1NotificationsById",
		Method:             "GET",
		PathPattern:        "/player-notifications/v1/notifications/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPlayerNotificationsV1NotificationsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPlayerNotificationsV1NotificationsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPlayerNotificationsV1NotificationsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPluginManagerV1ExternalPluginsAvailability gets the status of the external plugin connection
*/
func (a *Client) GetPluginManagerV1ExternalPluginsAvailability(params *GetPluginManagerV1ExternalPluginsAvailabilityParams) (*GetPluginManagerV1ExternalPluginsAvailabilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginManagerV1ExternalPluginsAvailabilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPluginManagerV1ExternalPluginsAvailability",
		Method:             "GET",
		PathPattern:        "/plugin-manager/v1/external-plugins/availability",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPluginManagerV1ExternalPluginsAvailabilityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPluginManagerV1ExternalPluginsAvailabilityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPluginManagerV1ExternalPluginsAvailability: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPluginManagerV1Status gets the status of the plugin manager
*/
func (a *Client) GetPluginManagerV1Status(params *GetPluginManagerV1StatusParams) (*GetPluginManagerV1StatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginManagerV1StatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPluginManagerV1Status",
		Method:             "GET",
		PathPattern:        "/plugin-manager/v1/status",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPluginManagerV1StatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPluginManagerV1StatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPluginManagerV1Status: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPluginManagerV2Descriptions gets all plugin descriptions
*/
func (a *Client) GetPluginManagerV2Descriptions(params *GetPluginManagerV2DescriptionsParams) (*GetPluginManagerV2DescriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginManagerV2DescriptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPluginManagerV2Descriptions",
		Method:             "GET",
		PathPattern:        "/plugin-manager/v2/descriptions",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPluginManagerV2DescriptionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPluginManagerV2DescriptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPluginManagerV2Descriptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPluginManagerV2DescriptionsByPlugin gets a plugin description
*/
func (a *Client) GetPluginManagerV2DescriptionsByPlugin(params *GetPluginManagerV2DescriptionsByPluginParams) (*GetPluginManagerV2DescriptionsByPluginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginManagerV2DescriptionsByPluginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPluginManagerV2DescriptionsByPlugin",
		Method:             "GET",
		PathPattern:        "/plugin-manager/v2/descriptions/{plugin}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPluginManagerV2DescriptionsByPluginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPluginManagerV2DescriptionsByPluginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPluginManagerV2DescriptionsByPlugin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPluginManagerV2Plugins gets diagnostic information for all plugins
*/
func (a *Client) GetPluginManagerV2Plugins(params *GetPluginManagerV2PluginsParams) (*GetPluginManagerV2PluginsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginManagerV2PluginsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPluginManagerV2Plugins",
		Method:             "GET",
		PathPattern:        "/plugin-manager/v2/plugins",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPluginManagerV2PluginsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPluginManagerV2PluginsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPluginManagerV2Plugins: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPluginManagerV2PluginsByPlugin gets diagnostic information for a single plugin
*/
func (a *Client) GetPluginManagerV2PluginsByPlugin(params *GetPluginManagerV2PluginsByPluginParams) (*GetPluginManagerV2PluginsByPluginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginManagerV2PluginsByPluginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPluginManagerV2PluginsByPlugin",
		Method:             "GET",
		PathPattern:        "/plugin-manager/v2/plugins/{plugin}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPluginManagerV2PluginsByPluginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPluginManagerV2PluginsByPluginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPluginManagerV2PluginsByPlugin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPluginManagerV3PluginsManifest gets the plugin manifest
*/
func (a *Client) GetPluginManagerV3PluginsManifest(params *GetPluginManagerV3PluginsManifestParams) (*GetPluginManagerV3PluginsManifestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginManagerV3PluginsManifestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPluginManagerV3PluginsManifest",
		Method:             "GET",
		PathPattern:        "/plugin-manager/v3/plugins-manifest",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPluginManagerV3PluginsManifestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPluginManagerV3PluginsManifestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPluginManagerV3PluginsManifest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRecofrienderV1Config get recofriender v1 config API
*/
func (a *Client) GetRecofrienderV1Config(params *GetRecofrienderV1ConfigParams) (*GetRecofrienderV1ConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecofrienderV1ConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRecofrienderV1Config",
		Method:             "GET",
		PathPattern:        "/recofriender/v1/config",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRecofrienderV1ConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRecofrienderV1ConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRecofrienderV1Config: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRecofrienderV1ConfigByNetwork get recofriender v1 config by network API
*/
func (a *Client) GetRecofrienderV1ConfigByNetwork(params *GetRecofrienderV1ConfigByNetworkParams) (*GetRecofrienderV1ConfigByNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecofrienderV1ConfigByNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRecofrienderV1ConfigByNetwork",
		Method:             "GET",
		PathPattern:        "/recofriender/v1/config/{network}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRecofrienderV1ConfigByNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRecofrienderV1ConfigByNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRecofrienderV1ConfigByNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRecofrienderV1Contacts get recofriender v1 contacts API
*/
func (a *Client) GetRecofrienderV1Contacts(params *GetRecofrienderV1ContactsParams) (*GetRecofrienderV1ContactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecofrienderV1ContactsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRecofrienderV1Contacts",
		Method:             "GET",
		PathPattern:        "/recofriender/v1/contacts",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRecofrienderV1ContactsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRecofrienderV1ContactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRecofrienderV1Contacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRecofrienderV1Debug get recofriender v1 debug API
*/
func (a *Client) GetRecofrienderV1Debug(params *GetRecofrienderV1DebugParams) (*GetRecofrienderV1DebugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecofrienderV1DebugParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRecofrienderV1Debug",
		Method:             "GET",
		PathPattern:        "/recofriender/v1/debug",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRecofrienderV1DebugReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRecofrienderV1DebugOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRecofrienderV1Debug: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRecofrienderV1FaqURL get recofriender v1 faq Url API
*/
func (a *Client) GetRecofrienderV1FaqURL(params *GetRecofrienderV1FaqURLParams) (*GetRecofrienderV1FaqURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecofrienderV1FaqURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRecofrienderV1FaqUrl",
		Method:             "GET",
		PathPattern:        "/recofriender/v1/faq-url",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRecofrienderV1FaqURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRecofrienderV1FaqURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRecofrienderV1FaqUrl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRecofrienderV1Registrations get recofriender v1 registrations API
*/
func (a *Client) GetRecofrienderV1Registrations(params *GetRecofrienderV1RegistrationsParams) (*GetRecofrienderV1RegistrationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecofrienderV1RegistrationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRecofrienderV1Registrations",
		Method:             "GET",
		PathPattern:        "/recofriender/v1/registrations",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRecofrienderV1RegistrationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRecofrienderV1RegistrationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRecofrienderV1Registrations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRecofrienderV1RegistrationsByNetwork get recofriender v1 registrations by network API
*/
func (a *Client) GetRecofrienderV1RegistrationsByNetwork(params *GetRecofrienderV1RegistrationsByNetworkParams) (*GetRecofrienderV1RegistrationsByNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecofrienderV1RegistrationsByNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRecofrienderV1RegistrationsByNetwork",
		Method:             "GET",
		PathPattern:        "/recofriender/v1/registrations/{network}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRecofrienderV1RegistrationsByNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRecofrienderV1RegistrationsByNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRecofrienderV1RegistrationsByNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRecofrienderV2Contacts get recofriender v2 contacts API
*/
func (a *Client) GetRecofrienderV2Contacts(params *GetRecofrienderV2ContactsParams) (*GetRecofrienderV2ContactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecofrienderV2ContactsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRecofrienderV2Contacts",
		Method:             "GET",
		PathPattern:        "/recofriender/v2/contacts",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRecofrienderV2ContactsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRecofrienderV2ContactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRecofrienderV2Contacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRecofrienderV2ContactsByAccountID get recofriender v2 contacts by account Id API
*/
func (a *Client) GetRecofrienderV2ContactsByAccountID(params *GetRecofrienderV2ContactsByAccountIDParams) (*GetRecofrienderV2ContactsByAccountIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecofrienderV2ContactsByAccountIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRecofrienderV2ContactsByAccountId",
		Method:             "GET",
		PathPattern:        "/recofriender/v2/contacts/{accountId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRecofrienderV2ContactsByAccountIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRecofrienderV2ContactsByAccountIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRecofrienderV2ContactsByAccountId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRecofrienderV2ContactsPage get recofriender v2 contacts page API
*/
func (a *Client) GetRecofrienderV2ContactsPage(params *GetRecofrienderV2ContactsPageParams) (*GetRecofrienderV2ContactsPageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecofrienderV2ContactsPageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRecofrienderV2ContactsPage",
		Method:             "GET",
		PathPattern:        "/recofriender/v2/contacts/page",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRecofrienderV2ContactsPageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRecofrienderV2ContactsPageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRecofrienderV2ContactsPage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRecofrienderV2Dismissed get recofriender v2 dismissed API
*/
func (a *Client) GetRecofrienderV2Dismissed(params *GetRecofrienderV2DismissedParams) (*GetRecofrienderV2DismissedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecofrienderV2DismissedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRecofrienderV2Dismissed",
		Method:             "GET",
		PathPattern:        "/recofriender/v2/dismissed",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRecofrienderV2DismissedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRecofrienderV2DismissedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRecofrienderV2Dismissed: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRecofrienderV2DismissedPage get recofriender v2 dismissed page API
*/
func (a *Client) GetRecofrienderV2DismissedPage(params *GetRecofrienderV2DismissedPageParams) (*GetRecofrienderV2DismissedPageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecofrienderV2DismissedPageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRecofrienderV2DismissedPage",
		Method:             "GET",
		PathPattern:        "/recofriender/v2/dismissed/page",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRecofrienderV2DismissedPageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRecofrienderV2DismissedPageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRecofrienderV2DismissedPage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRiotMessagingServiceV1MessageByA get riot messaging service v1 message by a API
*/
func (a *Client) GetRiotMessagingServiceV1MessageByA(params *GetRiotMessagingServiceV1MessageByAParams) (*GetRiotMessagingServiceV1MessageByAOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRiotMessagingServiceV1MessageByAParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRiotMessagingServiceV1MessageByA",
		Method:             "GET",
		PathPattern:        "/riot-messaging-service/v1/message/{a}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRiotMessagingServiceV1MessageByAReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRiotMessagingServiceV1MessageByAOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRiotMessagingServiceV1MessageByA: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRiotMessagingServiceV1MessageByAByB get riot messaging service v1 message by a by b API
*/
func (a *Client) GetRiotMessagingServiceV1MessageByAByB(params *GetRiotMessagingServiceV1MessageByAByBParams) (*GetRiotMessagingServiceV1MessageByAByBOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRiotMessagingServiceV1MessageByAByBParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRiotMessagingServiceV1MessageByAByB",
		Method:             "GET",
		PathPattern:        "/riot-messaging-service/v1/message/{a}/{b}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRiotMessagingServiceV1MessageByAByBReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRiotMessagingServiceV1MessageByAByBOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRiotMessagingServiceV1MessageByAByB: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRiotMessagingServiceV1MessageByAByBByC get riot messaging service v1 message by a by b by c API
*/
func (a *Client) GetRiotMessagingServiceV1MessageByAByBByC(params *GetRiotMessagingServiceV1MessageByAByBByCParams) (*GetRiotMessagingServiceV1MessageByAByBByCOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRiotMessagingServiceV1MessageByAByBByCParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRiotMessagingServiceV1MessageByAByBByC",
		Method:             "GET",
		PathPattern:        "/riot-messaging-service/v1/message/{a}/{b}/{c}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRiotMessagingServiceV1MessageByAByBByCReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRiotMessagingServiceV1MessageByAByBByCOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRiotMessagingServiceV1MessageByAByBByC: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRiotMessagingServiceV1MessageByAByBByCByD get riot messaging service v1 message by a by b by c by d API
*/
func (a *Client) GetRiotMessagingServiceV1MessageByAByBByCByD(params *GetRiotMessagingServiceV1MessageByAByBByCByDParams) (*GetRiotMessagingServiceV1MessageByAByBByCByDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRiotMessagingServiceV1MessageByAByBByCByDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRiotMessagingServiceV1MessageByAByBByCByD",
		Method:             "GET",
		PathPattern:        "/riot-messaging-service/v1/message/{a}/{b}/{c}/{d}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRiotMessagingServiceV1MessageByAByBByCByDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRiotMessagingServiceV1MessageByAByBByCByDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRiotMessagingServiceV1MessageByAByBByCByD: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRiotMessagingServiceV1MessageByAByBByCByDByE get riot messaging service v1 message by a by b by c by d by e API
*/
func (a *Client) GetRiotMessagingServiceV1MessageByAByBByCByDByE(params *GetRiotMessagingServiceV1MessageByAByBByCByDByEParams) (*GetRiotMessagingServiceV1MessageByAByBByCByDByEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRiotMessagingServiceV1MessageByAByBByCByDByEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRiotMessagingServiceV1MessageByAByBByCByDByE",
		Method:             "GET",
		PathPattern:        "/riot-messaging-service/v1/message/{a}/{b}/{c}/{d}/{e}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRiotMessagingServiceV1MessageByAByBByCByDByEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRiotMessagingServiceV1MessageByAByBByCByDByEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRiotMessagingServiceV1MessageByAByBByCByDByE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRiotMessagingServiceV1MessageByAByBByCByDByEByF get riot messaging service v1 message by a by b by c by d by e by f API
*/
func (a *Client) GetRiotMessagingServiceV1MessageByAByBByCByDByEByF(params *GetRiotMessagingServiceV1MessageByAByBByCByDByEByFParams) (*GetRiotMessagingServiceV1MessageByAByBByCByDByEByFOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRiotMessagingServiceV1MessageByAByBByCByDByEByFParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRiotMessagingServiceV1MessageByAByBByCByDByEByF",
		Method:             "GET",
		PathPattern:        "/riot-messaging-service/v1/message/{a}/{b}/{c}/{d}/{e}/{f}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRiotMessagingServiceV1MessageByAByBByCByDByEByFReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRiotMessagingServiceV1MessageByAByBByCByDByEByFOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRiotMessagingServiceV1MessageByAByBByCByDByEByF: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRiotMessagingServiceV1Session get riot messaging service v1 session API
*/
func (a *Client) GetRiotMessagingServiceV1Session(params *GetRiotMessagingServiceV1SessionParams) (*GetRiotMessagingServiceV1SessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRiotMessagingServiceV1SessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRiotMessagingServiceV1Session",
		Method:             "GET",
		PathPattern:        "/riot-messaging-service/v1/session",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRiotMessagingServiceV1SessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRiotMessagingServiceV1SessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRiotMessagingServiceV1Session: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRiotMessagingServiceV1State get riot messaging service v1 state API
*/
func (a *Client) GetRiotMessagingServiceV1State(params *GetRiotMessagingServiceV1StateParams) (*GetRiotMessagingServiceV1StateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRiotMessagingServiceV1StateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRiotMessagingServiceV1State",
		Method:             "GET",
		PathPattern:        "/riot-messaging-service/v1/state",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRiotMessagingServiceV1StateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRiotMessagingServiceV1StateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRiotMessagingServiceV1State: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSanitizerV1Status get sanitizer v1 status API
*/
func (a *Client) GetSanitizerV1Status(params *GetSanitizerV1StatusParams) (*GetSanitizerV1StatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSanitizerV1StatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSanitizerV1Status",
		Method:             "GET",
		PathPattern:        "/sanitizer/v1/status",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSanitizerV1StatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSanitizerV1StatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSanitizerV1Status: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVoiceChatV1AudioProperties get voice chat v1 audio properties API
*/
func (a *Client) GetVoiceChatV1AudioProperties(params *GetVoiceChatV1AudioPropertiesParams) (*GetVoiceChatV1AudioPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVoiceChatV1AudioPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVoiceChatV1AudioProperties",
		Method:             "GET",
		PathPattern:        "/voice-chat/v1/audio-properties",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVoiceChatV1AudioPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVoiceChatV1AudioPropertiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVoiceChatV1AudioProperties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVoiceChatV1CallStatsAggregate get voice chat v1 call stats aggregate API
*/
func (a *Client) GetVoiceChatV1CallStatsAggregate(params *GetVoiceChatV1CallStatsAggregateParams) (*GetVoiceChatV1CallStatsAggregateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVoiceChatV1CallStatsAggregateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVoiceChatV1CallStatsAggregate",
		Method:             "GET",
		PathPattern:        "/voice-chat/v1/call-stats/aggregate",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVoiceChatV1CallStatsAggregateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVoiceChatV1CallStatsAggregateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVoiceChatV1CallStatsAggregate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVoiceChatV1CallStatsByID get voice chat v1 call stats by Id API
*/
func (a *Client) GetVoiceChatV1CallStatsByID(params *GetVoiceChatV1CallStatsByIDParams) (*GetVoiceChatV1CallStatsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVoiceChatV1CallStatsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVoiceChatV1CallStatsById",
		Method:             "GET",
		PathPattern:        "/voice-chat/v1/call-stats/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVoiceChatV1CallStatsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVoiceChatV1CallStatsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVoiceChatV1CallStatsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVoiceChatV1CodecSettings get voice chat v1 codec settings API
*/
func (a *Client) GetVoiceChatV1CodecSettings(params *GetVoiceChatV1CodecSettingsParams) (*GetVoiceChatV1CodecSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVoiceChatV1CodecSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVoiceChatV1CodecSettings",
		Method:             "GET",
		PathPattern:        "/voice-chat/v1/codec-settings",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVoiceChatV1CodecSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVoiceChatV1CodecSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVoiceChatV1CodecSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVoiceChatV1Config get voice chat v1 config API
*/
func (a *Client) GetVoiceChatV1Config(params *GetVoiceChatV1ConfigParams) (*GetVoiceChatV1ConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVoiceChatV1ConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVoiceChatV1Config",
		Method:             "GET",
		PathPattern:        "/voice-chat/v1/config",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVoiceChatV1ConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVoiceChatV1ConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVoiceChatV1Config: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVoiceChatV1Errors get voice chat v1 errors API
*/
func (a *Client) GetVoiceChatV1Errors(params *GetVoiceChatV1ErrorsParams) (*GetVoiceChatV1ErrorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVoiceChatV1ErrorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVoiceChatV1Errors",
		Method:             "GET",
		PathPattern:        "/voice-chat/v1/errors",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVoiceChatV1ErrorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVoiceChatV1ErrorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVoiceChatV1Errors: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVoiceChatV1PushToTalk get voice chat v1 push to talk API
*/
func (a *Client) GetVoiceChatV1PushToTalk(params *GetVoiceChatV1PushToTalkParams) (*GetVoiceChatV1PushToTalkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVoiceChatV1PushToTalkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVoiceChatV1PushToTalk",
		Method:             "GET",
		PathPattern:        "/voice-chat/v1/push-to-talk",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVoiceChatV1PushToTalkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVoiceChatV1PushToTalkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVoiceChatV1PushToTalk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVoiceChatV2DevicesCapture get voice chat v2 devices capture API
*/
func (a *Client) GetVoiceChatV2DevicesCapture(params *GetVoiceChatV2DevicesCaptureParams) (*GetVoiceChatV2DevicesCaptureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVoiceChatV2DevicesCaptureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVoiceChatV2DevicesCapture",
		Method:             "GET",
		PathPattern:        "/voice-chat/v2/devices/capture",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVoiceChatV2DevicesCaptureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVoiceChatV2DevicesCaptureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVoiceChatV2DevicesCapture: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVoiceChatV2DevicesCapturePermission get voice chat v2 devices capture permission API
*/
func (a *Client) GetVoiceChatV2DevicesCapturePermission(params *GetVoiceChatV2DevicesCapturePermissionParams) (*GetVoiceChatV2DevicesCapturePermissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVoiceChatV2DevicesCapturePermissionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVoiceChatV2DevicesCapturePermission",
		Method:             "GET",
		PathPattern:        "/voice-chat/v2/devices/capture/permission",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVoiceChatV2DevicesCapturePermissionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVoiceChatV2DevicesCapturePermissionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVoiceChatV2DevicesCapturePermission: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVoiceChatV2DevicesRender get voice chat v2 devices render API
*/
func (a *Client) GetVoiceChatV2DevicesRender(params *GetVoiceChatV2DevicesRenderParams) (*GetVoiceChatV2DevicesRenderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVoiceChatV2DevicesRenderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVoiceChatV2DevicesRender",
		Method:             "GET",
		PathPattern:        "/voice-chat/v2/devices/render",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVoiceChatV2DevicesRenderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVoiceChatV2DevicesRenderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVoiceChatV2DevicesRender: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVoiceChatV2Sessions get voice chat v2 sessions API
*/
func (a *Client) GetVoiceChatV2Sessions(params *GetVoiceChatV2SessionsParams) (*GetVoiceChatV2SessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVoiceChatV2SessionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVoiceChatV2Sessions",
		Method:             "GET",
		PathPattern:        "/voice-chat/v2/sessions",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVoiceChatV2SessionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVoiceChatV2SessionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVoiceChatV2Sessions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVoiceChatV2SessionsByID get voice chat v2 sessions by Id API
*/
func (a *Client) GetVoiceChatV2SessionsByID(params *GetVoiceChatV2SessionsByIDParams) (*GetVoiceChatV2SessionsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVoiceChatV2SessionsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVoiceChatV2SessionsById",
		Method:             "GET",
		PathPattern:        "/voice-chat/v2/sessions/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVoiceChatV2SessionsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVoiceChatV2SessionsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVoiceChatV2SessionsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVoiceChatV2SessionsBySessionIDParticipantsByParticipantID get voice chat v2 sessions by session Id participants by participant Id API
*/
func (a *Client) GetVoiceChatV2SessionsBySessionIDParticipantsByParticipantID(params *GetVoiceChatV2SessionsBySessionIDParticipantsByParticipantIDParams) (*GetVoiceChatV2SessionsBySessionIDParticipantsByParticipantIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVoiceChatV2SessionsBySessionIDParticipantsByParticipantIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVoiceChatV2SessionsBySessionIdParticipantsByParticipantId",
		Method:             "GET",
		PathPattern:        "/voice-chat/v2/sessions/{sessionId}/participants/{participantId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVoiceChatV2SessionsBySessionIDParticipantsByParticipantIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVoiceChatV2SessionsBySessionIDParticipantsByParticipantIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVoiceChatV2SessionsBySessionIdParticipantsByParticipantId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVoiceChatV2Settings get voice chat v2 settings API
*/
func (a *Client) GetVoiceChatV2Settings(params *GetVoiceChatV2SettingsParams) (*GetVoiceChatV2SettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVoiceChatV2SettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVoiceChatV2Settings",
		Method:             "GET",
		PathPattern:        "/voice-chat/v2/settings",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVoiceChatV2SettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVoiceChatV2SettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVoiceChatV2Settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVoiceChatV2State get voice chat v2 state API
*/
func (a *Client) GetVoiceChatV2State(params *GetVoiceChatV2StateParams) (*GetVoiceChatV2StateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVoiceChatV2StateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVoiceChatV2State",
		Method:             "GET",
		PathPattern:        "/voice-chat/v2/state",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVoiceChatV2StateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVoiceChatV2StateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVoiceChatV2State: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadByPluginAssetsByPath downloads the header for a backend asset
*/
func (a *Client) HeadByPluginAssetsByPath(params *HeadByPluginAssetsByPathParams) (*HeadByPluginAssetsByPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadByPluginAssetsByPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HeadByPluginAssetsByPath",
		Method:             "HEAD",
		PathPattern:        "/{plugin}/assets/{path}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadByPluginAssetsByPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadByPluginAssetsByPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadByPluginAssetsByPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchLolChampSelectLegacyV1SessionActionsByID patch lol champ select legacy v1 session actions by Id API
*/
func (a *Client) PatchLolChampSelectLegacyV1SessionActionsByID(params *PatchLolChampSelectLegacyV1SessionActionsByIDParams) (*PatchLolChampSelectLegacyV1SessionActionsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLolChampSelectLegacyV1SessionActionsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLolChampSelectLegacyV1SessionActionsById",
		Method:             "PATCH",
		PathPattern:        "/lol-champ-select-legacy/v1/session/actions/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchLolChampSelectLegacyV1SessionActionsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLolChampSelectLegacyV1SessionActionsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLolChampSelectLegacyV1SessionActionsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchLolChampSelectLegacyV1SessionMySelection patch lol champ select legacy v1 session my selection API
*/
func (a *Client) PatchLolChampSelectLegacyV1SessionMySelection(params *PatchLolChampSelectLegacyV1SessionMySelectionParams) (*PatchLolChampSelectLegacyV1SessionMySelectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLolChampSelectLegacyV1SessionMySelectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLolChampSelectLegacyV1SessionMySelection",
		Method:             "PATCH",
		PathPattern:        "/lol-champ-select-legacy/v1/session/my-selection",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchLolChampSelectLegacyV1SessionMySelectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLolChampSelectLegacyV1SessionMySelectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLolChampSelectLegacyV1SessionMySelection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchLolChampSelectV1SessionActionsByID patch lol champ select v1 session actions by Id API
*/
func (a *Client) PatchLolChampSelectV1SessionActionsByID(params *PatchLolChampSelectV1SessionActionsByIDParams) (*PatchLolChampSelectV1SessionActionsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLolChampSelectV1SessionActionsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLolChampSelectV1SessionActionsById",
		Method:             "PATCH",
		PathPattern:        "/lol-champ-select/v1/session/actions/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchLolChampSelectV1SessionActionsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLolChampSelectV1SessionActionsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLolChampSelectV1SessionActionsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchLolChampSelectV1SessionMySelection patch lol champ select v1 session my selection API
*/
func (a *Client) PatchLolChampSelectV1SessionMySelection(params *PatchLolChampSelectV1SessionMySelectionParams) (*PatchLolChampSelectV1SessionMySelectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLolChampSelectV1SessionMySelectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLolChampSelectV1SessionMySelection",
		Method:             "PATCH",
		PathPattern:        "/lol-champ-select/v1/session/my-selection",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchLolChampSelectV1SessionMySelectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLolChampSelectV1SessionMySelectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLolChampSelectV1SessionMySelection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchLolClubsV1ClubsByClubKey patch lol clubs v1 clubs by club key API
*/
func (a *Client) PatchLolClubsV1ClubsByClubKey(params *PatchLolClubsV1ClubsByClubKeyParams) (*PatchLolClubsV1ClubsByClubKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLolClubsV1ClubsByClubKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLolClubsV1ClubsByClubKey",
		Method:             "PATCH",
		PathPattern:        "/lol-clubs/v1/clubs/{clubKey}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchLolClubsV1ClubsByClubKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLolClubsV1ClubsByClubKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLolClubsV1ClubsByClubKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchLolClubsV1ClubsByClubKeyMotd patch lol clubs v1 clubs by club key motd API
*/
func (a *Client) PatchLolClubsV1ClubsByClubKeyMotd(params *PatchLolClubsV1ClubsByClubKeyMotdParams) (*PatchLolClubsV1ClubsByClubKeyMotdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLolClubsV1ClubsByClubKeyMotdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLolClubsV1ClubsByClubKeyMotd",
		Method:             "PATCH",
		PathPattern:        "/lol-clubs/v1/clubs/{clubKey}/motd",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchLolClubsV1ClubsByClubKeyMotdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLolClubsV1ClubsByClubKeyMotdOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLolClubsV1ClubsByClubKeyMotd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchLolClubsV1ClubsInvitations patch lol clubs v1 clubs invitations API
*/
func (a *Client) PatchLolClubsV1ClubsInvitations(params *PatchLolClubsV1ClubsInvitationsParams) (*PatchLolClubsV1ClubsInvitationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLolClubsV1ClubsInvitationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLolClubsV1ClubsInvitations",
		Method:             "PATCH",
		PathPattern:        "/lol-clubs/v1/clubs/invitations",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchLolClubsV1ClubsInvitationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLolClubsV1ClubsInvitationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLolClubsV1ClubsInvitations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchLolClubsV1ClubsMembershipPreferences patch lol clubs v1 clubs membership preferences API
*/
func (a *Client) PatchLolClubsV1ClubsMembershipPreferences(params *PatchLolClubsV1ClubsMembershipPreferencesParams) (*PatchLolClubsV1ClubsMembershipPreferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLolClubsV1ClubsMembershipPreferencesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLolClubsV1ClubsMembershipPreferences",
		Method:             "PATCH",
		PathPattern:        "/lol-clubs/v1/clubs/membership/preferences",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchLolClubsV1ClubsMembershipPreferencesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLolClubsV1ClubsMembershipPreferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLolClubsV1ClubsMembershipPreferences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchLolGameSettingsV1GameSettings patch lol game settings v1 game settings API
*/
func (a *Client) PatchLolGameSettingsV1GameSettings(params *PatchLolGameSettingsV1GameSettingsParams) (*PatchLolGameSettingsV1GameSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLolGameSettingsV1GameSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLolGameSettingsV1GameSettings",
		Method:             "PATCH",
		PathPattern:        "/lol-game-settings/v1/game-settings",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchLolGameSettingsV1GameSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLolGameSettingsV1GameSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLolGameSettingsV1GameSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchLolGameSettingsV1InputSettings patch lol game settings v1 input settings API
*/
func (a *Client) PatchLolGameSettingsV1InputSettings(params *PatchLolGameSettingsV1InputSettingsParams) (*PatchLolGameSettingsV1InputSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLolGameSettingsV1InputSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLolGameSettingsV1InputSettings",
		Method:             "PATCH",
		PathPattern:        "/lol-game-settings/v1/input-settings",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchLolGameSettingsV1InputSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLolGameSettingsV1InputSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLolGameSettingsV1InputSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchLolLoadoutsV4LoadoutsByID patch lol loadouts v4 loadouts by Id API
*/
func (a *Client) PatchLolLoadoutsV4LoadoutsByID(params *PatchLolLoadoutsV4LoadoutsByIDParams) (*PatchLolLoadoutsV4LoadoutsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLolLoadoutsV4LoadoutsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLolLoadoutsV4LoadoutsById",
		Method:             "PATCH",
		PathPattern:        "/lol-loadouts/v4/loadouts/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchLolLoadoutsV4LoadoutsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLolLoadoutsV4LoadoutsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLolLoadoutsV4LoadoutsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchLolLobbyTeamBuilderChampSelectV1SessionActionsByID patch lol lobby team builder champ select v1 session actions by Id API
*/
func (a *Client) PatchLolLobbyTeamBuilderChampSelectV1SessionActionsByID(params *PatchLolLobbyTeamBuilderChampSelectV1SessionActionsByIDParams) (*PatchLolLobbyTeamBuilderChampSelectV1SessionActionsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLolLobbyTeamBuilderChampSelectV1SessionActionsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLolLobbyTeamBuilderChampSelectV1SessionActionsById",
		Method:             "PATCH",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/session/actions/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchLolLobbyTeamBuilderChampSelectV1SessionActionsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLolLobbyTeamBuilderChampSelectV1SessionActionsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLolLobbyTeamBuilderChampSelectV1SessionActionsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchLolLobbyTeamBuilderChampSelectV1SessionMySelection patch lol lobby team builder champ select v1 session my selection API
*/
func (a *Client) PatchLolLobbyTeamBuilderChampSelectV1SessionMySelection(params *PatchLolLobbyTeamBuilderChampSelectV1SessionMySelectionParams) (*PatchLolLobbyTeamBuilderChampSelectV1SessionMySelectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLolLobbyTeamBuilderChampSelectV1SessionMySelectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLolLobbyTeamBuilderChampSelectV1SessionMySelection",
		Method:             "PATCH",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/session/my-selection",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchLolLobbyTeamBuilderChampSelectV1SessionMySelectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLolLobbyTeamBuilderChampSelectV1SessionMySelectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLolLobbyTeamBuilderChampSelectV1SessionMySelection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchLolNpeTutorialPathV1TutorialsInit patch lol npe tutorial path v1 tutorials init API
*/
func (a *Client) PatchLolNpeTutorialPathV1TutorialsInit(params *PatchLolNpeTutorialPathV1TutorialsInitParams) (*PatchLolNpeTutorialPathV1TutorialsInitNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLolNpeTutorialPathV1TutorialsInitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLolNpeTutorialPathV1TutorialsInit",
		Method:             "PATCH",
		PathPattern:        "/lol-npe-tutorial-path/v1/tutorials/init",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchLolNpeTutorialPathV1TutorialsInitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLolNpeTutorialPathV1TutorialsInitNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLolNpeTutorialPathV1TutorialsInit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchLolSettingsV1AccountByCategory patch lol settings v1 account by category API
*/
func (a *Client) PatchLolSettingsV1AccountByCategory(params *PatchLolSettingsV1AccountByCategoryParams) (*PatchLolSettingsV1AccountByCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLolSettingsV1AccountByCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLolSettingsV1AccountByCategory",
		Method:             "PATCH",
		PathPattern:        "/lol-settings/v1/account/{category}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchLolSettingsV1AccountByCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLolSettingsV1AccountByCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLolSettingsV1AccountByCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchLolSettingsV1LocalByCategory patch lol settings v1 local by category API
*/
func (a *Client) PatchLolSettingsV1LocalByCategory(params *PatchLolSettingsV1LocalByCategoryParams) (*PatchLolSettingsV1LocalByCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLolSettingsV1LocalByCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLolSettingsV1LocalByCategory",
		Method:             "PATCH",
		PathPattern:        "/lol-settings/v1/local/{category}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchLolSettingsV1LocalByCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLolSettingsV1LocalByCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLolSettingsV1LocalByCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchLolSettingsV2AccountByPpTypeByCategory patch lol settings v2 account by pp type by category API
*/
func (a *Client) PatchLolSettingsV2AccountByPpTypeByCategory(params *PatchLolSettingsV2AccountByPpTypeByCategoryParams) (*PatchLolSettingsV2AccountByPpTypeByCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLolSettingsV2AccountByPpTypeByCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLolSettingsV2AccountByPpTypeByCategory",
		Method:             "PATCH",
		PathPattern:        "/lol-settings/v2/account/{ppType}/{category}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchLolSettingsV2AccountByPpTypeByCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLolSettingsV2AccountByPpTypeByCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLolSettingsV2AccountByPpTypeByCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchLolSettingsV2LocalByCategory patch lol settings v2 local by category API
*/
func (a *Client) PatchLolSettingsV2LocalByCategory(params *PatchLolSettingsV2LocalByCategoryParams) (*PatchLolSettingsV2LocalByCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLolSettingsV2LocalByCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLolSettingsV2LocalByCategory",
		Method:             "PATCH",
		PathPattern:        "/lol-settings/v2/local/{category}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchLolSettingsV2LocalByCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLolSettingsV2LocalByCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchLolSettingsV2LocalByCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchPatcherV1P2pStatus patch patcher v1 p2p status API
*/
func (a *Client) PatchPatcherV1P2pStatus(params *PatchPatcherV1P2pStatusParams) (*PatchPatcherV1P2pStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchPatcherV1P2pStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchPatcherV1P2pStatus",
		Method:             "PATCH",
		PathPattern:        "/patcher/v1/p2p/status",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchPatcherV1P2pStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchPatcherV1P2pStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchPatcherV1P2pStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostGcloudVoiceChatV1PushToTalkCheckAvailable post gcloud voice chat v1 push to talk check available API
*/
func (a *Client) PostGcloudVoiceChatV1PushToTalkCheckAvailable(params *PostGcloudVoiceChatV1PushToTalkCheckAvailableParams) (*PostGcloudVoiceChatV1PushToTalkCheckAvailableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGcloudVoiceChatV1PushToTalkCheckAvailableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostGcloudVoiceChatV1PushToTalkCheckAvailable",
		Method:             "POST",
		PathPattern:        "/gcloud-voice-chat/v1/push-to-talk/check-available",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostGcloudVoiceChatV1PushToTalkCheckAvailableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostGcloudVoiceChatV1PushToTalkCheckAvailableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostGcloudVoiceChatV1PushToTalkCheckAvailable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostGcloudVoiceChatV1SessionsByID post gcloud voice chat v1 sessions by Id API
*/
func (a *Client) PostGcloudVoiceChatV1SessionsByID(params *PostGcloudVoiceChatV1SessionsByIDParams) (*PostGcloudVoiceChatV1SessionsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGcloudVoiceChatV1SessionsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostGcloudVoiceChatV1SessionsById",
		Method:             "POST",
		PathPattern:        "/gcloud-voice-chat/v1/sessions/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostGcloudVoiceChatV1SessionsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostGcloudVoiceChatV1SessionsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostGcloudVoiceChatV1SessionsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostGcloudVoiceChatV2Sessions post gcloud voice chat v2 sessions API
*/
func (a *Client) PostGcloudVoiceChatV2Sessions(params *PostGcloudVoiceChatV2SessionsParams) (*PostGcloudVoiceChatV2SessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGcloudVoiceChatV2SessionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostGcloudVoiceChatV2Sessions",
		Method:             "POST",
		PathPattern:        "/gcloud-voice-chat/v2/sessions",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostGcloudVoiceChatV2SessionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostGcloudVoiceChatV2SessionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostGcloudVoiceChatV2Sessions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostGcloudVoiceChatV2SessionsByID post gcloud voice chat v2 sessions by Id API
*/
func (a *Client) PostGcloudVoiceChatV2SessionsByID(params *PostGcloudVoiceChatV2SessionsByIDParams) (*PostGcloudVoiceChatV2SessionsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGcloudVoiceChatV2SessionsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostGcloudVoiceChatV2SessionsById",
		Method:             "POST",
		PathPattern:        "/gcloud-voice-chat/v2/sessions/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostGcloudVoiceChatV2SessionsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostGcloudVoiceChatV2SessionsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostGcloudVoiceChatV2SessionsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolAccountVerificationV1Authenticate post lol account verification v1 authenticate API
*/
func (a *Client) PostLolAccountVerificationV1Authenticate(params *PostLolAccountVerificationV1AuthenticateParams) (*PostLolAccountVerificationV1AuthenticateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolAccountVerificationV1AuthenticateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolAccountVerificationV1Authenticate",
		Method:             "POST",
		PathPattern:        "/lol-account-verification/v1/authenticate",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolAccountVerificationV1AuthenticateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolAccountVerificationV1AuthenticateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolAccountVerificationV1Authenticate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolAccountVerificationV1Invalidate post lol account verification v1 invalidate API
*/
func (a *Client) PostLolAccountVerificationV1Invalidate(params *PostLolAccountVerificationV1InvalidateParams) (*PostLolAccountVerificationV1InvalidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolAccountVerificationV1InvalidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolAccountVerificationV1Invalidate",
		Method:             "POST",
		PathPattern:        "/lol-account-verification/v1/invalidate",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolAccountVerificationV1InvalidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolAccountVerificationV1InvalidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolAccountVerificationV1Invalidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolAccountVerificationV1SendToken post lol account verification v1 send token API
*/
func (a *Client) PostLolAccountVerificationV1SendToken(params *PostLolAccountVerificationV1SendTokenParams) (*PostLolAccountVerificationV1SendTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolAccountVerificationV1SendTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolAccountVerificationV1SendToken",
		Method:             "POST",
		PathPattern:        "/lol-account-verification/v1/send-token",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolAccountVerificationV1SendTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolAccountVerificationV1SendTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolAccountVerificationV1SendToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolAccountVerificationV1Verify post lol account verification v1 verify API
*/
func (a *Client) PostLolAccountVerificationV1Verify(params *PostLolAccountVerificationV1VerifyParams) (*PostLolAccountVerificationV1VerifyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolAccountVerificationV1VerifyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolAccountVerificationV1Verify",
		Method:             "POST",
		PathPattern:        "/lol-account-verification/v1/verify",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolAccountVerificationV1VerifyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolAccountVerificationV1VerifyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolAccountVerificationV1Verify: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolAcsV1AcsEndpointOverride post lol acs v1 acs endpoint override API
*/
func (a *Client) PostLolAcsV1AcsEndpointOverride(params *PostLolAcsV1AcsEndpointOverrideParams) (*PostLolAcsV1AcsEndpointOverrideOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolAcsV1AcsEndpointOverrideParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolAcsV1AcsEndpointOverride",
		Method:             "POST",
		PathPattern:        "/lol-acs/v1/acs-endpoint-override",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolAcsV1AcsEndpointOverrideReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolAcsV1AcsEndpointOverrideOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolAcsV1AcsEndpointOverride: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolCareerStatsV1ChampionStatsPercentiles post lol career stats v1 champion stats percentiles API
*/
func (a *Client) PostLolCareerStatsV1ChampionStatsPercentiles(params *PostLolCareerStatsV1ChampionStatsPercentilesParams) (*PostLolCareerStatsV1ChampionStatsPercentilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolCareerStatsV1ChampionStatsPercentilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolCareerStatsV1ChampionStatsPercentiles",
		Method:             "POST",
		PathPattern:        "/lol-career-stats/v1/champion-stats-percentiles",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolCareerStatsV1ChampionStatsPercentilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolCareerStatsV1ChampionStatsPercentilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolCareerStatsV1ChampionStatsPercentiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolCareerStatsV1PositionStatsPercentiles post lol career stats v1 position stats percentiles API
*/
func (a *Client) PostLolCareerStatsV1PositionStatsPercentiles(params *PostLolCareerStatsV1PositionStatsPercentilesParams) (*PostLolCareerStatsV1PositionStatsPercentilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolCareerStatsV1PositionStatsPercentilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolCareerStatsV1PositionStatsPercentiles",
		Method:             "POST",
		PathPattern:        "/lol-career-stats/v1/position-stats-percentiles",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolCareerStatsV1PositionStatsPercentilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolCareerStatsV1PositionStatsPercentilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolCareerStatsV1PositionStatsPercentiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChampSelectLegacyV1BattleTrainingLaunch post lol champ select legacy v1 battle training launch API
*/
func (a *Client) PostLolChampSelectLegacyV1BattleTrainingLaunch(params *PostLolChampSelectLegacyV1BattleTrainingLaunchParams) (*PostLolChampSelectLegacyV1BattleTrainingLaunchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChampSelectLegacyV1BattleTrainingLaunchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChampSelectLegacyV1BattleTrainingLaunch",
		Method:             "POST",
		PathPattern:        "/lol-champ-select-legacy/v1/battle-training/launch",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChampSelectLegacyV1BattleTrainingLaunchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChampSelectLegacyV1BattleTrainingLaunchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChampSelectLegacyV1BattleTrainingLaunch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChampSelectLegacyV1SessionActionsByIDComplete post lol champ select legacy v1 session actions by Id complete API
*/
func (a *Client) PostLolChampSelectLegacyV1SessionActionsByIDComplete(params *PostLolChampSelectLegacyV1SessionActionsByIDCompleteParams) (*PostLolChampSelectLegacyV1SessionActionsByIDCompleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChampSelectLegacyV1SessionActionsByIDCompleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChampSelectLegacyV1SessionActionsByIdComplete",
		Method:             "POST",
		PathPattern:        "/lol-champ-select-legacy/v1/session/actions/{id}/complete",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChampSelectLegacyV1SessionActionsByIDCompleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChampSelectLegacyV1SessionActionsByIDCompleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChampSelectLegacyV1SessionActionsByIdComplete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChampSelectLegacyV1SessionMySelectionReroll post lol champ select legacy v1 session my selection reroll API
*/
func (a *Client) PostLolChampSelectLegacyV1SessionMySelectionReroll(params *PostLolChampSelectLegacyV1SessionMySelectionRerollParams) (*PostLolChampSelectLegacyV1SessionMySelectionRerollOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChampSelectLegacyV1SessionMySelectionRerollParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChampSelectLegacyV1SessionMySelectionReroll",
		Method:             "POST",
		PathPattern:        "/lol-champ-select-legacy/v1/session/my-selection/reroll",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChampSelectLegacyV1SessionMySelectionRerollReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChampSelectLegacyV1SessionMySelectionRerollOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChampSelectLegacyV1SessionMySelectionReroll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChampSelectLegacyV1SessionTradesByIDAccept post lol champ select legacy v1 session trades by Id accept API
*/
func (a *Client) PostLolChampSelectLegacyV1SessionTradesByIDAccept(params *PostLolChampSelectLegacyV1SessionTradesByIDAcceptParams) (*PostLolChampSelectLegacyV1SessionTradesByIDAcceptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChampSelectLegacyV1SessionTradesByIDAcceptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChampSelectLegacyV1SessionTradesByIdAccept",
		Method:             "POST",
		PathPattern:        "/lol-champ-select-legacy/v1/session/trades/{id}/accept",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChampSelectLegacyV1SessionTradesByIDAcceptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChampSelectLegacyV1SessionTradesByIDAcceptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChampSelectLegacyV1SessionTradesByIdAccept: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChampSelectLegacyV1SessionTradesByIDCancel post lol champ select legacy v1 session trades by Id cancel API
*/
func (a *Client) PostLolChampSelectLegacyV1SessionTradesByIDCancel(params *PostLolChampSelectLegacyV1SessionTradesByIDCancelParams) (*PostLolChampSelectLegacyV1SessionTradesByIDCancelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChampSelectLegacyV1SessionTradesByIDCancelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChampSelectLegacyV1SessionTradesByIdCancel",
		Method:             "POST",
		PathPattern:        "/lol-champ-select-legacy/v1/session/trades/{id}/cancel",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChampSelectLegacyV1SessionTradesByIDCancelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChampSelectLegacyV1SessionTradesByIDCancelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChampSelectLegacyV1SessionTradesByIdCancel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChampSelectLegacyV1SessionTradesByIDDecline post lol champ select legacy v1 session trades by Id decline API
*/
func (a *Client) PostLolChampSelectLegacyV1SessionTradesByIDDecline(params *PostLolChampSelectLegacyV1SessionTradesByIDDeclineParams) (*PostLolChampSelectLegacyV1SessionTradesByIDDeclineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChampSelectLegacyV1SessionTradesByIDDeclineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChampSelectLegacyV1SessionTradesByIdDecline",
		Method:             "POST",
		PathPattern:        "/lol-champ-select-legacy/v1/session/trades/{id}/decline",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChampSelectLegacyV1SessionTradesByIDDeclineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChampSelectLegacyV1SessionTradesByIDDeclineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChampSelectLegacyV1SessionTradesByIdDecline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChampSelectLegacyV1SessionTradesByIDRequest post lol champ select legacy v1 session trades by Id request API
*/
func (a *Client) PostLolChampSelectLegacyV1SessionTradesByIDRequest(params *PostLolChampSelectLegacyV1SessionTradesByIDRequestParams) (*PostLolChampSelectLegacyV1SessionTradesByIDRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChampSelectLegacyV1SessionTradesByIDRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChampSelectLegacyV1SessionTradesByIdRequest",
		Method:             "POST",
		PathPattern:        "/lol-champ-select-legacy/v1/session/trades/{id}/request",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChampSelectLegacyV1SessionTradesByIDRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChampSelectLegacyV1SessionTradesByIDRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChampSelectLegacyV1SessionTradesByIdRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChampSelectLegacyV1TeamBoostPurchase post lol champ select legacy v1 team boost purchase API
*/
func (a *Client) PostLolChampSelectLegacyV1TeamBoostPurchase(params *PostLolChampSelectLegacyV1TeamBoostPurchaseParams) (*PostLolChampSelectLegacyV1TeamBoostPurchaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChampSelectLegacyV1TeamBoostPurchaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChampSelectLegacyV1TeamBoostPurchase",
		Method:             "POST",
		PathPattern:        "/lol-champ-select-legacy/v1/team-boost/purchase",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChampSelectLegacyV1TeamBoostPurchaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChampSelectLegacyV1TeamBoostPurchaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChampSelectLegacyV1TeamBoostPurchase: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChampSelectV1BattleTrainingLaunch post lol champ select v1 battle training launch API
*/
func (a *Client) PostLolChampSelectV1BattleTrainingLaunch(params *PostLolChampSelectV1BattleTrainingLaunchParams) (*PostLolChampSelectV1BattleTrainingLaunchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChampSelectV1BattleTrainingLaunchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChampSelectV1BattleTrainingLaunch",
		Method:             "POST",
		PathPattern:        "/lol-champ-select/v1/battle-training/launch",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChampSelectV1BattleTrainingLaunchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChampSelectV1BattleTrainingLaunchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChampSelectV1BattleTrainingLaunch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChampSelectV1RetrieveLatestGameDto post lol champ select v1 retrieve latest game dto API
*/
func (a *Client) PostLolChampSelectV1RetrieveLatestGameDto(params *PostLolChampSelectV1RetrieveLatestGameDtoParams) (*PostLolChampSelectV1RetrieveLatestGameDtoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChampSelectV1RetrieveLatestGameDtoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChampSelectV1RetrieveLatestGameDto",
		Method:             "POST",
		PathPattern:        "/lol-champ-select/v1/retrieve-latest-game-dto",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChampSelectV1RetrieveLatestGameDtoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChampSelectV1RetrieveLatestGameDtoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChampSelectV1RetrieveLatestGameDto: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChampSelectV1SessionActionsByIDComplete post lol champ select v1 session actions by Id complete API
*/
func (a *Client) PostLolChampSelectV1SessionActionsByIDComplete(params *PostLolChampSelectV1SessionActionsByIDCompleteParams) (*PostLolChampSelectV1SessionActionsByIDCompleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChampSelectV1SessionActionsByIDCompleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChampSelectV1SessionActionsByIdComplete",
		Method:             "POST",
		PathPattern:        "/lol-champ-select/v1/session/actions/{id}/complete",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChampSelectV1SessionActionsByIDCompleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChampSelectV1SessionActionsByIDCompleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChampSelectV1SessionActionsByIdComplete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChampSelectV1SessionBenchSwapByChampionID post lol champ select v1 session bench swap by champion Id API
*/
func (a *Client) PostLolChampSelectV1SessionBenchSwapByChampionID(params *PostLolChampSelectV1SessionBenchSwapByChampionIDParams) (*PostLolChampSelectV1SessionBenchSwapByChampionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChampSelectV1SessionBenchSwapByChampionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChampSelectV1SessionBenchSwapByChampionId",
		Method:             "POST",
		PathPattern:        "/lol-champ-select/v1/session/bench/swap/{championId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChampSelectV1SessionBenchSwapByChampionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChampSelectV1SessionBenchSwapByChampionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChampSelectV1SessionBenchSwapByChampionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChampSelectV1SessionMySelectionReroll post lol champ select v1 session my selection reroll API
*/
func (a *Client) PostLolChampSelectV1SessionMySelectionReroll(params *PostLolChampSelectV1SessionMySelectionRerollParams) (*PostLolChampSelectV1SessionMySelectionRerollOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChampSelectV1SessionMySelectionRerollParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChampSelectV1SessionMySelectionReroll",
		Method:             "POST",
		PathPattern:        "/lol-champ-select/v1/session/my-selection/reroll",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChampSelectV1SessionMySelectionRerollReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChampSelectV1SessionMySelectionRerollOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChampSelectV1SessionMySelectionReroll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChampSelectV1SessionSimpleInventory post lol champ select v1 session simple inventory API
*/
func (a *Client) PostLolChampSelectV1SessionSimpleInventory(params *PostLolChampSelectV1SessionSimpleInventoryParams) (*PostLolChampSelectV1SessionSimpleInventoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChampSelectV1SessionSimpleInventoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChampSelectV1SessionSimpleInventory",
		Method:             "POST",
		PathPattern:        "/lol-champ-select/v1/session/simple-inventory",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChampSelectV1SessionSimpleInventoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChampSelectV1SessionSimpleInventoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChampSelectV1SessionSimpleInventory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChampSelectV1SessionTradesByIDAccept post lol champ select v1 session trades by Id accept API
*/
func (a *Client) PostLolChampSelectV1SessionTradesByIDAccept(params *PostLolChampSelectV1SessionTradesByIDAcceptParams) (*PostLolChampSelectV1SessionTradesByIDAcceptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChampSelectV1SessionTradesByIDAcceptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChampSelectV1SessionTradesByIdAccept",
		Method:             "POST",
		PathPattern:        "/lol-champ-select/v1/session/trades/{id}/accept",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChampSelectV1SessionTradesByIDAcceptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChampSelectV1SessionTradesByIDAcceptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChampSelectV1SessionTradesByIdAccept: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChampSelectV1SessionTradesByIDCancel post lol champ select v1 session trades by Id cancel API
*/
func (a *Client) PostLolChampSelectV1SessionTradesByIDCancel(params *PostLolChampSelectV1SessionTradesByIDCancelParams) (*PostLolChampSelectV1SessionTradesByIDCancelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChampSelectV1SessionTradesByIDCancelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChampSelectV1SessionTradesByIdCancel",
		Method:             "POST",
		PathPattern:        "/lol-champ-select/v1/session/trades/{id}/cancel",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChampSelectV1SessionTradesByIDCancelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChampSelectV1SessionTradesByIDCancelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChampSelectV1SessionTradesByIdCancel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChampSelectV1SessionTradesByIDDecline post lol champ select v1 session trades by Id decline API
*/
func (a *Client) PostLolChampSelectV1SessionTradesByIDDecline(params *PostLolChampSelectV1SessionTradesByIDDeclineParams) (*PostLolChampSelectV1SessionTradesByIDDeclineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChampSelectV1SessionTradesByIDDeclineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChampSelectV1SessionTradesByIdDecline",
		Method:             "POST",
		PathPattern:        "/lol-champ-select/v1/session/trades/{id}/decline",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChampSelectV1SessionTradesByIDDeclineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChampSelectV1SessionTradesByIDDeclineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChampSelectV1SessionTradesByIdDecline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChampSelectV1SessionTradesByIDRequest post lol champ select v1 session trades by Id request API
*/
func (a *Client) PostLolChampSelectV1SessionTradesByIDRequest(params *PostLolChampSelectV1SessionTradesByIDRequestParams) (*PostLolChampSelectV1SessionTradesByIDRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChampSelectV1SessionTradesByIDRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChampSelectV1SessionTradesByIdRequest",
		Method:             "POST",
		PathPattern:        "/lol-champ-select/v1/session/trades/{id}/request",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChampSelectV1SessionTradesByIDRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChampSelectV1SessionTradesByIDRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChampSelectV1SessionTradesByIdRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChampSelectV1TeamBoostPurchase post lol champ select v1 team boost purchase API
*/
func (a *Client) PostLolChampSelectV1TeamBoostPurchase(params *PostLolChampSelectV1TeamBoostPurchaseParams) (*PostLolChampSelectV1TeamBoostPurchaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChampSelectV1TeamBoostPurchaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChampSelectV1TeamBoostPurchase",
		Method:             "POST",
		PathPattern:        "/lol-champ-select/v1/team-boost/purchase",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChampSelectV1TeamBoostPurchaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChampSelectV1TeamBoostPurchaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChampSelectV1TeamBoostPurchase: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChampSelectV1ToggleFavoriteByChampionIDByPosition post lol champ select v1 toggle favorite by champion Id by position API
*/
func (a *Client) PostLolChampSelectV1ToggleFavoriteByChampionIDByPosition(params *PostLolChampSelectV1ToggleFavoriteByChampionIDByPositionParams) (*PostLolChampSelectV1ToggleFavoriteByChampionIDByPositionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChampSelectV1ToggleFavoriteByChampionIDByPositionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChampSelectV1ToggleFavoriteByChampionIdByPosition",
		Method:             "POST",
		PathPattern:        "/lol-champ-select/v1/toggle-favorite/{championId}/{position}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChampSelectV1ToggleFavoriteByChampionIDByPositionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChampSelectV1ToggleFavoriteByChampionIDByPositionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChampSelectV1ToggleFavoriteByChampionIdByPosition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChatV1BlockedPlayers post lol chat v1 blocked players API
*/
func (a *Client) PostLolChatV1BlockedPlayers(params *PostLolChatV1BlockedPlayersParams) (*PostLolChatV1BlockedPlayersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChatV1BlockedPlayersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChatV1BlockedPlayers",
		Method:             "POST",
		PathPattern:        "/lol-chat/v1/blocked-players",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChatV1BlockedPlayersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChatV1BlockedPlayersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChatV1BlockedPlayers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChatV1Conversations post lol chat v1 conversations API
*/
func (a *Client) PostLolChatV1Conversations(params *PostLolChatV1ConversationsParams) (*PostLolChatV1ConversationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChatV1ConversationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChatV1Conversations",
		Method:             "POST",
		PathPattern:        "/lol-chat/v1/conversations",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChatV1ConversationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChatV1ConversationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChatV1Conversations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChatV1ConversationsByIDClosed post lol chat v1 conversations by Id closed API
*/
func (a *Client) PostLolChatV1ConversationsByIDClosed(params *PostLolChatV1ConversationsByIDClosedParams) (*PostLolChatV1ConversationsByIDClosedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChatV1ConversationsByIDClosedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChatV1ConversationsByIdClosed",
		Method:             "POST",
		PathPattern:        "/lol-chat/v1/conversations/{id}/closed",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChatV1ConversationsByIDClosedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChatV1ConversationsByIDClosedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChatV1ConversationsByIdClosed: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChatV1ConversationsByIDMessages post lol chat v1 conversations by Id messages API
*/
func (a *Client) PostLolChatV1ConversationsByIDMessages(params *PostLolChatV1ConversationsByIDMessagesParams) (*PostLolChatV1ConversationsByIDMessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChatV1ConversationsByIDMessagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChatV1ConversationsByIdMessages",
		Method:             "POST",
		PathPattern:        "/lol-chat/v1/conversations/{id}/messages",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChatV1ConversationsByIDMessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChatV1ConversationsByIDMessagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChatV1ConversationsByIdMessages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChatV1ConversationsByIDParticipants post lol chat v1 conversations by Id participants API
*/
func (a *Client) PostLolChatV1ConversationsByIDParticipants(params *PostLolChatV1ConversationsByIDParticipantsParams) (*PostLolChatV1ConversationsByIDParticipantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChatV1ConversationsByIDParticipantsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChatV1ConversationsByIdParticipants",
		Method:             "POST",
		PathPattern:        "/lol-chat/v1/conversations/{id}/participants",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChatV1ConversationsByIDParticipantsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChatV1ConversationsByIDParticipantsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChatV1ConversationsByIdParticipants: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChatV1FriendGroups post lol chat v1 friend groups API
*/
func (a *Client) PostLolChatV1FriendGroups(params *PostLolChatV1FriendGroupsParams) (*PostLolChatV1FriendGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChatV1FriendGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChatV1FriendGroups",
		Method:             "POST",
		PathPattern:        "/lol-chat/v1/friend-groups",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChatV1FriendGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChatV1FriendGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChatV1FriendGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChatV1FriendRequests post lol chat v1 friend requests API
*/
func (a *Client) PostLolChatV1FriendRequests(params *PostLolChatV1FriendRequestsParams) (*PostLolChatV1FriendRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChatV1FriendRequestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChatV1FriendRequests",
		Method:             "POST",
		PathPattern:        "/lol-chat/v1/friend-requests",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChatV1FriendRequestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChatV1FriendRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChatV1FriendRequests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChatV1SessionPlain post lol chat v1 session plain API
*/
func (a *Client) PostLolChatV1SessionPlain(params *PostLolChatV1SessionPlainParams) (*PostLolChatV1SessionPlainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChatV1SessionPlainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChatV1SessionPlain",
		Method:             "POST",
		PathPattern:        "/lol-chat/v1/session/plain",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChatV1SessionPlainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChatV1SessionPlainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChatV1SessionPlain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolChatV1SessionRso post lol chat v1 session rso API
*/
func (a *Client) PostLolChatV1SessionRso(params *PostLolChatV1SessionRsoParams) (*PostLolChatV1SessionRsoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolChatV1SessionRsoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolChatV1SessionRso",
		Method:             "POST",
		PathPattern:        "/lol-chat/v1/session/rso",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolChatV1SessionRsoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolChatV1SessionRsoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolChatV1SessionRso: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1EogPlayerUpdateAcknowledge post lol clash v1 eog player update acknowledge API
*/
func (a *Client) PostLolClashV1EogPlayerUpdateAcknowledge(params *PostLolClashV1EogPlayerUpdateAcknowledgeParams) (*PostLolClashV1EogPlayerUpdateAcknowledgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1EogPlayerUpdateAcknowledgeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1EogPlayerUpdateAcknowledge",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/eog-player-update/acknowledge",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1EogPlayerUpdateAcknowledgeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1EogPlayerUpdateAcknowledgeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1EogPlayerUpdateAcknowledge: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1Events post lol clash v1 events API
*/
func (a *Client) PostLolClashV1Events(params *PostLolClashV1EventsParams) (*PostLolClashV1EventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1EventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1Events",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/events",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1EventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1EventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1Events: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1GameEndAcknowledge post lol clash v1 game end acknowledge API
*/
func (a *Client) PostLolClashV1GameEndAcknowledge(params *PostLolClashV1GameEndAcknowledgeParams) (*PostLolClashV1GameEndAcknowledgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1GameEndAcknowledgeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1GameEndAcknowledge",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/game-end/acknowledge",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1GameEndAcknowledgeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1GameEndAcknowledgeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1GameEndAcknowledge: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1NotificationsAcknowledge post lol clash v1 notifications acknowledge API
*/
func (a *Client) PostLolClashV1NotificationsAcknowledge(params *PostLolClashV1NotificationsAcknowledgeParams) (*PostLolClashV1NotificationsAcknowledgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1NotificationsAcknowledgeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1NotificationsAcknowledge",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/notifications/acknowledge",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1NotificationsAcknowledgeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1NotificationsAcknowledgeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1NotificationsAcknowledge: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1Refresh post lol clash v1 refresh API
*/
func (a *Client) PostLolClashV1Refresh(params *PostLolClashV1RefreshParams) (*PostLolClashV1RefreshOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RefreshParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1Refresh",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/refresh",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RefreshReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RefreshOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1Refresh: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDAccept post lol clash v1 roster by roster Id accept API
*/
func (a *Client) PostLolClashV1RosterByRosterIDAccept(params *PostLolClashV1RosterByRosterIDAcceptParams) (*PostLolClashV1RosterByRosterIDAcceptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDAcceptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdAccept",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/accept",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDAcceptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDAcceptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdAccept: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDCancelWithdraw post lol clash v1 roster by roster Id cancel withdraw API
*/
func (a *Client) PostLolClashV1RosterByRosterIDCancelWithdraw(params *PostLolClashV1RosterByRosterIDCancelWithdrawParams) (*PostLolClashV1RosterByRosterIDCancelWithdrawOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDCancelWithdrawParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdCancelWithdraw",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/cancel-withdraw",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDCancelWithdrawReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDCancelWithdrawOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdCancelWithdraw: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDChangeAllDetails post lol clash v1 roster by roster Id change all details API
*/
func (a *Client) PostLolClashV1RosterByRosterIDChangeAllDetails(params *PostLolClashV1RosterByRosterIDChangeAllDetailsParams) (*PostLolClashV1RosterByRosterIDChangeAllDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDChangeAllDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdChangeAllDetails",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/change-all-details",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDChangeAllDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDChangeAllDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdChangeAllDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDChangeIcon post lol clash v1 roster by roster Id change icon API
*/
func (a *Client) PostLolClashV1RosterByRosterIDChangeIcon(params *PostLolClashV1RosterByRosterIDChangeIconParams) (*PostLolClashV1RosterByRosterIDChangeIconOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDChangeIconParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdChangeIcon",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/change-icon",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDChangeIconReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDChangeIconOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdChangeIcon: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDChangeName post lol clash v1 roster by roster Id change name API
*/
func (a *Client) PostLolClashV1RosterByRosterIDChangeName(params *PostLolClashV1RosterByRosterIDChangeNameParams) (*PostLolClashV1RosterByRosterIDChangeNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDChangeNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdChangeName",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/change-name",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDChangeNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDChangeNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdChangeName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDChangeShortName post lol clash v1 roster by roster Id change short name API
*/
func (a *Client) PostLolClashV1RosterByRosterIDChangeShortName(params *PostLolClashV1RosterByRosterIDChangeShortNameParams) (*PostLolClashV1RosterByRosterIDChangeShortNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDChangeShortNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdChangeShortName",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/change-short-name",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDChangeShortNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDChangeShortNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdChangeShortName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDDecline post lol clash v1 roster by roster Id decline API
*/
func (a *Client) PostLolClashV1RosterByRosterIDDecline(params *PostLolClashV1RosterByRosterIDDeclineParams) (*PostLolClashV1RosterByRosterIDDeclineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDDeclineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdDecline",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/decline",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDDeclineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDDeclineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdDecline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDDisband post lol clash v1 roster by roster Id disband API
*/
func (a *Client) PostLolClashV1RosterByRosterIDDisband(params *PostLolClashV1RosterByRosterIDDisbandParams) (*PostLolClashV1RosterByRosterIDDisbandOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDDisbandParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdDisband",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/disband",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDDisbandReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDDisbandOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdDisband: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDInvite post lol clash v1 roster by roster Id invite API
*/
func (a *Client) PostLolClashV1RosterByRosterIDInvite(params *PostLolClashV1RosterByRosterIDInviteParams) (*PostLolClashV1RosterByRosterIDInviteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDInviteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdInvite",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/invite",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDInviteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDInviteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdInvite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDKick post lol clash v1 roster by roster Id kick API
*/
func (a *Client) PostLolClashV1RosterByRosterIDKick(params *PostLolClashV1RosterByRosterIDKickParams) (*PostLolClashV1RosterByRosterIDKickOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDKickParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdKick",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/kick",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDKickReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDKickOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdKick: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDLeave post lol clash v1 roster by roster Id leave API
*/
func (a *Client) PostLolClashV1RosterByRosterIDLeave(params *PostLolClashV1RosterByRosterIDLeaveParams) (*PostLolClashV1RosterByRosterIDLeaveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDLeaveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdLeave",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/leave",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDLeaveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDLeaveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdLeave: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDLockin post lol clash v1 roster by roster Id lockin API
*/
func (a *Client) PostLolClashV1RosterByRosterIDLockin(params *PostLolClashV1RosterByRosterIDLockinParams) (*PostLolClashV1RosterByRosterIDLockinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDLockinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdLockin",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/lockin",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDLockinReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDLockinOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdLockin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDSetPosition post lol clash v1 roster by roster Id set position API
*/
func (a *Client) PostLolClashV1RosterByRosterIDSetPosition(params *PostLolClashV1RosterByRosterIDSetPositionParams) (*PostLolClashV1RosterByRosterIDSetPositionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDSetPositionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdSetPosition",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/set-position",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDSetPositionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDSetPositionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdSetPosition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDSetTicket post lol clash v1 roster by roster Id set ticket API
*/
func (a *Client) PostLolClashV1RosterByRosterIDSetTicket(params *PostLolClashV1RosterByRosterIDSetTicketParams) (*PostLolClashV1RosterByRosterIDSetTicketOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDSetTicketParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdSetTicket",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/set-ticket",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDSetTicketReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDSetTicketOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdSetTicket: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDSubstituteAccept post lol clash v1 roster by roster Id substitute accept API
*/
func (a *Client) PostLolClashV1RosterByRosterIDSubstituteAccept(params *PostLolClashV1RosterByRosterIDSubstituteAcceptParams) (*PostLolClashV1RosterByRosterIDSubstituteAcceptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDSubstituteAcceptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdSubstituteAccept",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/substitute/accept",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDSubstituteAcceptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDSubstituteAcceptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdSubstituteAccept: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDSubstituteBySummonerIDRevoke post lol clash v1 roster by roster Id substitute by summoner Id revoke API
*/
func (a *Client) PostLolClashV1RosterByRosterIDSubstituteBySummonerIDRevoke(params *PostLolClashV1RosterByRosterIDSubstituteBySummonerIDRevokeParams) (*PostLolClashV1RosterByRosterIDSubstituteBySummonerIDRevokeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDSubstituteBySummonerIDRevokeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdSubstituteBySummonerIdRevoke",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/substitute/{summonerId}/revoke",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDSubstituteBySummonerIDRevokeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDSubstituteBySummonerIDRevokeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdSubstituteBySummonerIdRevoke: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDSubstituteDecline post lol clash v1 roster by roster Id substitute decline API
*/
func (a *Client) PostLolClashV1RosterByRosterIDSubstituteDecline(params *PostLolClashV1RosterByRosterIDSubstituteDeclineParams) (*PostLolClashV1RosterByRosterIDSubstituteDeclineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDSubstituteDeclineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdSubstituteDecline",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/substitute/decline",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDSubstituteDeclineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDSubstituteDeclineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdSubstituteDecline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDSubstituteInvite post lol clash v1 roster by roster Id substitute invite API
*/
func (a *Client) PostLolClashV1RosterByRosterIDSubstituteInvite(params *PostLolClashV1RosterByRosterIDSubstituteInviteParams) (*PostLolClashV1RosterByRosterIDSubstituteInviteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDSubstituteInviteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdSubstituteInvite",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/substitute/invite",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDSubstituteInviteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDSubstituteInviteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdSubstituteInvite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDSubstituteReclaim post lol clash v1 roster by roster Id substitute reclaim API
*/
func (a *Client) PostLolClashV1RosterByRosterIDSubstituteReclaim(params *PostLolClashV1RosterByRosterIDSubstituteReclaimParams) (*PostLolClashV1RosterByRosterIDSubstituteReclaimOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDSubstituteReclaimParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdSubstituteReclaim",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/substitute/reclaim",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDSubstituteReclaimReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDSubstituteReclaimOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdSubstituteReclaim: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDTicketOfferBySummonerIDAccept post lol clash v1 roster by roster Id ticket offer by summoner Id accept API
*/
func (a *Client) PostLolClashV1RosterByRosterIDTicketOfferBySummonerIDAccept(params *PostLolClashV1RosterByRosterIDTicketOfferBySummonerIDAcceptParams) (*PostLolClashV1RosterByRosterIDTicketOfferBySummonerIDAcceptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDTicketOfferBySummonerIDAcceptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdTicketOfferBySummonerIdAccept",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/ticket-offer/{summonerId}/accept",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDTicketOfferBySummonerIDAcceptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDTicketOfferBySummonerIDAcceptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdTicketOfferBySummonerIdAccept: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDTicketOfferBySummonerIDDecline post lol clash v1 roster by roster Id ticket offer by summoner Id decline API
*/
func (a *Client) PostLolClashV1RosterByRosterIDTicketOfferBySummonerIDDecline(params *PostLolClashV1RosterByRosterIDTicketOfferBySummonerIDDeclineParams) (*PostLolClashV1RosterByRosterIDTicketOfferBySummonerIDDeclineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDTicketOfferBySummonerIDDeclineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdTicketOfferBySummonerIdDecline",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/ticket-offer/{summonerId}/decline",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDTicketOfferBySummonerIDDeclineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDTicketOfferBySummonerIDDeclineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdTicketOfferBySummonerIdDecline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDTicketOfferBySummonerIDOffer post lol clash v1 roster by roster Id ticket offer by summoner Id offer API
*/
func (a *Client) PostLolClashV1RosterByRosterIDTicketOfferBySummonerIDOffer(params *PostLolClashV1RosterByRosterIDTicketOfferBySummonerIDOfferParams) (*PostLolClashV1RosterByRosterIDTicketOfferBySummonerIDOfferOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDTicketOfferBySummonerIDOfferParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdTicketOfferBySummonerIdOffer",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/ticket-offer/{summonerId}/offer",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDTicketOfferBySummonerIDOfferReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDTicketOfferBySummonerIDOfferOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdTicketOfferBySummonerIdOffer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDTicketOfferBySummonerIDRevoke post lol clash v1 roster by roster Id ticket offer by summoner Id revoke API
*/
func (a *Client) PostLolClashV1RosterByRosterIDTicketOfferBySummonerIDRevoke(params *PostLolClashV1RosterByRosterIDTicketOfferBySummonerIDRevokeParams) (*PostLolClashV1RosterByRosterIDTicketOfferBySummonerIDRevokeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDTicketOfferBySummonerIDRevokeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdTicketOfferBySummonerIdRevoke",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/ticket-offer/{summonerId}/revoke",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDTicketOfferBySummonerIDRevokeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDTicketOfferBySummonerIDRevokeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdTicketOfferBySummonerIdRevoke: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDTransferCaptain post lol clash v1 roster by roster Id transfer captain API
*/
func (a *Client) PostLolClashV1RosterByRosterIDTransferCaptain(params *PostLolClashV1RosterByRosterIDTransferCaptainParams) (*PostLolClashV1RosterByRosterIDTransferCaptainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDTransferCaptainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdTransferCaptain",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/transfer-captain",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDTransferCaptainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDTransferCaptainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdTransferCaptain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDUnlockin post lol clash v1 roster by roster Id unlockin API
*/
func (a *Client) PostLolClashV1RosterByRosterIDUnlockin(params *PostLolClashV1RosterByRosterIDUnlockinParams) (*PostLolClashV1RosterByRosterIDUnlockinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDUnlockinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdUnlockin",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/unlockin",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDUnlockinReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDUnlockinOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdUnlockin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDUnwithdraw post lol clash v1 roster by roster Id unwithdraw API
*/
func (a *Client) PostLolClashV1RosterByRosterIDUnwithdraw(params *PostLolClashV1RosterByRosterIDUnwithdrawParams) (*PostLolClashV1RosterByRosterIDUnwithdrawOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDUnwithdrawParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdUnwithdraw",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/unwithdraw",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDUnwithdrawReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDUnwithdrawOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdUnwithdraw: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDUpdateLogos post lol clash v1 roster by roster Id update logos API
*/
func (a *Client) PostLolClashV1RosterByRosterIDUpdateLogos(params *PostLolClashV1RosterByRosterIDUpdateLogosParams) (*PostLolClashV1RosterByRosterIDUpdateLogosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDUpdateLogosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdUpdateLogos",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/update-logos",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDUpdateLogosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDUpdateLogosOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdUpdateLogos: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1RosterByRosterIDWithdraw post lol clash v1 roster by roster Id withdraw API
*/
func (a *Client) PostLolClashV1RosterByRosterIDWithdraw(params *PostLolClashV1RosterByRosterIDWithdrawParams) (*PostLolClashV1RosterByRosterIDWithdrawOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1RosterByRosterIDWithdrawParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1RosterByRosterIdWithdraw",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/roster/{rosterId}/withdraw",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1RosterByRosterIDWithdrawReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1RosterByRosterIDWithdrawOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1RosterByRosterIdWithdraw: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1SimpleStateFlagsByIDAcknowledge post lol clash v1 simple state flags by Id acknowledge API
*/
func (a *Client) PostLolClashV1SimpleStateFlagsByIDAcknowledge(params *PostLolClashV1SimpleStateFlagsByIDAcknowledgeParams) (*PostLolClashV1SimpleStateFlagsByIDAcknowledgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1SimpleStateFlagsByIDAcknowledgeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1SimpleStateFlagsByIdAcknowledge",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/simple-state-flags/{id}/acknowledge",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1SimpleStateFlagsByIDAcknowledgeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1SimpleStateFlagsByIDAcknowledgeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1SimpleStateFlagsByIdAcknowledge: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1TournamentByTournamentIDCreateRoster post lol clash v1 tournament by tournament Id create roster API
*/
func (a *Client) PostLolClashV1TournamentByTournamentIDCreateRoster(params *PostLolClashV1TournamentByTournamentIDCreateRosterParams) (*PostLolClashV1TournamentByTournamentIDCreateRosterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1TournamentByTournamentIDCreateRosterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1TournamentByTournamentIdCreateRoster",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/tournament/{tournamentId}/create-roster",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1TournamentByTournamentIDCreateRosterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1TournamentByTournamentIDCreateRosterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1TournamentByTournamentIdCreateRoster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1UpdateLogos post lol clash v1 update logos API
*/
func (a *Client) PostLolClashV1UpdateLogos(params *PostLolClashV1UpdateLogosParams) (*PostLolClashV1UpdateLogosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1UpdateLogosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1UpdateLogos",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/update-logos",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1UpdateLogosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1UpdateLogosOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1UpdateLogos: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1Voice post lol clash v1 voice API
*/
func (a *Client) PostLolClashV1Voice(params *PostLolClashV1VoiceParams) (*PostLolClashV1VoiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1VoiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1Voice",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/voice",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1VoiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1VoiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1Voice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClashV1VoiceDelayByDelaySeconds post lol clash v1 voice delay by delay seconds API
*/
func (a *Client) PostLolClashV1VoiceDelayByDelaySeconds(params *PostLolClashV1VoiceDelayByDelaySecondsParams) (*PostLolClashV1VoiceDelayByDelaySecondsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClashV1VoiceDelayByDelaySecondsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClashV1VoiceDelayByDelaySeconds",
		Method:             "POST",
		PathPattern:        "/lol-clash/v1/voice-delay/{delaySeconds}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClashV1VoiceDelayByDelaySecondsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClashV1VoiceDelayByDelaySecondsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClashV1VoiceDelayByDelaySeconds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClubsV1ClubsByClubKeyInvitationsBySummonerID post lol clubs v1 clubs by club key invitations by summoner Id API
*/
func (a *Client) PostLolClubsV1ClubsByClubKeyInvitationsBySummonerID(params *PostLolClubsV1ClubsByClubKeyInvitationsBySummonerIDParams) (*PostLolClubsV1ClubsByClubKeyInvitationsBySummonerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClubsV1ClubsByClubKeyInvitationsBySummonerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClubsV1ClubsByClubKeyInvitationsBySummonerId",
		Method:             "POST",
		PathPattern:        "/lol-clubs/v1/clubs/{clubKey}/invitations/{summonerId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClubsV1ClubsByClubKeyInvitationsBySummonerIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClubsV1ClubsByClubKeyInvitationsBySummonerIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClubsV1ClubsByClubKeyInvitationsBySummonerId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClubsV1ClubsByClubKeyMembersBySummonerID post lol clubs v1 clubs by club key members by summoner Id API
*/
func (a *Client) PostLolClubsV1ClubsByClubKeyMembersBySummonerID(params *PostLolClubsV1ClubsByClubKeyMembersBySummonerIDParams) (*PostLolClubsV1ClubsByClubKeyMembersBySummonerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClubsV1ClubsByClubKeyMembersBySummonerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClubsV1ClubsByClubKeyMembersBySummonerId",
		Method:             "POST",
		PathPattern:        "/lol-clubs/v1/clubs/{clubKey}/members/{summonerId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClubsV1ClubsByClubKeyMembersBySummonerIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClubsV1ClubsByClubKeyMembersBySummonerIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClubsV1ClubsByClubKeyMembersBySummonerId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClubsV1ClubsByClubKeyNominationsBySummonerID post lol clubs v1 clubs by club key nominations by summoner Id API
*/
func (a *Client) PostLolClubsV1ClubsByClubKeyNominationsBySummonerID(params *PostLolClubsV1ClubsByClubKeyNominationsBySummonerIDParams) (*PostLolClubsV1ClubsByClubKeyNominationsBySummonerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClubsV1ClubsByClubKeyNominationsBySummonerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClubsV1ClubsByClubKeyNominationsBySummonerId",
		Method:             "POST",
		PathPattern:        "/lol-clubs/v1/clubs/{clubKey}/nominations/{summonerId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClubsV1ClubsByClubKeyNominationsBySummonerIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClubsV1ClubsByClubKeyNominationsBySummonerIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClubsV1ClubsByClubKeyNominationsBySummonerId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClubsV1ClubsByClubKeyPromotionsBySummonerID post lol clubs v1 clubs by club key promotions by summoner Id API
*/
func (a *Client) PostLolClubsV1ClubsByClubKeyPromotionsBySummonerID(params *PostLolClubsV1ClubsByClubKeyPromotionsBySummonerIDParams) (*PostLolClubsV1ClubsByClubKeyPromotionsBySummonerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClubsV1ClubsByClubKeyPromotionsBySummonerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClubsV1ClubsByClubKeyPromotionsBySummonerId",
		Method:             "POST",
		PathPattern:        "/lol-clubs/v1/clubs/{clubKey}/promotions/{summonerId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClubsV1ClubsByClubKeyPromotionsBySummonerIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClubsV1ClubsByClubKeyPromotionsBySummonerIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClubsV1ClubsByClubKeyPromotionsBySummonerId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClubsV1ClubsByClubKeyView post lol clubs v1 clubs by club key view API
*/
func (a *Client) PostLolClubsV1ClubsByClubKeyView(params *PostLolClubsV1ClubsByClubKeyViewParams) (*PostLolClubsV1ClubsByClubKeyViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClubsV1ClubsByClubKeyViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClubsV1ClubsByClubKeyView",
		Method:             "POST",
		PathPattern:        "/lol-clubs/v1/clubs/{clubKey}/view",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClubsV1ClubsByClubKeyViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClubsV1ClubsByClubKeyViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClubsV1ClubsByClubKeyView: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolClubsV1ClubsMembership post lol clubs v1 clubs membership API
*/
func (a *Client) PostLolClubsV1ClubsMembership(params *PostLolClubsV1ClubsMembershipParams) (*PostLolClubsV1ClubsMembershipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolClubsV1ClubsMembershipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolClubsV1ClubsMembership",
		Method:             "POST",
		PathPattern:        "/lol-clubs/v1/clubs/membership",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolClubsV1ClubsMembershipReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolClubsV1ClubsMembershipOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolClubsV1ClubsMembership: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolDisambiguationV1MagicLink post lol disambiguation v1 magic link API
*/
func (a *Client) PostLolDisambiguationV1MagicLink(params *PostLolDisambiguationV1MagicLinkParams) (*PostLolDisambiguationV1MagicLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolDisambiguationV1MagicLinkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolDisambiguationV1MagicLink",
		Method:             "POST",
		PathPattern:        "/lol-disambiguation/v1/magic-link",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolDisambiguationV1MagicLinkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolDisambiguationV1MagicLinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolDisambiguationV1MagicLink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolEmailVerificationV1ConfirmEmail post lol email verification v1 confirm email API
*/
func (a *Client) PostLolEmailVerificationV1ConfirmEmail(params *PostLolEmailVerificationV1ConfirmEmailParams) (*PostLolEmailVerificationV1ConfirmEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolEmailVerificationV1ConfirmEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolEmailVerificationV1ConfirmEmail",
		Method:             "POST",
		PathPattern:        "/lol-email-verification/v1/confirm-email",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolEmailVerificationV1ConfirmEmailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolEmailVerificationV1ConfirmEmailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolEmailVerificationV1ConfirmEmail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolEndOfGameV1GameclientEogStatsBlock post lol end of game v1 gameclient eog stats block API
*/
func (a *Client) PostLolEndOfGameV1GameclientEogStatsBlock(params *PostLolEndOfGameV1GameclientEogStatsBlockParams) (*PostLolEndOfGameV1GameclientEogStatsBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolEndOfGameV1GameclientEogStatsBlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolEndOfGameV1GameclientEogStatsBlock",
		Method:             "POST",
		PathPattern:        "/lol-end-of-game/v1/gameclient-eog-stats-block",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolEndOfGameV1GameclientEogStatsBlockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolEndOfGameV1GameclientEogStatsBlockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolEndOfGameV1GameclientEogStatsBlock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolEndOfGameV1StateDismissStats post lol end of game v1 state dismiss stats API
*/
func (a *Client) PostLolEndOfGameV1StateDismissStats(params *PostLolEndOfGameV1StateDismissStatsParams) (*PostLolEndOfGameV1StateDismissStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolEndOfGameV1StateDismissStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolEndOfGameV1StateDismissStats",
		Method:             "POST",
		PathPattern:        "/lol-end-of-game/v1/state/dismiss-stats",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolEndOfGameV1StateDismissStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolEndOfGameV1StateDismissStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolEndOfGameV1StateDismissStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolEndOfGameV2PlayerComplaints post lol end of game v2 player complaints API
*/
func (a *Client) PostLolEndOfGameV2PlayerComplaints(params *PostLolEndOfGameV2PlayerComplaintsParams) (*PostLolEndOfGameV2PlayerComplaintsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolEndOfGameV2PlayerComplaintsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolEndOfGameV2PlayerComplaints",
		Method:             "POST",
		PathPattern:        "/lol-end-of-game/v2/player-complaints",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolEndOfGameV2PlayerComplaintsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolEndOfGameV2PlayerComplaintsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolEndOfGameV2PlayerComplaints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolEsportStreamNotificationsV1SendStats post lol esport stream notifications v1 send stats API
*/
func (a *Client) PostLolEsportStreamNotificationsV1SendStats(params *PostLolEsportStreamNotificationsV1SendStatsParams) (*PostLolEsportStreamNotificationsV1SendStatsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolEsportStreamNotificationsV1SendStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolEsportStreamNotificationsV1SendStats",
		Method:             "POST",
		PathPattern:        "/lol-esport-stream-notifications/v1/send-stats",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolEsportStreamNotificationsV1SendStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolEsportStreamNotificationsV1SendStatsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolEsportStreamNotificationsV1SendStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameClientChatV1IgnoredSummoners post lol game client chat v1 ignored summoners API
*/
func (a *Client) PostLolGameClientChatV1IgnoredSummoners(params *PostLolGameClientChatV1IgnoredSummonersParams) (*PostLolGameClientChatV1IgnoredSummonersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameClientChatV1IgnoredSummonersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameClientChatV1IgnoredSummoners",
		Method:             "POST",
		PathPattern:        "/lol-game-client-chat/v1/ignored-summoners",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameClientChatV1IgnoredSummonersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameClientChatV1IgnoredSummonersNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameClientChatV1IgnoredSummoners: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameClientChatV1InstantMessages post lol game client chat v1 instant messages API
*/
func (a *Client) PostLolGameClientChatV1InstantMessages(params *PostLolGameClientChatV1InstantMessagesParams) (*PostLolGameClientChatV1InstantMessagesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameClientChatV1InstantMessagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameClientChatV1InstantMessages",
		Method:             "POST",
		PathPattern:        "/lol-game-client-chat/v1/instant-messages",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameClientChatV1InstantMessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameClientChatV1InstantMessagesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameClientChatV1InstantMessages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameClientChatV1PartyMessages post lol game client chat v1 party messages API
*/
func (a *Client) PostLolGameClientChatV1PartyMessages(params *PostLolGameClientChatV1PartyMessagesParams) (*PostLolGameClientChatV1PartyMessagesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameClientChatV1PartyMessagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameClientChatV1PartyMessages",
		Method:             "POST",
		PathPattern:        "/lol-game-client-chat/v1/party-messages",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameClientChatV1PartyMessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameClientChatV1PartyMessagesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameClientChatV1PartyMessages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameSettingsV1ReloadPostGame post lol game settings v1 reload post game API
*/
func (a *Client) PostLolGameSettingsV1ReloadPostGame(params *PostLolGameSettingsV1ReloadPostGameParams) (*PostLolGameSettingsV1ReloadPostGameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameSettingsV1ReloadPostGameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameSettingsV1ReloadPostGame",
		Method:             "POST",
		PathPattern:        "/lol-game-settings/v1/reload-post-game",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameSettingsV1ReloadPostGameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameSettingsV1ReloadPostGameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameSettingsV1ReloadPostGame: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameSettingsV1Save post lol game settings v1 save API
*/
func (a *Client) PostLolGameSettingsV1Save(params *PostLolGameSettingsV1SaveParams) (*PostLolGameSettingsV1SaveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameSettingsV1SaveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameSettingsV1Save",
		Method:             "POST",
		PathPattern:        "/lol-game-settings/v1/save",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameSettingsV1SaveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameSettingsV1SaveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameSettingsV1Save: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameflowV1AckFailedToLaunch post lol gameflow v1 ack failed to launch API
*/
func (a *Client) PostLolGameflowV1AckFailedToLaunch(params *PostLolGameflowV1AckFailedToLaunchParams) (*PostLolGameflowV1AckFailedToLaunchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameflowV1AckFailedToLaunchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameflowV1AckFailedToLaunch",
		Method:             "POST",
		PathPattern:        "/lol-gameflow/v1/ack-failed-to-launch",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameflowV1AckFailedToLaunchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameflowV1AckFailedToLaunchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameflowV1AckFailedToLaunch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameflowV1BasicTutorialStart post lol gameflow v1 basic tutorial start API
*/
func (a *Client) PostLolGameflowV1BasicTutorialStart(params *PostLolGameflowV1BasicTutorialStartParams) (*PostLolGameflowV1BasicTutorialStartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameflowV1BasicTutorialStartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameflowV1BasicTutorialStart",
		Method:             "POST",
		PathPattern:        "/lol-gameflow/v1/basic-tutorial/start",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameflowV1BasicTutorialStartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameflowV1BasicTutorialStartOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameflowV1BasicTutorialStart: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameflowV1BattleTrainingStart post lol gameflow v1 battle training start API
*/
func (a *Client) PostLolGameflowV1BattleTrainingStart(params *PostLolGameflowV1BattleTrainingStartParams) (*PostLolGameflowV1BattleTrainingStartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameflowV1BattleTrainingStartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameflowV1BattleTrainingStart",
		Method:             "POST",
		PathPattern:        "/lol-gameflow/v1/battle-training/start",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameflowV1BattleTrainingStartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameflowV1BattleTrainingStartOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameflowV1BattleTrainingStart: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameflowV1BattleTrainingStop post lol gameflow v1 battle training stop API
*/
func (a *Client) PostLolGameflowV1BattleTrainingStop(params *PostLolGameflowV1BattleTrainingStopParams) (*PostLolGameflowV1BattleTrainingStopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameflowV1BattleTrainingStopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameflowV1BattleTrainingStop",
		Method:             "POST",
		PathPattern:        "/lol-gameflow/v1/battle-training/stop",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameflowV1BattleTrainingStopReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameflowV1BattleTrainingStopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameflowV1BattleTrainingStop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameflowV1ClientReceivedMessage post lol gameflow v1 client received message API
*/
func (a *Client) PostLolGameflowV1ClientReceivedMessage(params *PostLolGameflowV1ClientReceivedMessageParams) (*PostLolGameflowV1ClientReceivedMessageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameflowV1ClientReceivedMessageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameflowV1ClientReceivedMessage",
		Method:             "POST",
		PathPattern:        "/lol-gameflow/v1/client-received-message",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameflowV1ClientReceivedMessageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameflowV1ClientReceivedMessageNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameflowV1ClientReceivedMessage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameflowV1EarlyExit post lol gameflow v1 early exit API
*/
func (a *Client) PostLolGameflowV1EarlyExit(params *PostLolGameflowV1EarlyExitParams) (*PostLolGameflowV1EarlyExitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameflowV1EarlyExitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameflowV1EarlyExit",
		Method:             "POST",
		PathPattern:        "/lol-gameflow/v1/early-exit",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameflowV1EarlyExitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameflowV1EarlyExitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameflowV1EarlyExit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameflowV1ExtraGameClientArgs post lol gameflow v1 extra game client args API
*/
func (a *Client) PostLolGameflowV1ExtraGameClientArgs(params *PostLolGameflowV1ExtraGameClientArgsParams) (*PostLolGameflowV1ExtraGameClientArgsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameflowV1ExtraGameClientArgsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameflowV1ExtraGameClientArgs",
		Method:             "POST",
		PathPattern:        "/lol-gameflow/v1/extra-game-client-args",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameflowV1ExtraGameClientArgsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameflowV1ExtraGameClientArgsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameflowV1ExtraGameClientArgs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameflowV1GameflowMetadataPlayerStatus post lol gameflow v1 gameflow metadata player status API
*/
func (a *Client) PostLolGameflowV1GameflowMetadataPlayerStatus(params *PostLolGameflowV1GameflowMetadataPlayerStatusParams) (*PostLolGameflowV1GameflowMetadataPlayerStatusNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameflowV1GameflowMetadataPlayerStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameflowV1GameflowMetadataPlayerStatus",
		Method:             "POST",
		PathPattern:        "/lol-gameflow/v1/gameflow-metadata/player-status",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameflowV1GameflowMetadataPlayerStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameflowV1GameflowMetadataPlayerStatusNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameflowV1GameflowMetadataPlayerStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameflowV1GameflowMetadataRegistrationStatus post lol gameflow v1 gameflow metadata registration status API
*/
func (a *Client) PostLolGameflowV1GameflowMetadataRegistrationStatus(params *PostLolGameflowV1GameflowMetadataRegistrationStatusParams) (*PostLolGameflowV1GameflowMetadataRegistrationStatusNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameflowV1GameflowMetadataRegistrationStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameflowV1GameflowMetadataRegistrationStatus",
		Method:             "POST",
		PathPattern:        "/lol-gameflow/v1/gameflow-metadata/registration-status",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameflowV1GameflowMetadataRegistrationStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameflowV1GameflowMetadataRegistrationStatusNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameflowV1GameflowMetadataRegistrationStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameflowV1PreEndGameTransition post lol gameflow v1 pre end game transition API
*/
func (a *Client) PostLolGameflowV1PreEndGameTransition(params *PostLolGameflowV1PreEndGameTransitionParams) (*PostLolGameflowV1PreEndGameTransitionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameflowV1PreEndGameTransitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameflowV1PreEndGameTransition",
		Method:             "POST",
		PathPattern:        "/lol-gameflow/v1/pre-end-game-transition",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameflowV1PreEndGameTransitionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameflowV1PreEndGameTransitionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameflowV1PreEndGameTransition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameflowV1Reconnect post lol gameflow v1 reconnect API
*/
func (a *Client) PostLolGameflowV1Reconnect(params *PostLolGameflowV1ReconnectParams) (*PostLolGameflowV1ReconnectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameflowV1ReconnectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameflowV1Reconnect",
		Method:             "POST",
		PathPattern:        "/lol-gameflow/v1/reconnect",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameflowV1ReconnectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameflowV1ReconnectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameflowV1Reconnect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameflowV1SessionDodge post lol gameflow v1 session dodge API
*/
func (a *Client) PostLolGameflowV1SessionDodge(params *PostLolGameflowV1SessionDodgeParams) (*PostLolGameflowV1SessionDodgeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameflowV1SessionDodgeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameflowV1SessionDodge",
		Method:             "POST",
		PathPattern:        "/lol-gameflow/v1/session/dodge",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameflowV1SessionDodgeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameflowV1SessionDodgeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameflowV1SessionDodge: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameflowV1SessionEvent post lol gameflow v1 session event API
*/
func (a *Client) PostLolGameflowV1SessionEvent(params *PostLolGameflowV1SessionEventParams) (*PostLolGameflowV1SessionEventNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameflowV1SessionEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameflowV1SessionEvent",
		Method:             "POST",
		PathPattern:        "/lol-gameflow/v1/session/event",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameflowV1SessionEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameflowV1SessionEventNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameflowV1SessionEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameflowV1SessionGameConfiguration post lol gameflow v1 session game configuration API
*/
func (a *Client) PostLolGameflowV1SessionGameConfiguration(params *PostLolGameflowV1SessionGameConfigurationParams) (*PostLolGameflowV1SessionGameConfigurationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameflowV1SessionGameConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameflowV1SessionGameConfiguration",
		Method:             "POST",
		PathPattern:        "/lol-gameflow/v1/session/game-configuration",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameflowV1SessionGameConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameflowV1SessionGameConfigurationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameflowV1SessionGameConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameflowV1SessionRequestEnterGameflow post lol gameflow v1 session request enter gameflow API
*/
func (a *Client) PostLolGameflowV1SessionRequestEnterGameflow(params *PostLolGameflowV1SessionRequestEnterGameflowParams) (*PostLolGameflowV1SessionRequestEnterGameflowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameflowV1SessionRequestEnterGameflowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameflowV1SessionRequestEnterGameflow",
		Method:             "POST",
		PathPattern:        "/lol-gameflow/v1/session/request-enter-gameflow",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameflowV1SessionRequestEnterGameflowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameflowV1SessionRequestEnterGameflowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameflowV1SessionRequestEnterGameflow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameflowV1SessionRequestLobby post lol gameflow v1 session request lobby API
*/
func (a *Client) PostLolGameflowV1SessionRequestLobby(params *PostLolGameflowV1SessionRequestLobbyParams) (*PostLolGameflowV1SessionRequestLobbyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameflowV1SessionRequestLobbyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameflowV1SessionRequestLobby",
		Method:             "POST",
		PathPattern:        "/lol-gameflow/v1/session/request-lobby",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameflowV1SessionRequestLobbyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameflowV1SessionRequestLobbyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameflowV1SessionRequestLobby: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameflowV1SessionRequestTournamentCheckin post lol gameflow v1 session request tournament checkin API
*/
func (a *Client) PostLolGameflowV1SessionRequestTournamentCheckin(params *PostLolGameflowV1SessionRequestTournamentCheckinParams) (*PostLolGameflowV1SessionRequestTournamentCheckinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameflowV1SessionRequestTournamentCheckinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameflowV1SessionRequestTournamentCheckin",
		Method:             "POST",
		PathPattern:        "/lol-gameflow/v1/session/request-tournament-checkin",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameflowV1SessionRequestTournamentCheckinReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameflowV1SessionRequestTournamentCheckinOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameflowV1SessionRequestTournamentCheckin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameflowV1SessionTournamentEnded post lol gameflow v1 session tournament ended API
*/
func (a *Client) PostLolGameflowV1SessionTournamentEnded(params *PostLolGameflowV1SessionTournamentEndedParams) (*PostLolGameflowV1SessionTournamentEndedNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameflowV1SessionTournamentEndedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameflowV1SessionTournamentEnded",
		Method:             "POST",
		PathPattern:        "/lol-gameflow/v1/session/tournament-ended",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameflowV1SessionTournamentEndedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameflowV1SessionTournamentEndedNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameflowV1SessionTournamentEnded: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameflowV1SpectateLaunch post lol gameflow v1 spectate launch API
*/
func (a *Client) PostLolGameflowV1SpectateLaunch(params *PostLolGameflowV1SpectateLaunchParams) (*PostLolGameflowV1SpectateLaunchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameflowV1SpectateLaunchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameflowV1SpectateLaunch",
		Method:             "POST",
		PathPattern:        "/lol-gameflow/v1/spectate/launch",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameflowV1SpectateLaunchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameflowV1SpectateLaunchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameflowV1SpectateLaunch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameflowV1SpectateQuit post lol gameflow v1 spectate quit API
*/
func (a *Client) PostLolGameflowV1SpectateQuit(params *PostLolGameflowV1SpectateQuitParams) (*PostLolGameflowV1SpectateQuitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameflowV1SpectateQuitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameflowV1SpectateQuit",
		Method:             "POST",
		PathPattern:        "/lol-gameflow/v1/spectate/quit",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameflowV1SpectateQuitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameflowV1SpectateQuitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameflowV1SpectateQuit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameflowV1Tick post lol gameflow v1 tick API
*/
func (a *Client) PostLolGameflowV1Tick(params *PostLolGameflowV1TickParams) (*PostLolGameflowV1TickNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameflowV1TickParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameflowV1Tick",
		Method:             "POST",
		PathPattern:        "/lol-gameflow/v1/tick",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameflowV1TickReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameflowV1TickNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameflowV1Tick: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolGameflowV1WatchLaunch post lol gameflow v1 watch launch API
*/
func (a *Client) PostLolGameflowV1WatchLaunch(params *PostLolGameflowV1WatchLaunchParams) (*PostLolGameflowV1WatchLaunchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolGameflowV1WatchLaunchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolGameflowV1WatchLaunch",
		Method:             "POST",
		PathPattern:        "/lol-gameflow/v1/watch/launch",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolGameflowV1WatchLaunchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolGameflowV1WatchLaunchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolGameflowV1WatchLaunch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolHighlightsV1FileBrowserByHighlightID post lol highlights v1 file browser by highlight Id API
*/
func (a *Client) PostLolHighlightsV1FileBrowserByHighlightID(params *PostLolHighlightsV1FileBrowserByHighlightIDParams) (*PostLolHighlightsV1FileBrowserByHighlightIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolHighlightsV1FileBrowserByHighlightIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolHighlightsV1FileBrowserByHighlightId",
		Method:             "POST",
		PathPattern:        "/lol-highlights/v1/file-browser/{highlightId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolHighlightsV1FileBrowserByHighlightIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolHighlightsV1FileBrowserByHighlightIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolHighlightsV1FileBrowserByHighlightId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolHighlightsV1Highlights post lol highlights v1 highlights API
*/
func (a *Client) PostLolHighlightsV1Highlights(params *PostLolHighlightsV1HighlightsParams) (*PostLolHighlightsV1HighlightsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolHighlightsV1HighlightsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolHighlightsV1Highlights",
		Method:             "POST",
		PathPattern:        "/lol-highlights/v1/highlights",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolHighlightsV1HighlightsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolHighlightsV1HighlightsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolHighlightsV1Highlights: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolHonorV2V1HonorPlayer post lol honor v2 v1 honor player API
*/
func (a *Client) PostLolHonorV2V1HonorPlayer(params *PostLolHonorV2V1HonorPlayerParams) (*PostLolHonorV2V1HonorPlayerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolHonorV2V1HonorPlayerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolHonorV2V1HonorPlayer",
		Method:             "POST",
		PathPattern:        "/lol-honor-v2/v1/honor-player",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolHonorV2V1HonorPlayerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolHonorV2V1HonorPlayerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolHonorV2V1HonorPlayer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolHonorV2V1LateRecognitionAck post lol honor v2 v1 late recognition ack API
*/
func (a *Client) PostLolHonorV2V1LateRecognitionAck(params *PostLolHonorV2V1LateRecognitionAckParams) (*PostLolHonorV2V1LateRecognitionAckNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolHonorV2V1LateRecognitionAckParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolHonorV2V1LateRecognitionAck",
		Method:             "POST",
		PathPattern:        "/lol-honor-v2/v1/late-recognition/ack",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolHonorV2V1LateRecognitionAckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolHonorV2V1LateRecognitionAckNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolHonorV2V1LateRecognitionAck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolHonorV2V1LevelChangeAck post lol honor v2 v1 level change ack API
*/
func (a *Client) PostLolHonorV2V1LevelChangeAck(params *PostLolHonorV2V1LevelChangeAckParams) (*PostLolHonorV2V1LevelChangeAckNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolHonorV2V1LevelChangeAckParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolHonorV2V1LevelChangeAck",
		Method:             "POST",
		PathPattern:        "/lol-honor-v2/v1/level-change/ack",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolHonorV2V1LevelChangeAckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolHonorV2V1LevelChangeAckNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolHonorV2V1LevelChangeAck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolHonorV2V1MutualHonorAck post lol honor v2 v1 mutual honor ack API
*/
func (a *Client) PostLolHonorV2V1MutualHonorAck(params *PostLolHonorV2V1MutualHonorAckParams) (*PostLolHonorV2V1MutualHonorAckNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolHonorV2V1MutualHonorAckParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolHonorV2V1MutualHonorAck",
		Method:             "POST",
		PathPattern:        "/lol-honor-v2/v1/mutual-honor/ack",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolHonorV2V1MutualHonorAckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolHonorV2V1MutualHonorAckNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolHonorV2V1MutualHonorAck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolHonorV2V1RewardGrantedAck post lol honor v2 v1 reward granted ack API
*/
func (a *Client) PostLolHonorV2V1RewardGrantedAck(params *PostLolHonorV2V1RewardGrantedAckParams) (*PostLolHonorV2V1RewardGrantedAckNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolHonorV2V1RewardGrantedAckParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolHonorV2V1RewardGrantedAck",
		Method:             "POST",
		PathPattern:        "/lol-honor-v2/v1/reward-granted/ack",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolHonorV2V1RewardGrantedAckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolHonorV2V1RewardGrantedAckNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolHonorV2V1RewardGrantedAck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolInventoryV1NotificationAcknowledge post lol inventory v1 notification acknowledge API
*/
func (a *Client) PostLolInventoryV1NotificationAcknowledge(params *PostLolInventoryV1NotificationAcknowledgeParams) (*PostLolInventoryV1NotificationAcknowledgeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolInventoryV1NotificationAcknowledgeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolInventoryV1NotificationAcknowledge",
		Method:             "POST",
		PathPattern:        "/lol-inventory/v1/notification/acknowledge",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolInventoryV1NotificationAcknowledgeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolInventoryV1NotificationAcknowledgeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolInventoryV1NotificationAcknowledge: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolItemSetsV1ItemSetsBySummonerIDSets post lol item sets v1 item sets by summoner Id sets API
*/
func (a *Client) PostLolItemSetsV1ItemSetsBySummonerIDSets(params *PostLolItemSetsV1ItemSetsBySummonerIDSetsParams) (*PostLolItemSetsV1ItemSetsBySummonerIDSetsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolItemSetsV1ItemSetsBySummonerIDSetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolItemSetsV1ItemSetsBySummonerIdSets",
		Method:             "POST",
		PathPattern:        "/lol-item-sets/v1/item-sets/{summonerId}/sets",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolItemSetsV1ItemSetsBySummonerIDSetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolItemSetsV1ItemSetsBySummonerIDSetsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolItemSetsV1ItemSetsBySummonerIdSets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolKrShutdownLawV1RatingScreenAcknowledge post lol kr shutdown law v1 rating screen acknowledge API
*/
func (a *Client) PostLolKrShutdownLawV1RatingScreenAcknowledge(params *PostLolKrShutdownLawV1RatingScreenAcknowledgeParams) (*PostLolKrShutdownLawV1RatingScreenAcknowledgeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolKrShutdownLawV1RatingScreenAcknowledgeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolKrShutdownLawV1RatingScreenAcknowledge",
		Method:             "POST",
		PathPattern:        "/lol-kr-shutdown-law/v1/rating-screen/acknowledge",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolKrShutdownLawV1RatingScreenAcknowledgeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolKrShutdownLawV1RatingScreenAcknowledgeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolKrShutdownLawV1RatingScreenAcknowledge: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLicenseAgreementV1AgreementsByIDAccept post lol license agreement v1 agreements by Id accept API
*/
func (a *Client) PostLolLicenseAgreementV1AgreementsByIDAccept(params *PostLolLicenseAgreementV1AgreementsByIDAcceptParams) (*PostLolLicenseAgreementV1AgreementsByIDAcceptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLicenseAgreementV1AgreementsByIDAcceptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLicenseAgreementV1AgreementsByIdAccept",
		Method:             "POST",
		PathPattern:        "/lol-license-agreement/v1/agreements/{id}/accept",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLicenseAgreementV1AgreementsByIDAcceptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLicenseAgreementV1AgreementsByIDAcceptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLicenseAgreementV1AgreementsByIdAccept: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLicenseAgreementV1AgreementsByIDDecline post lol license agreement v1 agreements by Id decline API
*/
func (a *Client) PostLolLicenseAgreementV1AgreementsByIDDecline(params *PostLolLicenseAgreementV1AgreementsByIDDeclineParams) (*PostLolLicenseAgreementV1AgreementsByIDDeclineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLicenseAgreementV1AgreementsByIDDeclineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLicenseAgreementV1AgreementsByIdDecline",
		Method:             "POST",
		PathPattern:        "/lol-license-agreement/v1/agreements/{id}/decline",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLicenseAgreementV1AgreementsByIDDeclineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLicenseAgreementV1AgreementsByIDDeclineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLicenseAgreementV1AgreementsByIdDecline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLoadoutsV4Loadouts post lol loadouts v4 loadouts API
*/
func (a *Client) PostLolLoadoutsV4Loadouts(params *PostLolLoadoutsV4LoadoutsParams) (*PostLolLoadoutsV4LoadoutsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLoadoutsV4LoadoutsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLoadoutsV4Loadouts",
		Method:             "POST",
		PathPattern:        "/lol-loadouts/v4/loadouts",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLoadoutsV4LoadoutsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLoadoutsV4LoadoutsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLoadoutsV4Loadouts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyTeamBuilderChampSelectV1RetrieveLatestGameDto post lol lobby team builder champ select v1 retrieve latest game dto API
*/
func (a *Client) PostLolLobbyTeamBuilderChampSelectV1RetrieveLatestGameDto(params *PostLolLobbyTeamBuilderChampSelectV1RetrieveLatestGameDtoParams) (*PostLolLobbyTeamBuilderChampSelectV1RetrieveLatestGameDtoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyTeamBuilderChampSelectV1RetrieveLatestGameDtoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyTeamBuilderChampSelectV1RetrieveLatestGameDto",
		Method:             "POST",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/retrieve-latest-game-dto",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyTeamBuilderChampSelectV1RetrieveLatestGameDtoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyTeamBuilderChampSelectV1RetrieveLatestGameDtoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyTeamBuilderChampSelectV1RetrieveLatestGameDto: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyTeamBuilderChampSelectV1SessionActionsByIDComplete post lol lobby team builder champ select v1 session actions by Id complete API
*/
func (a *Client) PostLolLobbyTeamBuilderChampSelectV1SessionActionsByIDComplete(params *PostLolLobbyTeamBuilderChampSelectV1SessionActionsByIDCompleteParams) (*PostLolLobbyTeamBuilderChampSelectV1SessionActionsByIDCompleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyTeamBuilderChampSelectV1SessionActionsByIDCompleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyTeamBuilderChampSelectV1SessionActionsByIdComplete",
		Method:             "POST",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/session/actions/{id}/complete",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyTeamBuilderChampSelectV1SessionActionsByIDCompleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyTeamBuilderChampSelectV1SessionActionsByIDCompleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyTeamBuilderChampSelectV1SessionActionsByIdComplete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyTeamBuilderChampSelectV1SessionBenchSwapByChampionID post lol lobby team builder champ select v1 session bench swap by champion Id API
*/
func (a *Client) PostLolLobbyTeamBuilderChampSelectV1SessionBenchSwapByChampionID(params *PostLolLobbyTeamBuilderChampSelectV1SessionBenchSwapByChampionIDParams) (*PostLolLobbyTeamBuilderChampSelectV1SessionBenchSwapByChampionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyTeamBuilderChampSelectV1SessionBenchSwapByChampionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyTeamBuilderChampSelectV1SessionBenchSwapByChampionId",
		Method:             "POST",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/session/bench/swap/{championId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyTeamBuilderChampSelectV1SessionBenchSwapByChampionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyTeamBuilderChampSelectV1SessionBenchSwapByChampionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyTeamBuilderChampSelectV1SessionBenchSwapByChampionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyTeamBuilderChampSelectV1SessionMySelectionReroll post lol lobby team builder champ select v1 session my selection reroll API
*/
func (a *Client) PostLolLobbyTeamBuilderChampSelectV1SessionMySelectionReroll(params *PostLolLobbyTeamBuilderChampSelectV1SessionMySelectionRerollParams) (*PostLolLobbyTeamBuilderChampSelectV1SessionMySelectionRerollOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyTeamBuilderChampSelectV1SessionMySelectionRerollParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyTeamBuilderChampSelectV1SessionMySelectionReroll",
		Method:             "POST",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/session/my-selection/reroll",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyTeamBuilderChampSelectV1SessionMySelectionRerollReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyTeamBuilderChampSelectV1SessionMySelectionRerollOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyTeamBuilderChampSelectV1SessionMySelectionReroll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDAccept post lol lobby team builder champ select v1 session trades by Id accept API
*/
func (a *Client) PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDAccept(params *PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDAcceptParams) (*PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDAcceptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDAcceptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIdAccept",
		Method:             "POST",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/session/trades/{id}/accept",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDAcceptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDAcceptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIdAccept: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDCancel post lol lobby team builder champ select v1 session trades by Id cancel API
*/
func (a *Client) PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDCancel(params *PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDCancelParams) (*PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDCancelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDCancelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIdCancel",
		Method:             "POST",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/session/trades/{id}/cancel",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDCancelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDCancelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIdCancel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDDecline post lol lobby team builder champ select v1 session trades by Id decline API
*/
func (a *Client) PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDDecline(params *PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDDeclineParams) (*PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDDeclineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDDeclineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIdDecline",
		Method:             "POST",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/session/trades/{id}/decline",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDDeclineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDDeclineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIdDecline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDRequest post lol lobby team builder champ select v1 session trades by Id request API
*/
func (a *Client) PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDRequest(params *PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDRequestParams) (*PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIdRequest",
		Method:             "POST",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/session/trades/{id}/request",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIDRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIdRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyTeamBuilderChampSelectV1SimpleInventory post lol lobby team builder champ select v1 simple inventory API
*/
func (a *Client) PostLolLobbyTeamBuilderChampSelectV1SimpleInventory(params *PostLolLobbyTeamBuilderChampSelectV1SimpleInventoryParams) (*PostLolLobbyTeamBuilderChampSelectV1SimpleInventoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyTeamBuilderChampSelectV1SimpleInventoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyTeamBuilderChampSelectV1SimpleInventory",
		Method:             "POST",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/simple-inventory",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyTeamBuilderChampSelectV1SimpleInventoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyTeamBuilderChampSelectV1SimpleInventoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyTeamBuilderChampSelectV1SimpleInventory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyTeamBuilderChampSelectV1TeamBoostPurchase post lol lobby team builder champ select v1 team boost purchase API
*/
func (a *Client) PostLolLobbyTeamBuilderChampSelectV1TeamBoostPurchase(params *PostLolLobbyTeamBuilderChampSelectV1TeamBoostPurchaseParams) (*PostLolLobbyTeamBuilderChampSelectV1TeamBoostPurchaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyTeamBuilderChampSelectV1TeamBoostPurchaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyTeamBuilderChampSelectV1TeamBoostPurchase",
		Method:             "POST",
		PathPattern:        "/lol-lobby-team-builder/champ-select/v1/team-boost/purchase",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyTeamBuilderChampSelectV1TeamBoostPurchaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyTeamBuilderChampSelectV1TeamBoostPurchaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyTeamBuilderChampSelectV1TeamBoostPurchase: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyTeamBuilderV1InvitationsAccept post lol lobby team builder v1 invitations accept API
*/
func (a *Client) PostLolLobbyTeamBuilderV1InvitationsAccept(params *PostLolLobbyTeamBuilderV1InvitationsAcceptParams) (*PostLolLobbyTeamBuilderV1InvitationsAcceptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyTeamBuilderV1InvitationsAcceptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyTeamBuilderV1InvitationsAccept",
		Method:             "POST",
		PathPattern:        "/lol-lobby-team-builder/v1/invitations/accept",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyTeamBuilderV1InvitationsAcceptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyTeamBuilderV1InvitationsAcceptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyTeamBuilderV1InvitationsAccept: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyTeamBuilderV1Lobby post lol lobby team builder v1 lobby API
*/
func (a *Client) PostLolLobbyTeamBuilderV1Lobby(params *PostLolLobbyTeamBuilderV1LobbyParams) (*PostLolLobbyTeamBuilderV1LobbyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyTeamBuilderV1LobbyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyTeamBuilderV1Lobby",
		Method:             "POST",
		PathPattern:        "/lol-lobby-team-builder/v1/lobby",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyTeamBuilderV1LobbyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyTeamBuilderV1LobbyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyTeamBuilderV1Lobby: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyTeamBuilderV1LobbyMembersByIDKick post lol lobby team builder v1 lobby members by Id kick API
*/
func (a *Client) PostLolLobbyTeamBuilderV1LobbyMembersByIDKick(params *PostLolLobbyTeamBuilderV1LobbyMembersByIDKickParams) (*PostLolLobbyTeamBuilderV1LobbyMembersByIDKickOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyTeamBuilderV1LobbyMembersByIDKickParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyTeamBuilderV1LobbyMembersByIdKick",
		Method:             "POST",
		PathPattern:        "/lol-lobby-team-builder/v1/lobby/members/{id}/kick",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyTeamBuilderV1LobbyMembersByIDKickReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyTeamBuilderV1LobbyMembersByIDKickOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyTeamBuilderV1LobbyMembersByIdKick: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyTeamBuilderV1LobbyMembersByIDPromote post lol lobby team builder v1 lobby members by Id promote API
*/
func (a *Client) PostLolLobbyTeamBuilderV1LobbyMembersByIDPromote(params *PostLolLobbyTeamBuilderV1LobbyMembersByIDPromoteParams) (*PostLolLobbyTeamBuilderV1LobbyMembersByIDPromoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyTeamBuilderV1LobbyMembersByIDPromoteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyTeamBuilderV1LobbyMembersByIdPromote",
		Method:             "POST",
		PathPattern:        "/lol-lobby-team-builder/v1/lobby/members/{id}/promote",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyTeamBuilderV1LobbyMembersByIDPromoteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyTeamBuilderV1LobbyMembersByIDPromoteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyTeamBuilderV1LobbyMembersByIdPromote: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyTeamBuilderV1MatchmakingLowPriorityQueueAbandon post lol lobby team builder v1 matchmaking low priority queue abandon API
*/
func (a *Client) PostLolLobbyTeamBuilderV1MatchmakingLowPriorityQueueAbandon(params *PostLolLobbyTeamBuilderV1MatchmakingLowPriorityQueueAbandonParams) (*PostLolLobbyTeamBuilderV1MatchmakingLowPriorityQueueAbandonOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyTeamBuilderV1MatchmakingLowPriorityQueueAbandonParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyTeamBuilderV1MatchmakingLowPriorityQueueAbandon",
		Method:             "POST",
		PathPattern:        "/lol-lobby-team-builder/v1/matchmaking/low-priority-queue/abandon",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyTeamBuilderV1MatchmakingLowPriorityQueueAbandonReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyTeamBuilderV1MatchmakingLowPriorityQueueAbandonOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyTeamBuilderV1MatchmakingLowPriorityQueueAbandon: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyTeamBuilderV1MatchmakingSearch post lol lobby team builder v1 matchmaking search API
*/
func (a *Client) PostLolLobbyTeamBuilderV1MatchmakingSearch(params *PostLolLobbyTeamBuilderV1MatchmakingSearchParams) (*PostLolLobbyTeamBuilderV1MatchmakingSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyTeamBuilderV1MatchmakingSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyTeamBuilderV1MatchmakingSearch",
		Method:             "POST",
		PathPattern:        "/lol-lobby-team-builder/v1/matchmaking/search",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyTeamBuilderV1MatchmakingSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyTeamBuilderV1MatchmakingSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyTeamBuilderV1MatchmakingSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyTeamBuilderV1PositionPreferences post lol lobby team builder v1 position preferences API
*/
func (a *Client) PostLolLobbyTeamBuilderV1PositionPreferences(params *PostLolLobbyTeamBuilderV1PositionPreferencesParams) (*PostLolLobbyTeamBuilderV1PositionPreferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyTeamBuilderV1PositionPreferencesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyTeamBuilderV1PositionPreferences",
		Method:             "POST",
		PathPattern:        "/lol-lobby-team-builder/v1/position-preferences",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyTeamBuilderV1PositionPreferencesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyTeamBuilderV1PositionPreferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyTeamBuilderV1PositionPreferences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyTeamBuilderV1ReadyCheckAccept post lol lobby team builder v1 ready check accept API
*/
func (a *Client) PostLolLobbyTeamBuilderV1ReadyCheckAccept(params *PostLolLobbyTeamBuilderV1ReadyCheckAcceptParams) (*PostLolLobbyTeamBuilderV1ReadyCheckAcceptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyTeamBuilderV1ReadyCheckAcceptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyTeamBuilderV1ReadyCheckAccept",
		Method:             "POST",
		PathPattern:        "/lol-lobby-team-builder/v1/ready-check/accept",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyTeamBuilderV1ReadyCheckAcceptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyTeamBuilderV1ReadyCheckAcceptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyTeamBuilderV1ReadyCheckAccept: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyTeamBuilderV1ReadyCheckDecline post lol lobby team builder v1 ready check decline API
*/
func (a *Client) PostLolLobbyTeamBuilderV1ReadyCheckDecline(params *PostLolLobbyTeamBuilderV1ReadyCheckDeclineParams) (*PostLolLobbyTeamBuilderV1ReadyCheckDeclineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyTeamBuilderV1ReadyCheckDeclineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyTeamBuilderV1ReadyCheckDecline",
		Method:             "POST",
		PathPattern:        "/lol-lobby-team-builder/v1/ready-check/decline",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyTeamBuilderV1ReadyCheckDeclineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyTeamBuilderV1ReadyCheckDeclineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyTeamBuilderV1ReadyCheckDecline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyTeamBuilderV2PositionPreferences post lol lobby team builder v2 position preferences API
*/
func (a *Client) PostLolLobbyTeamBuilderV2PositionPreferences(params *PostLolLobbyTeamBuilderV2PositionPreferencesParams) (*PostLolLobbyTeamBuilderV2PositionPreferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyTeamBuilderV2PositionPreferencesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyTeamBuilderV2PositionPreferences",
		Method:             "POST",
		PathPattern:        "/lol-lobby-team-builder/v2/position-preferences",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyTeamBuilderV2PositionPreferencesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyTeamBuilderV2PositionPreferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyTeamBuilderV2PositionPreferences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV1Clash post lol lobby v1 clash API
*/
func (a *Client) PostLolLobbyV1Clash(params *PostLolLobbyV1ClashParams) (*PostLolLobbyV1ClashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV1ClashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV1Clash",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v1/clash",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV1ClashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV1ClashOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV1Clash: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV1CustomGamesByIDJoin post lol lobby v1 custom games by Id join API
*/
func (a *Client) PostLolLobbyV1CustomGamesByIDJoin(params *PostLolLobbyV1CustomGamesByIDJoinParams) (*PostLolLobbyV1CustomGamesByIDJoinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV1CustomGamesByIDJoinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV1CustomGamesByIdJoin",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v1/custom-games/{id}/join",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV1CustomGamesByIDJoinReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV1CustomGamesByIDJoinOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV1CustomGamesByIdJoin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV1CustomGamesRefresh post lol lobby v1 custom games refresh API
*/
func (a *Client) PostLolLobbyV1CustomGamesRefresh(params *PostLolLobbyV1CustomGamesRefreshParams) (*PostLolLobbyV1CustomGamesRefreshOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV1CustomGamesRefreshParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV1CustomGamesRefresh",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v1/custom-games/refresh",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV1CustomGamesRefreshReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV1CustomGamesRefreshOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV1CustomGamesRefresh: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV1LobbyCustomBots post lol lobby v1 lobby custom bots API
*/
func (a *Client) PostLolLobbyV1LobbyCustomBots(params *PostLolLobbyV1LobbyCustomBotsParams) (*PostLolLobbyV1LobbyCustomBotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV1LobbyCustomBotsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV1LobbyCustomBots",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v1/lobby/custom/bots",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV1LobbyCustomBotsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV1LobbyCustomBotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV1LobbyCustomBots: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV1LobbyCustomBotsBySummonerInternalName post lol lobby v1 lobby custom bots by summoner internal name API
*/
func (a *Client) PostLolLobbyV1LobbyCustomBotsBySummonerInternalName(params *PostLolLobbyV1LobbyCustomBotsBySummonerInternalNameParams) (*PostLolLobbyV1LobbyCustomBotsBySummonerInternalNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV1LobbyCustomBotsBySummonerInternalNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV1LobbyCustomBotsBySummonerInternalName",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v1/lobby/custom/bots/{summonerInternalName}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV1LobbyCustomBotsBySummonerInternalNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV1LobbyCustomBotsBySummonerInternalNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV1LobbyCustomBotsBySummonerInternalName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV1LobbyCustomCancelChampSelect post lol lobby v1 lobby custom cancel champ select API
*/
func (a *Client) PostLolLobbyV1LobbyCustomCancelChampSelect(params *PostLolLobbyV1LobbyCustomCancelChampSelectParams) (*PostLolLobbyV1LobbyCustomCancelChampSelectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV1LobbyCustomCancelChampSelectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV1LobbyCustomCancelChampSelect",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v1/lobby/custom/cancel-champ-select",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV1LobbyCustomCancelChampSelectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV1LobbyCustomCancelChampSelectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV1LobbyCustomCancelChampSelect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV1LobbyCustomStartChampSelect post lol lobby v1 lobby custom start champ select API
*/
func (a *Client) PostLolLobbyV1LobbyCustomStartChampSelect(params *PostLolLobbyV1LobbyCustomStartChampSelectParams) (*PostLolLobbyV1LobbyCustomStartChampSelectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV1LobbyCustomStartChampSelectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV1LobbyCustomStartChampSelect",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v1/lobby/custom/start-champ-select",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV1LobbyCustomStartChampSelectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV1LobbyCustomStartChampSelectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV1LobbyCustomStartChampSelect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV1LobbyCustomSwitchTeams post lol lobby v1 lobby custom switch teams API
*/
func (a *Client) PostLolLobbyV1LobbyCustomSwitchTeams(params *PostLolLobbyV1LobbyCustomSwitchTeamsParams) (*PostLolLobbyV1LobbyCustomSwitchTeamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV1LobbyCustomSwitchTeamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV1LobbyCustomSwitchTeams",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v1/lobby/custom/switch-teams",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV1LobbyCustomSwitchTeamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV1LobbyCustomSwitchTeamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV1LobbyCustomSwitchTeams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV1LobbyInvitations post lol lobby v1 lobby invitations API
*/
func (a *Client) PostLolLobbyV1LobbyInvitations(params *PostLolLobbyV1LobbyInvitationsParams) (*PostLolLobbyV1LobbyInvitationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV1LobbyInvitationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV1LobbyInvitations",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v1/lobby/invitations",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV1LobbyInvitationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV1LobbyInvitationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV1LobbyInvitations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV1TournamentsByIDJoin post lol lobby v1 tournaments by Id join API
*/
func (a *Client) PostLolLobbyV1TournamentsByIDJoin(params *PostLolLobbyV1TournamentsByIDJoinParams) (*PostLolLobbyV1TournamentsByIDJoinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV1TournamentsByIDJoinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV1TournamentsByIdJoin",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v1/tournaments/{id}/join",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV1TournamentsByIDJoinReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV1TournamentsByIDJoinOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV1TournamentsByIdJoin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV2EligibilityParty post lol lobby v2 eligibility party API
*/
func (a *Client) PostLolLobbyV2EligibilityParty(params *PostLolLobbyV2EligibilityPartyParams) (*PostLolLobbyV2EligibilityPartyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV2EligibilityPartyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV2EligibilityParty",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v2/eligibility/party",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV2EligibilityPartyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV2EligibilityPartyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV2EligibilityParty: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV2EligibilitySelf post lol lobby v2 eligibility self API
*/
func (a *Client) PostLolLobbyV2EligibilitySelf(params *PostLolLobbyV2EligibilitySelfParams) (*PostLolLobbyV2EligibilitySelfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV2EligibilitySelfParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV2EligibilitySelf",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v2/eligibility/self",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV2EligibilitySelfReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV2EligibilitySelfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV2EligibilitySelf: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV2EogInvitations post lol lobby v2 eog invitations API
*/
func (a *Client) PostLolLobbyV2EogInvitations(params *PostLolLobbyV2EogInvitationsParams) (*PostLolLobbyV2EogInvitationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV2EogInvitationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV2EogInvitations",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v2/eog-invitations",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV2EogInvitationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV2EogInvitationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV2EogInvitations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV2Lobby post lol lobby v2 lobby API
*/
func (a *Client) PostLolLobbyV2Lobby(params *PostLolLobbyV2LobbyParams) (*PostLolLobbyV2LobbyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV2LobbyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV2Lobby",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v2/lobby",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV2LobbyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV2LobbyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV2Lobby: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV2LobbyInvitations post lol lobby v2 lobby invitations API
*/
func (a *Client) PostLolLobbyV2LobbyInvitations(params *PostLolLobbyV2LobbyInvitationsParams) (*PostLolLobbyV2LobbyInvitationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV2LobbyInvitationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV2LobbyInvitations",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v2/lobby/invitations",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV2LobbyInvitationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV2LobbyInvitationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV2LobbyInvitations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV2LobbyMatchmakingSearch post lol lobby v2 lobby matchmaking search API
*/
func (a *Client) PostLolLobbyV2LobbyMatchmakingSearch(params *PostLolLobbyV2LobbyMatchmakingSearchParams) (*PostLolLobbyV2LobbyMatchmakingSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV2LobbyMatchmakingSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV2LobbyMatchmakingSearch",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v2/lobby/matchmaking/search",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV2LobbyMatchmakingSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV2LobbyMatchmakingSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV2LobbyMatchmakingSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV2LobbyMembersBySummonerIDGrantInvite post lol lobby v2 lobby members by summoner Id grant invite API
*/
func (a *Client) PostLolLobbyV2LobbyMembersBySummonerIDGrantInvite(params *PostLolLobbyV2LobbyMembersBySummonerIDGrantInviteParams) (*PostLolLobbyV2LobbyMembersBySummonerIDGrantInviteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV2LobbyMembersBySummonerIDGrantInviteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV2LobbyMembersBySummonerIdGrantInvite",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v2/lobby/members/{summonerId}/grant-invite",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV2LobbyMembersBySummonerIDGrantInviteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV2LobbyMembersBySummonerIDGrantInviteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV2LobbyMembersBySummonerIdGrantInvite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV2LobbyMembersBySummonerIDKick post lol lobby v2 lobby members by summoner Id kick API
*/
func (a *Client) PostLolLobbyV2LobbyMembersBySummonerIDKick(params *PostLolLobbyV2LobbyMembersBySummonerIDKickParams) (*PostLolLobbyV2LobbyMembersBySummonerIDKickOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV2LobbyMembersBySummonerIDKickParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV2LobbyMembersBySummonerIdKick",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v2/lobby/members/{summonerId}/kick",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV2LobbyMembersBySummonerIDKickReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV2LobbyMembersBySummonerIDKickOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV2LobbyMembersBySummonerIdKick: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV2LobbyMembersBySummonerIDPromote post lol lobby v2 lobby members by summoner Id promote API
*/
func (a *Client) PostLolLobbyV2LobbyMembersBySummonerIDPromote(params *PostLolLobbyV2LobbyMembersBySummonerIDPromoteParams) (*PostLolLobbyV2LobbyMembersBySummonerIDPromoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV2LobbyMembersBySummonerIDPromoteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV2LobbyMembersBySummonerIdPromote",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v2/lobby/members/{summonerId}/promote",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV2LobbyMembersBySummonerIDPromoteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV2LobbyMembersBySummonerIDPromoteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV2LobbyMembersBySummonerIdPromote: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV2LobbyMembersBySummonerIDRevokeInvite post lol lobby v2 lobby members by summoner Id revoke invite API
*/
func (a *Client) PostLolLobbyV2LobbyMembersBySummonerIDRevokeInvite(params *PostLolLobbyV2LobbyMembersBySummonerIDRevokeInviteParams) (*PostLolLobbyV2LobbyMembersBySummonerIDRevokeInviteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV2LobbyMembersBySummonerIDRevokeInviteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV2LobbyMembersBySummonerIdRevokeInvite",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v2/lobby/members/{summonerId}/revoke-invite",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV2LobbyMembersBySummonerIDRevokeInviteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV2LobbyMembersBySummonerIDRevokeInviteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV2LobbyMembersBySummonerIdRevokeInvite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV2MatchmakingQuickSearch post lol lobby v2 matchmaking quick search API
*/
func (a *Client) PostLolLobbyV2MatchmakingQuickSearch(params *PostLolLobbyV2MatchmakingQuickSearchParams) (*PostLolLobbyV2MatchmakingQuickSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV2MatchmakingQuickSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV2MatchmakingQuickSearch",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v2/matchmaking/quick-search",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV2MatchmakingQuickSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV2MatchmakingQuickSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV2MatchmakingQuickSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV2Notifications post lol lobby v2 notifications API
*/
func (a *Client) PostLolLobbyV2Notifications(params *PostLolLobbyV2NotificationsParams) (*PostLolLobbyV2NotificationsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV2NotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV2Notifications",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v2/notifications",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV2NotificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV2NotificationsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV2Notifications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV2PartiesOverridesEnabled post lol lobby v2 parties overrides enabled API
*/
func (a *Client) PostLolLobbyV2PartiesOverridesEnabled(params *PostLolLobbyV2PartiesOverridesEnabledParams) (*PostLolLobbyV2PartiesOverridesEnabledNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV2PartiesOverridesEnabledParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV2PartiesOverridesEnabled",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v2/parties/overrides/Enabled",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV2PartiesOverridesEnabledReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV2PartiesOverridesEnabledNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV2PartiesOverridesEnabled: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV2PartiesOverridesEnabledForTeamBuilderQueues post lol lobby v2 parties overrides enabled for team builder queues API
*/
func (a *Client) PostLolLobbyV2PartiesOverridesEnabledForTeamBuilderQueues(params *PostLolLobbyV2PartiesOverridesEnabledForTeamBuilderQueuesParams) (*PostLolLobbyV2PartiesOverridesEnabledForTeamBuilderQueuesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV2PartiesOverridesEnabledForTeamBuilderQueuesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV2PartiesOverridesEnabledForTeamBuilderQueues",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v2/parties/overrides/EnabledForTeamBuilderQueues",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV2PartiesOverridesEnabledForTeamBuilderQueuesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV2PartiesOverridesEnabledForTeamBuilderQueuesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV2PartiesOverridesEnabledForTeamBuilderQueues: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV2PartyByPartyIDJoin post lol lobby v2 party by party Id join API
*/
func (a *Client) PostLolLobbyV2PartyByPartyIDJoin(params *PostLolLobbyV2PartyByPartyIDJoinParams) (*PostLolLobbyV2PartyByPartyIDJoinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV2PartyByPartyIDJoinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV2PartyByPartyIdJoin",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v2/party/{partyId}/join",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV2PartyByPartyIDJoinReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV2PartyByPartyIDJoinOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV2PartyByPartyIdJoin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV2PlayAgain post lol lobby v2 play again API
*/
func (a *Client) PostLolLobbyV2PlayAgain(params *PostLolLobbyV2PlayAgainParams) (*PostLolLobbyV2PlayAgainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV2PlayAgainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV2PlayAgain",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v2/play-again",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV2PlayAgainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV2PlayAgainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV2PlayAgain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV2PlayAgainDecline post lol lobby v2 play again decline API
*/
func (a *Client) PostLolLobbyV2PlayAgainDecline(params *PostLolLobbyV2PlayAgainDeclineParams) (*PostLolLobbyV2PlayAgainDeclineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV2PlayAgainDeclineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV2PlayAgainDecline",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v2/play-again-decline",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV2PlayAgainDeclineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV2PlayAgainDeclineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV2PlayAgainDecline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV2ReceivedInvitationsByInvitationIDAccept post lol lobby v2 received invitations by invitation Id accept API
*/
func (a *Client) PostLolLobbyV2ReceivedInvitationsByInvitationIDAccept(params *PostLolLobbyV2ReceivedInvitationsByInvitationIDAcceptParams) (*PostLolLobbyV2ReceivedInvitationsByInvitationIDAcceptNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV2ReceivedInvitationsByInvitationIDAcceptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV2ReceivedInvitationsByInvitationIdAccept",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v2/received-invitations/{invitationId}/accept",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV2ReceivedInvitationsByInvitationIDAcceptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV2ReceivedInvitationsByInvitationIDAcceptNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV2ReceivedInvitationsByInvitationIdAccept: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLobbyV2ReceivedInvitationsByInvitationIDDecline post lol lobby v2 received invitations by invitation Id decline API
*/
func (a *Client) PostLolLobbyV2ReceivedInvitationsByInvitationIDDecline(params *PostLolLobbyV2ReceivedInvitationsByInvitationIDDeclineParams) (*PostLolLobbyV2ReceivedInvitationsByInvitationIDDeclineNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLobbyV2ReceivedInvitationsByInvitationIDDeclineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLobbyV2ReceivedInvitationsByInvitationIdDecline",
		Method:             "POST",
		PathPattern:        "/lol-lobby/v2/received-invitations/{invitationId}/decline",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLobbyV2ReceivedInvitationsByInvitationIDDeclineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLobbyV2ReceivedInvitationsByInvitationIDDeclineNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLobbyV2ReceivedInvitationsByInvitationIdDecline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLoginV1AccessToken post lol login v1 access token API
*/
func (a *Client) PostLolLoginV1AccessToken(params *PostLolLoginV1AccessTokenParams) (*PostLolLoginV1AccessTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLoginV1AccessTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLoginV1AccessToken",
		Method:             "POST",
		PathPattern:        "/lol-login/v1/access-token",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLoginV1AccessTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLoginV1AccessTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLoginV1AccessToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLoginV1AccountState post lol login v1 account state API
*/
func (a *Client) PostLolLoginV1AccountState(params *PostLolLoginV1AccountStateParams) (*PostLolLoginV1AccountStateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLoginV1AccountStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLoginV1AccountState",
		Method:             "POST",
		PathPattern:        "/lol-login/v1/account-state",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLoginV1AccountStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLoginV1AccountStateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLoginV1AccountState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLoginV1ChangeSummonerName post lol login v1 change summoner name API
*/
func (a *Client) PostLolLoginV1ChangeSummonerName(params *PostLolLoginV1ChangeSummonerNameParams) (*PostLolLoginV1ChangeSummonerNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLoginV1ChangeSummonerNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLoginV1ChangeSummonerName",
		Method:             "POST",
		PathPattern:        "/lol-login/v1/change-summoner-name",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLoginV1ChangeSummonerNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLoginV1ChangeSummonerNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLoginV1ChangeSummonerName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLoginV1DeleteRsoOnClose post lol login v1 delete rso on close API
*/
func (a *Client) PostLolLoginV1DeleteRsoOnClose(params *PostLolLoginV1DeleteRsoOnCloseParams) (*PostLolLoginV1DeleteRsoOnCloseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLoginV1DeleteRsoOnCloseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLoginV1DeleteRsoOnClose",
		Method:             "POST",
		PathPattern:        "/lol-login/v1/delete-rso-on-close",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLoginV1DeleteRsoOnCloseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLoginV1DeleteRsoOnCloseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLoginV1DeleteRsoOnClose: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLoginV1LeagueSessionStatus post lol login v1 league session status API
*/
func (a *Client) PostLolLoginV1LeagueSessionStatus(params *PostLolLoginV1LeagueSessionStatusParams) (*PostLolLoginV1LeagueSessionStatusNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLoginV1LeagueSessionStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLoginV1LeagueSessionStatus",
		Method:             "POST",
		PathPattern:        "/lol-login/v1/leagueSessionStatus",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLoginV1LeagueSessionStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLoginV1LeagueSessionStatusNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLoginV1LeagueSessionStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLoginV1NewPlayerFlowCompleted post lol login v1 new player flow completed API
*/
func (a *Client) PostLolLoginV1NewPlayerFlowCompleted(params *PostLolLoginV1NewPlayerFlowCompletedParams) (*PostLolLoginV1NewPlayerFlowCompletedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLoginV1NewPlayerFlowCompletedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLoginV1NewPlayerFlowCompleted",
		Method:             "POST",
		PathPattern:        "/lol-login/v1/new-player-flow-completed",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLoginV1NewPlayerFlowCompletedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLoginV1NewPlayerFlowCompletedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLoginV1NewPlayerFlowCompleted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLoginV1ServiceProxyAsyncRequestsByServiceNameByMethodName post lol login v1 service proxy async requests by service name by method name API
*/
func (a *Client) PostLolLoginV1ServiceProxyAsyncRequestsByServiceNameByMethodName(params *PostLolLoginV1ServiceProxyAsyncRequestsByServiceNameByMethodNameParams) (*PostLolLoginV1ServiceProxyAsyncRequestsByServiceNameByMethodNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLoginV1ServiceProxyAsyncRequestsByServiceNameByMethodNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLoginV1ServiceProxyAsyncRequestsByServiceNameByMethodName",
		Method:             "POST",
		PathPattern:        "/lol-login/v1/service-proxy-async-requests/{serviceName}/{methodName}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLoginV1ServiceProxyAsyncRequestsByServiceNameByMethodNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLoginV1ServiceProxyAsyncRequestsByServiceNameByMethodNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLoginV1ServiceProxyAsyncRequestsByServiceNameByMethodName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLoginV1ServiceProxyMethodRequests post lol login v1 service proxy method requests API
*/
func (a *Client) PostLolLoginV1ServiceProxyMethodRequests(params *PostLolLoginV1ServiceProxyMethodRequestsParams) (*PostLolLoginV1ServiceProxyMethodRequestsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLoginV1ServiceProxyMethodRequestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLoginV1ServiceProxyMethodRequests",
		Method:             "POST",
		PathPattern:        "/lol-login/v1/service-proxy-method-requests",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLoginV1ServiceProxyMethodRequestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLoginV1ServiceProxyMethodRequestsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLoginV1ServiceProxyMethodRequests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLoginV1ServiceProxyUUIDRequests post lol login v1 service proxy Uuid requests API
*/
func (a *Client) PostLolLoginV1ServiceProxyUUIDRequests(params *PostLolLoginV1ServiceProxyUUIDRequestsParams) (*PostLolLoginV1ServiceProxyUUIDRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLoginV1ServiceProxyUUIDRequestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLoginV1ServiceProxyUuidRequests",
		Method:             "POST",
		PathPattern:        "/lol-login/v1/service-proxy-uuid-requests",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLoginV1ServiceProxyUUIDRequestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLoginV1ServiceProxyUUIDRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLoginV1ServiceProxyUuidRequests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLoginV1Session post lol login v1 session API
*/
func (a *Client) PostLolLoginV1Session(params *PostLolLoginV1SessionParams) (*PostLolLoginV1SessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLoginV1SessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLoginV1Session",
		Method:             "POST",
		PathPattern:        "/lol-login/v1/session",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLoginV1SessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLoginV1SessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLoginV1Session: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLoginV1SessionInvoke post lol login v1 session invoke API
*/
func (a *Client) PostLolLoginV1SessionInvoke(params *PostLolLoginV1SessionInvokeParams) (*PostLolLoginV1SessionInvokeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLoginV1SessionInvokeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLoginV1SessionInvoke",
		Method:             "POST",
		PathPattern:        "/lol-login/v1/session/invoke",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLoginV1SessionInvokeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLoginV1SessionInvokeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLoginV1SessionInvoke: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLoginV1SummonerCreated post lol login v1 summoner created API
*/
func (a *Client) PostLolLoginV1SummonerCreated(params *PostLolLoginV1SummonerCreatedParams) (*PostLolLoginV1SummonerCreatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLoginV1SummonerCreatedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLoginV1SummonerCreated",
		Method:             "POST",
		PathPattern:        "/lol-login/v1/summoner-created",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLoginV1SummonerCreatedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLoginV1SummonerCreatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLoginV1SummonerCreated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLootV1NewPlayerCheckDoneByNewValue post lol loot v1 new player check done by new value API
*/
func (a *Client) PostLolLootV1NewPlayerCheckDoneByNewValue(params *PostLolLootV1NewPlayerCheckDoneByNewValueParams) (*PostLolLootV1NewPlayerCheckDoneByNewValueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLootV1NewPlayerCheckDoneByNewValueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLootV1NewPlayerCheckDoneByNewValue",
		Method:             "POST",
		PathPattern:        "/lol-loot/v1/new-player-check-done/{newValue}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLootV1NewPlayerCheckDoneByNewValueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLootV1NewPlayerCheckDoneByNewValueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLootV1NewPlayerCheckDoneByNewValue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLootV1PlayerLootByLootIDContextMenu post lol loot v1 player loot by loot Id context menu API
*/
func (a *Client) PostLolLootV1PlayerLootByLootIDContextMenu(params *PostLolLootV1PlayerLootByLootIDContextMenuParams) (*PostLolLootV1PlayerLootByLootIDContextMenuOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLootV1PlayerLootByLootIDContextMenuParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLootV1PlayerLootByLootIdContextMenu",
		Method:             "POST",
		PathPattern:        "/lol-loot/v1/player-loot/{lootId}/context-menu",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLootV1PlayerLootByLootIDContextMenuReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLootV1PlayerLootByLootIDContextMenuOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLootV1PlayerLootByLootIdContextMenu: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLootV1PlayerLootByLootNameRedeem post lol loot v1 player loot by loot name redeem API
*/
func (a *Client) PostLolLootV1PlayerLootByLootNameRedeem(params *PostLolLootV1PlayerLootByLootNameRedeemParams) (*PostLolLootV1PlayerLootByLootNameRedeemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLootV1PlayerLootByLootNameRedeemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLootV1PlayerLootByLootNameRedeem",
		Method:             "POST",
		PathPattern:        "/lol-loot/v1/player-loot/{lootName}/redeem",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLootV1PlayerLootByLootNameRedeemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLootV1PlayerLootByLootNameRedeemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLootV1PlayerLootByLootNameRedeem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLootV1PlayerLootNotificationsByIDAcknowledge post lol loot v1 player loot notifications by Id acknowledge API
*/
func (a *Client) PostLolLootV1PlayerLootNotificationsByIDAcknowledge(params *PostLolLootV1PlayerLootNotificationsByIDAcknowledgeParams) (*PostLolLootV1PlayerLootNotificationsByIDAcknowledgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLootV1PlayerLootNotificationsByIDAcknowledgeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLootV1PlayerLootNotificationsByIdAcknowledge",
		Method:             "POST",
		PathPattern:        "/lol-loot/v1/player-loot-notifications/{id}/acknowledge",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLootV1PlayerLootNotificationsByIDAcknowledgeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLootV1PlayerLootNotificationsByIDAcknowledgeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLootV1PlayerLootNotificationsByIdAcknowledge: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLootV1RecipesByRecipeNameCraft post lol loot v1 recipes by recipe name craft API
*/
func (a *Client) PostLolLootV1RecipesByRecipeNameCraft(params *PostLolLootV1RecipesByRecipeNameCraftParams) (*PostLolLootV1RecipesByRecipeNameCraftOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLootV1RecipesByRecipeNameCraftParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLootV1RecipesByRecipeNameCraft",
		Method:             "POST",
		PathPattern:        "/lol-loot/v1/recipes/{recipeName}/craft",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLootV1RecipesByRecipeNameCraftReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLootV1RecipesByRecipeNameCraftOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLootV1RecipesByRecipeNameCraft: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLootV1RecipesInitialItemByLootID post lol loot v1 recipes initial item by loot Id API
*/
func (a *Client) PostLolLootV1RecipesInitialItemByLootID(params *PostLolLootV1RecipesInitialItemByLootIDParams) (*PostLolLootV1RecipesInitialItemByLootIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLootV1RecipesInitialItemByLootIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLootV1RecipesInitialItemByLootId",
		Method:             "POST",
		PathPattern:        "/lol-loot/v1/recipes/initial-item/{lootId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLootV1RecipesInitialItemByLootIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLootV1RecipesInitialItemByLootIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLootV1RecipesInitialItemByLootId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolLootV1Refresh post lol loot v1 refresh API
*/
func (a *Client) PostLolLootV1Refresh(params *PostLolLootV1RefreshParams) (*PostLolLootV1RefreshOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolLootV1RefreshParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolLootV1Refresh",
		Method:             "POST",
		PathPattern:        "/lol-loot/v1/refresh",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolLootV1RefreshReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolLootV1RefreshOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolLootV1Refresh: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolMapsV1Map post lol maps v1 map API
*/
func (a *Client) PostLolMapsV1Map(params *PostLolMapsV1MapParams) (*PostLolMapsV1MapNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolMapsV1MapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolMapsV1Map",
		Method:             "POST",
		PathPattern:        "/lol-maps/v1/map",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolMapsV1MapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolMapsV1MapNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolMapsV1Map: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolMatchmakingV1ReadyCheckAccept post lol matchmaking v1 ready check accept API
*/
func (a *Client) PostLolMatchmakingV1ReadyCheckAccept(params *PostLolMatchmakingV1ReadyCheckAcceptParams) (*PostLolMatchmakingV1ReadyCheckAcceptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolMatchmakingV1ReadyCheckAcceptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolMatchmakingV1ReadyCheckAccept",
		Method:             "POST",
		PathPattern:        "/lol-matchmaking/v1/ready-check/accept",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolMatchmakingV1ReadyCheckAcceptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolMatchmakingV1ReadyCheckAcceptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolMatchmakingV1ReadyCheckAccept: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolMatchmakingV1ReadyCheckDecline post lol matchmaking v1 ready check decline API
*/
func (a *Client) PostLolMatchmakingV1ReadyCheckDecline(params *PostLolMatchmakingV1ReadyCheckDeclineParams) (*PostLolMatchmakingV1ReadyCheckDeclineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolMatchmakingV1ReadyCheckDeclineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolMatchmakingV1ReadyCheckDecline",
		Method:             "POST",
		PathPattern:        "/lol-matchmaking/v1/ready-check/decline",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolMatchmakingV1ReadyCheckDeclineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolMatchmakingV1ReadyCheckDeclineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolMatchmakingV1ReadyCheckDecline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolMatchmakingV1Search post lol matchmaking v1 search API
*/
func (a *Client) PostLolMatchmakingV1Search(params *PostLolMatchmakingV1SearchParams) (*PostLolMatchmakingV1SearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolMatchmakingV1SearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolMatchmakingV1Search",
		Method:             "POST",
		PathPattern:        "/lol-matchmaking/v1/search",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolMatchmakingV1SearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolMatchmakingV1SearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolMatchmakingV1Search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolMissionsV1Force post lol missions v1 force API
*/
func (a *Client) PostLolMissionsV1Force(params *PostLolMissionsV1ForceParams) (*PostLolMissionsV1ForceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolMissionsV1ForceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolMissionsV1Force",
		Method:             "POST",
		PathPattern:        "/lol-missions/v1/force",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolMissionsV1ForceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolMissionsV1ForceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolMissionsV1Force: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolNpeRewardsV1ChallengesOpt post lol npe rewards v1 challenges opt API
*/
func (a *Client) PostLolNpeRewardsV1ChallengesOpt(params *PostLolNpeRewardsV1ChallengesOptParams) (*PostLolNpeRewardsV1ChallengesOptNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolNpeRewardsV1ChallengesOptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolNpeRewardsV1ChallengesOpt",
		Method:             "POST",
		PathPattern:        "/lol-npe-rewards/v1/challenges/opt",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolNpeRewardsV1ChallengesOptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolNpeRewardsV1ChallengesOptNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolNpeRewardsV1ChallengesOpt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPatchV1ProductsLeagueOfLegendsDetectCorruptionRequest post lol patch v1 products league of legends detect corruption request API
*/
func (a *Client) PostLolPatchV1ProductsLeagueOfLegendsDetectCorruptionRequest(params *PostLolPatchV1ProductsLeagueOfLegendsDetectCorruptionRequestParams) (*PostLolPatchV1ProductsLeagueOfLegendsDetectCorruptionRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPatchV1ProductsLeagueOfLegendsDetectCorruptionRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPatchV1ProductsLeagueOfLegendsDetectCorruptionRequest",
		Method:             "POST",
		PathPattern:        "/lol-patch/v1/products/league_of_legends/detect-corruption-request",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPatchV1ProductsLeagueOfLegendsDetectCorruptionRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPatchV1ProductsLeagueOfLegendsDetectCorruptionRequestNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPatchV1ProductsLeagueOfLegendsDetectCorruptionRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPatchV1ProductsLeagueOfLegendsPartialRepairRequest post lol patch v1 products league of legends partial repair request API
*/
func (a *Client) PostLolPatchV1ProductsLeagueOfLegendsPartialRepairRequest(params *PostLolPatchV1ProductsLeagueOfLegendsPartialRepairRequestParams) (*PostLolPatchV1ProductsLeagueOfLegendsPartialRepairRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPatchV1ProductsLeagueOfLegendsPartialRepairRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPatchV1ProductsLeagueOfLegendsPartialRepairRequest",
		Method:             "POST",
		PathPattern:        "/lol-patch/v1/products/league_of_legends/partial-repair-request",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPatchV1ProductsLeagueOfLegendsPartialRepairRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPatchV1ProductsLeagueOfLegendsPartialRepairRequestNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPatchV1ProductsLeagueOfLegendsPartialRepairRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPatchV1ProductsLeagueOfLegendsStartCheckingRequest post lol patch v1 products league of legends start checking request API
*/
func (a *Client) PostLolPatchV1ProductsLeagueOfLegendsStartCheckingRequest(params *PostLolPatchV1ProductsLeagueOfLegendsStartCheckingRequestParams) (*PostLolPatchV1ProductsLeagueOfLegendsStartCheckingRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPatchV1ProductsLeagueOfLegendsStartCheckingRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPatchV1ProductsLeagueOfLegendsStartCheckingRequest",
		Method:             "POST",
		PathPattern:        "/lol-patch/v1/products/league_of_legends/start-checking-request",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPatchV1ProductsLeagueOfLegendsStartCheckingRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPatchV1ProductsLeagueOfLegendsStartCheckingRequestNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPatchV1ProductsLeagueOfLegendsStartCheckingRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPatchV1ProductsLeagueOfLegendsStartPatchingRequest post lol patch v1 products league of legends start patching request API
*/
func (a *Client) PostLolPatchV1ProductsLeagueOfLegendsStartPatchingRequest(params *PostLolPatchV1ProductsLeagueOfLegendsStartPatchingRequestParams) (*PostLolPatchV1ProductsLeagueOfLegendsStartPatchingRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPatchV1ProductsLeagueOfLegendsStartPatchingRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPatchV1ProductsLeagueOfLegendsStartPatchingRequest",
		Method:             "POST",
		PathPattern:        "/lol-patch/v1/products/league_of_legends/start-patching-request",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPatchV1ProductsLeagueOfLegendsStartPatchingRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPatchV1ProductsLeagueOfLegendsStartPatchingRequestNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPatchV1ProductsLeagueOfLegendsStartPatchingRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPatchV1ProductsLeagueOfLegendsStopCheckingRequest post lol patch v1 products league of legends stop checking request API
*/
func (a *Client) PostLolPatchV1ProductsLeagueOfLegendsStopCheckingRequest(params *PostLolPatchV1ProductsLeagueOfLegendsStopCheckingRequestParams) (*PostLolPatchV1ProductsLeagueOfLegendsStopCheckingRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPatchV1ProductsLeagueOfLegendsStopCheckingRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPatchV1ProductsLeagueOfLegendsStopCheckingRequest",
		Method:             "POST",
		PathPattern:        "/lol-patch/v1/products/league_of_legends/stop-checking-request",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPatchV1ProductsLeagueOfLegendsStopCheckingRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPatchV1ProductsLeagueOfLegendsStopCheckingRequestNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPatchV1ProductsLeagueOfLegendsStopCheckingRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPatchV1ProductsLeagueOfLegendsStopPatchingRequest post lol patch v1 products league of legends stop patching request API
*/
func (a *Client) PostLolPatchV1ProductsLeagueOfLegendsStopPatchingRequest(params *PostLolPatchV1ProductsLeagueOfLegendsStopPatchingRequestParams) (*PostLolPatchV1ProductsLeagueOfLegendsStopPatchingRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPatchV1ProductsLeagueOfLegendsStopPatchingRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPatchV1ProductsLeagueOfLegendsStopPatchingRequest",
		Method:             "POST",
		PathPattern:        "/lol-patch/v1/products/league_of_legends/stop-patching-request",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPatchV1ProductsLeagueOfLegendsStopPatchingRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPatchV1ProductsLeagueOfLegendsStopPatchingRequestNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPatchV1ProductsLeagueOfLegendsStopPatchingRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPerksV1Pages post lol perks v1 pages API
*/
func (a *Client) PostLolPerksV1Pages(params *PostLolPerksV1PagesParams) (*PostLolPerksV1PagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPerksV1PagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPerksV1Pages",
		Method:             "POST",
		PathPattern:        "/lol-perks/v1/pages",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPerksV1PagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPerksV1PagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPerksV1Pages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPerksV1ShowAutoModifiedPagesNotification post lol perks v1 show auto modified pages notification API
*/
func (a *Client) PostLolPerksV1ShowAutoModifiedPagesNotification(params *PostLolPerksV1ShowAutoModifiedPagesNotificationParams) (*PostLolPerksV1ShowAutoModifiedPagesNotificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPerksV1ShowAutoModifiedPagesNotificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPerksV1ShowAutoModifiedPagesNotification",
		Method:             "POST",
		PathPattern:        "/lol-perks/v1/show-auto-modified-pages-notification",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPerksV1ShowAutoModifiedPagesNotificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPerksV1ShowAutoModifiedPagesNotificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPerksV1ShowAutoModifiedPagesNotification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPerksV1UpdatePageOrder post lol perks v1 update page order API
*/
func (a *Client) PostLolPerksV1UpdatePageOrder(params *PostLolPerksV1UpdatePageOrderParams) (*PostLolPerksV1UpdatePageOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPerksV1UpdatePageOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPerksV1UpdatePageOrder",
		Method:             "POST",
		PathPattern:        "/lol-perks/v1/update-page-order",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPerksV1UpdatePageOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPerksV1UpdatePageOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPerksV1UpdatePageOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPersonalizedOffersV1OffersByIDPurchase post lol personalized offers v1 offers by Id purchase API
*/
func (a *Client) PostLolPersonalizedOffersV1OffersByIDPurchase(params *PostLolPersonalizedOffersV1OffersByIDPurchaseParams) (*PostLolPersonalizedOffersV1OffersByIDPurchaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPersonalizedOffersV1OffersByIDPurchaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPersonalizedOffersV1OffersByIdPurchase",
		Method:             "POST",
		PathPattern:        "/lol-personalized-offers/v1/offers/{id}/purchase",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPersonalizedOffersV1OffersByIDPurchaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPersonalizedOffersV1OffersByIDPurchaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPersonalizedOffersV1OffersByIdPurchase: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPersonalizedOffersV1OffersByIDReveal post lol personalized offers v1 offers by Id reveal API
*/
func (a *Client) PostLolPersonalizedOffersV1OffersByIDReveal(params *PostLolPersonalizedOffersV1OffersByIDRevealParams) (*PostLolPersonalizedOffersV1OffersByIDRevealOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPersonalizedOffersV1OffersByIDRevealParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPersonalizedOffersV1OffersByIdReveal",
		Method:             "POST",
		PathPattern:        "/lol-personalized-offers/v1/offers/{id}/reveal",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPersonalizedOffersV1OffersByIDRevealReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPersonalizedOffersV1OffersByIDRevealOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPersonalizedOffersV1OffersByIdReveal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPersonalizedOffersV1OffersPurchase post lol personalized offers v1 offers purchase API
*/
func (a *Client) PostLolPersonalizedOffersV1OffersPurchase(params *PostLolPersonalizedOffersV1OffersPurchaseParams) (*PostLolPersonalizedOffersV1OffersPurchaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPersonalizedOffersV1OffersPurchaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPersonalizedOffersV1OffersPurchase",
		Method:             "POST",
		PathPattern:        "/lol-personalized-offers/v1/offers/purchase",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPersonalizedOffersV1OffersPurchaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPersonalizedOffersV1OffersPurchaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPersonalizedOffersV1OffersPurchase: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPersonalizedOffersV1OffersReveal post lol personalized offers v1 offers reveal API
*/
func (a *Client) PostLolPersonalizedOffersV1OffersReveal(params *PostLolPersonalizedOffersV1OffersRevealParams) (*PostLolPersonalizedOffersV1OffersRevealOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPersonalizedOffersV1OffersRevealParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPersonalizedOffersV1OffersReveal",
		Method:             "POST",
		PathPattern:        "/lol-personalized-offers/v1/offers/reveal",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPersonalizedOffersV1OffersRevealReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPersonalizedOffersV1OffersRevealOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPersonalizedOffersV1OffersReveal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPftV2Events post lol pft v2 events API
*/
func (a *Client) PostLolPftV2Events(params *PostLolPftV2EventsParams) (*PostLolPftV2EventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPftV2EventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPftV2Events",
		Method:             "POST",
		PathPattern:        "/lol-pft/v2/events",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPftV2EventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPftV2EventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPftV2Events: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPftV2Survey post lol pft v2 survey API
*/
func (a *Client) PostLolPftV2Survey(params *PostLolPftV2SurveyParams) (*PostLolPftV2SurveyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPftV2SurveyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPftV2Survey",
		Method:             "POST",
		PathPattern:        "/lol-pft/v2/survey",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPftV2SurveyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPftV2SurveyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPftV2Survey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPlayerLevelUpV1LevelUpNotificationsByPluginName post lol player level up v1 level up notifications by plugin name API
*/
func (a *Client) PostLolPlayerLevelUpV1LevelUpNotificationsByPluginName(params *PostLolPlayerLevelUpV1LevelUpNotificationsByPluginNameParams) (*PostLolPlayerLevelUpV1LevelUpNotificationsByPluginNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPlayerLevelUpV1LevelUpNotificationsByPluginNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPlayerLevelUpV1LevelUpNotificationsByPluginName",
		Method:             "POST",
		PathPattern:        "/lol-player-level-up/v1/level-up-notifications/{pluginName}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPlayerLevelUpV1LevelUpNotificationsByPluginNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPlayerLevelUpV1LevelUpNotificationsByPluginNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPlayerLevelUpV1LevelUpNotificationsByPluginName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPlayerPreferencesV1Hash post lol player preferences v1 hash API
*/
func (a *Client) PostLolPlayerPreferencesV1Hash(params *PostLolPlayerPreferencesV1HashParams) (*PostLolPlayerPreferencesV1HashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPlayerPreferencesV1HashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPlayerPreferencesV1Hash",
		Method:             "POST",
		PathPattern:        "/lol-player-preferences/v1/hash",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPlayerPreferencesV1HashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPlayerPreferencesV1HashOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPlayerPreferencesV1Hash: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPlayerPreferencesV1PlayerPreferencesEndpointOverride post lol player preferences v1 player preferences endpoint override API
*/
func (a *Client) PostLolPlayerPreferencesV1PlayerPreferencesEndpointOverride(params *PostLolPlayerPreferencesV1PlayerPreferencesEndpointOverrideParams) (*PostLolPlayerPreferencesV1PlayerPreferencesEndpointOverrideOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPlayerPreferencesV1PlayerPreferencesEndpointOverrideParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPlayerPreferencesV1PlayerPreferencesEndpointOverride",
		Method:             "POST",
		PathPattern:        "/lol-player-preferences/v1/player-preferences-endpoint-override",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPlayerPreferencesV1PlayerPreferencesEndpointOverrideReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPlayerPreferencesV1PlayerPreferencesEndpointOverrideOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPlayerPreferencesV1PlayerPreferencesEndpointOverride: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPreEndOfGameV1CompleteBySequenceEventName post lol pre end of game v1 complete by sequence event name API
*/
func (a *Client) PostLolPreEndOfGameV1CompleteBySequenceEventName(params *PostLolPreEndOfGameV1CompleteBySequenceEventNameParams) (*PostLolPreEndOfGameV1CompleteBySequenceEventNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPreEndOfGameV1CompleteBySequenceEventNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPreEndOfGameV1CompleteBySequenceEventName",
		Method:             "POST",
		PathPattern:        "/lol-pre-end-of-game/v1/complete/{sequenceEventName}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPreEndOfGameV1CompleteBySequenceEventNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPreEndOfGameV1CompleteBySequenceEventNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPreEndOfGameV1CompleteBySequenceEventName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPreEndOfGameV1RegistrationBySequenceEventNameByPriority post lol pre end of game v1 registration by sequence event name by priority API
*/
func (a *Client) PostLolPreEndOfGameV1RegistrationBySequenceEventNameByPriority(params *PostLolPreEndOfGameV1RegistrationBySequenceEventNameByPriorityParams) (*PostLolPreEndOfGameV1RegistrationBySequenceEventNameByPriorityNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPreEndOfGameV1RegistrationBySequenceEventNameByPriorityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPreEndOfGameV1RegistrationBySequenceEventNameByPriority",
		Method:             "POST",
		PathPattern:        "/lol-pre-end-of-game/v1/registration/{sequenceEventName}/{priority}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPreEndOfGameV1RegistrationBySequenceEventNameByPriorityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPreEndOfGameV1RegistrationBySequenceEventNameByPriorityNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPreEndOfGameV1RegistrationBySequenceEventNameByPriority: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPremadeVoiceV1FirstExperienceGame post lol premade voice v1 first experience game API
*/
func (a *Client) PostLolPremadeVoiceV1FirstExperienceGame(params *PostLolPremadeVoiceV1FirstExperienceGameParams) (*PostLolPremadeVoiceV1FirstExperienceGameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPremadeVoiceV1FirstExperienceGameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPremadeVoiceV1FirstExperienceGame",
		Method:             "POST",
		PathPattern:        "/lol-premade-voice/v1/first-experience/game",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPremadeVoiceV1FirstExperienceGameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPremadeVoiceV1FirstExperienceGameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPremadeVoiceV1FirstExperienceGame: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPremadeVoiceV1FirstExperienceLcu post lol premade voice v1 first experience lcu API
*/
func (a *Client) PostLolPremadeVoiceV1FirstExperienceLcu(params *PostLolPremadeVoiceV1FirstExperienceLcuParams) (*PostLolPremadeVoiceV1FirstExperienceLcuNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPremadeVoiceV1FirstExperienceLcuParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPremadeVoiceV1FirstExperienceLcu",
		Method:             "POST",
		PathPattern:        "/lol-premade-voice/v1/first-experience/lcu",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPremadeVoiceV1FirstExperienceLcuReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPremadeVoiceV1FirstExperienceLcuNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPremadeVoiceV1FirstExperienceLcu: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPremadeVoiceV1FirstExperienceReset post lol premade voice v1 first experience reset API
*/
func (a *Client) PostLolPremadeVoiceV1FirstExperienceReset(params *PostLolPremadeVoiceV1FirstExperienceResetParams) (*PostLolPremadeVoiceV1FirstExperienceResetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPremadeVoiceV1FirstExperienceResetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPremadeVoiceV1FirstExperienceReset",
		Method:             "POST",
		PathPattern:        "/lol-premade-voice/v1/first-experience/reset",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPremadeVoiceV1FirstExperienceResetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPremadeVoiceV1FirstExperienceResetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPremadeVoiceV1FirstExperienceReset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPremadeVoiceV1GameClientUpdatedPTTKey post lol premade voice v1 game client updated p t t key API
*/
func (a *Client) PostLolPremadeVoiceV1GameClientUpdatedPTTKey(params *PostLolPremadeVoiceV1GameClientUpdatedPTTKeyParams) (*PostLolPremadeVoiceV1GameClientUpdatedPTTKeyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPremadeVoiceV1GameClientUpdatedPTTKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPremadeVoiceV1GameClientUpdatedPTTKey",
		Method:             "POST",
		PathPattern:        "/lol-premade-voice/v1/gameClientUpdatedPTTKey",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPremadeVoiceV1GameClientUpdatedPTTKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPremadeVoiceV1GameClientUpdatedPTTKeyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPremadeVoiceV1GameClientUpdatedPTTKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPremadeVoiceV1MicTest post lol premade voice v1 mic test API
*/
func (a *Client) PostLolPremadeVoiceV1MicTest(params *PostLolPremadeVoiceV1MicTestParams) (*PostLolPremadeVoiceV1MicTestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPremadeVoiceV1MicTestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPremadeVoiceV1MicTest",
		Method:             "POST",
		PathPattern:        "/lol-premade-voice/v1/mic-test",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPremadeVoiceV1MicTestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPremadeVoiceV1MicTestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPremadeVoiceV1MicTest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPremadeVoiceV1PushToTalkCheckAvailable post lol premade voice v1 push to talk check available API
*/
func (a *Client) PostLolPremadeVoiceV1PushToTalkCheckAvailable(params *PostLolPremadeVoiceV1PushToTalkCheckAvailableParams) (*PostLolPremadeVoiceV1PushToTalkCheckAvailableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPremadeVoiceV1PushToTalkCheckAvailableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPremadeVoiceV1PushToTalkCheckAvailable",
		Method:             "POST",
		PathPattern:        "/lol-premade-voice/v1/push-to-talk/check-available",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPremadeVoiceV1PushToTalkCheckAvailableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPremadeVoiceV1PushToTalkCheckAvailableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPremadeVoiceV1PushToTalkCheckAvailable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPremadeVoiceV1Session post lol premade voice v1 session API
*/
func (a *Client) PostLolPremadeVoiceV1Session(params *PostLolPremadeVoiceV1SessionParams) (*PostLolPremadeVoiceV1SessionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPremadeVoiceV1SessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPremadeVoiceV1Session",
		Method:             "POST",
		PathPattern:        "/lol-premade-voice/v1/session",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPremadeVoiceV1SessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPremadeVoiceV1SessionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPremadeVoiceV1Session: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPremadeVoiceV1SettingsReset post lol premade voice v1 settings reset API
*/
func (a *Client) PostLolPremadeVoiceV1SettingsReset(params *PostLolPremadeVoiceV1SettingsResetParams) (*PostLolPremadeVoiceV1SettingsResetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPremadeVoiceV1SettingsResetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPremadeVoiceV1SettingsReset",
		Method:             "POST",
		PathPattern:        "/lol-premade-voice/v1/settings/reset",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPremadeVoiceV1SettingsResetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPremadeVoiceV1SettingsResetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPremadeVoiceV1SettingsReset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPurchaseWidgetV1PurchasableItemsByInventoryType post lol purchase widget v1 purchasable items by inventory type API
*/
func (a *Client) PostLolPurchaseWidgetV1PurchasableItemsByInventoryType(params *PostLolPurchaseWidgetV1PurchasableItemsByInventoryTypeParams) (*PostLolPurchaseWidgetV1PurchasableItemsByInventoryTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPurchaseWidgetV1PurchasableItemsByInventoryTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPurchaseWidgetV1PurchasableItemsByInventoryType",
		Method:             "POST",
		PathPattern:        "/lol-purchase-widget/v1/purchasable-items/{inventoryType}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPurchaseWidgetV1PurchasableItemsByInventoryTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPurchaseWidgetV1PurchasableItemsByInventoryTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPurchaseWidgetV1PurchasableItemsByInventoryType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPurchaseWidgetV1PurchaseItems post lol purchase widget v1 purchase items API
*/
func (a *Client) PostLolPurchaseWidgetV1PurchaseItems(params *PostLolPurchaseWidgetV1PurchaseItemsParams) (*PostLolPurchaseWidgetV1PurchaseItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPurchaseWidgetV1PurchaseItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPurchaseWidgetV1PurchaseItems",
		Method:             "POST",
		PathPattern:        "/lol-purchase-widget/v1/purchaseItems",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPurchaseWidgetV1PurchaseItemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPurchaseWidgetV1PurchaseItemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPurchaseWidgetV1PurchaseItems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPurchaseWidgetV1ValidateItems post lol purchase widget v1 validate items API
*/
func (a *Client) PostLolPurchaseWidgetV1ValidateItems(params *PostLolPurchaseWidgetV1ValidateItemsParams) (*PostLolPurchaseWidgetV1ValidateItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPurchaseWidgetV1ValidateItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPurchaseWidgetV1ValidateItems",
		Method:             "POST",
		PathPattern:        "/lol-purchase-widget/v1/validateItems",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPurchaseWidgetV1ValidateItemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPurchaseWidgetV1ValidateItemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPurchaseWidgetV1ValidateItems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolPurchaseWidgetV2PurchaseItems post lol purchase widget v2 purchase items API
*/
func (a *Client) PostLolPurchaseWidgetV2PurchaseItems(params *PostLolPurchaseWidgetV2PurchaseItemsParams) (*PostLolPurchaseWidgetV2PurchaseItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolPurchaseWidgetV2PurchaseItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolPurchaseWidgetV2PurchaseItems",
		Method:             "POST",
		PathPattern:        "/lol-purchase-widget/v2/purchaseItems",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolPurchaseWidgetV2PurchaseItemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolPurchaseWidgetV2PurchaseItemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolPurchaseWidgetV2PurchaseItems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolQueueEligibilityV1Eligibility post lol queue eligibility v1 eligibility API
*/
func (a *Client) PostLolQueueEligibilityV1Eligibility(params *PostLolQueueEligibilityV1EligibilityParams) (*PostLolQueueEligibilityV1EligibilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolQueueEligibilityV1EligibilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolQueueEligibilityV1Eligibility",
		Method:             "POST",
		PathPattern:        "/lol-queue-eligibility/v1/eligibility",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolQueueEligibilityV1EligibilityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolQueueEligibilityV1EligibilityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolQueueEligibilityV1Eligibility: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolQueueEligibilityV2Eligibility post lol queue eligibility v2 eligibility API
*/
func (a *Client) PostLolQueueEligibilityV2Eligibility(params *PostLolQueueEligibilityV2EligibilityParams) (*PostLolQueueEligibilityV2EligibilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolQueueEligibilityV2EligibilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolQueueEligibilityV2Eligibility",
		Method:             "POST",
		PathPattern:        "/lol-queue-eligibility/v2/eligibility",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolQueueEligibilityV2EligibilityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolQueueEligibilityV2EligibilityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolQueueEligibilityV2Eligibility: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolRankedV1EosNotificationsByIDAcknowledge post lol ranked v1 eos notifications by Id acknowledge API
*/
func (a *Client) PostLolRankedV1EosNotificationsByIDAcknowledge(params *PostLolRankedV1EosNotificationsByIDAcknowledgeParams) (*PostLolRankedV1EosNotificationsByIDAcknowledgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolRankedV1EosNotificationsByIDAcknowledgeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolRankedV1EosNotificationsByIdAcknowledge",
		Method:             "POST",
		PathPattern:        "/lol-ranked/v1/eos-notifications/{id}/acknowledge",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolRankedV1EosNotificationsByIDAcknowledgeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolRankedV1EosNotificationsByIDAcknowledgeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolRankedV1EosNotificationsByIdAcknowledge: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolRankedV1NotificationsByIDAcknowledge post lol ranked v1 notifications by Id acknowledge API
*/
func (a *Client) PostLolRankedV1NotificationsByIDAcknowledge(params *PostLolRankedV1NotificationsByIDAcknowledgeParams) (*PostLolRankedV1NotificationsByIDAcknowledgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolRankedV1NotificationsByIDAcknowledgeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolRankedV1NotificationsByIdAcknowledge",
		Method:             "POST",
		PathPattern:        "/lol-ranked/v1/notifications/{id}/acknowledge",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolRankedV1NotificationsByIDAcknowledgeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolRankedV1NotificationsByIDAcknowledgeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolRankedV1NotificationsByIdAcknowledge: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolReplaysV1MetadataByGameIDCreateGameVersionByGameVersionGameTypeByGameTypeQueueIDByQueueID post lol replays v1 metadata by game Id create game version by game version game type by game type queue Id by queue Id API
*/
func (a *Client) PostLolReplaysV1MetadataByGameIDCreateGameVersionByGameVersionGameTypeByGameTypeQueueIDByQueueID(params *PostLolReplaysV1MetadataByGameIDCreateGameVersionByGameVersionGameTypeByGameTypeQueueIDByQueueIDParams) (*PostLolReplaysV1MetadataByGameIDCreateGameVersionByGameVersionGameTypeByGameTypeQueueIDByQueueIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolReplaysV1MetadataByGameIDCreateGameVersionByGameVersionGameTypeByGameTypeQueueIDByQueueIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolReplaysV1MetadataByGameIdCreateGameVersionByGameVersionGameTypeByGameTypeQueueIdByQueueId",
		Method:             "POST",
		PathPattern:        "/lol-replays/v1/metadata/{gameId}/create/gameVersion/{gameVersion}/gameType/{gameType}/queueId/{queueId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolReplaysV1MetadataByGameIDCreateGameVersionByGameVersionGameTypeByGameTypeQueueIDByQueueIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolReplaysV1MetadataByGameIDCreateGameVersionByGameVersionGameTypeByGameTypeQueueIDByQueueIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolReplaysV1MetadataByGameIdCreateGameVersionByGameVersionGameTypeByGameTypeQueueIdByQueueId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolReplaysV1RoflsByGameIDDownload post lol replays v1 rofls by game Id download API
*/
func (a *Client) PostLolReplaysV1RoflsByGameIDDownload(params *PostLolReplaysV1RoflsByGameIDDownloadParams) (*PostLolReplaysV1RoflsByGameIDDownloadNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolReplaysV1RoflsByGameIDDownloadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolReplaysV1RoflsByGameIdDownload",
		Method:             "POST",
		PathPattern:        "/lol-replays/v1/rofls/{gameId}/download",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolReplaysV1RoflsByGameIDDownloadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolReplaysV1RoflsByGameIDDownloadNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolReplaysV1RoflsByGameIdDownload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolReplaysV1RoflsByGameIDDownloadGraceful post lol replays v1 rofls by game Id download graceful API
*/
func (a *Client) PostLolReplaysV1RoflsByGameIDDownloadGraceful(params *PostLolReplaysV1RoflsByGameIDDownloadGracefulParams) (*PostLolReplaysV1RoflsByGameIDDownloadGracefulNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolReplaysV1RoflsByGameIDDownloadGracefulParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolReplaysV1RoflsByGameIdDownloadGraceful",
		Method:             "POST",
		PathPattern:        "/lol-replays/v1/rofls/{gameId}/download/graceful",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolReplaysV1RoflsByGameIDDownloadGracefulReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolReplaysV1RoflsByGameIDDownloadGracefulNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolReplaysV1RoflsByGameIdDownloadGraceful: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolReplaysV1RoflsByGameIDWatch post lol replays v1 rofls by game Id watch API
*/
func (a *Client) PostLolReplaysV1RoflsByGameIDWatch(params *PostLolReplaysV1RoflsByGameIDWatchParams) (*PostLolReplaysV1RoflsByGameIDWatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolReplaysV1RoflsByGameIDWatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolReplaysV1RoflsByGameIdWatch",
		Method:             "POST",
		PathPattern:        "/lol-replays/v1/rofls/{gameId}/watch",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolReplaysV1RoflsByGameIDWatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolReplaysV1RoflsByGameIDWatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolReplaysV1RoflsByGameIdWatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolReplaysV1RoflsScan post lol replays v1 rofls scan API
*/
func (a *Client) PostLolReplaysV1RoflsScan(params *PostLolReplaysV1RoflsScanParams) (*PostLolReplaysV1RoflsScanNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolReplaysV1RoflsScanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolReplaysV1RoflsScan",
		Method:             "POST",
		PathPattern:        "/lol-replays/v1/rofls/scan",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolReplaysV1RoflsScanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolReplaysV1RoflsScanNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolReplaysV1RoflsScan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolReplaysV2MetadataByGameIDCreate post lol replays v2 metadata by game Id create API
*/
func (a *Client) PostLolReplaysV2MetadataByGameIDCreate(params *PostLolReplaysV2MetadataByGameIDCreateParams) (*PostLolReplaysV2MetadataByGameIDCreateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolReplaysV2MetadataByGameIDCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolReplaysV2MetadataByGameIdCreate",
		Method:             "POST",
		PathPattern:        "/lol-replays/v2/metadata/{gameId}/create",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolReplaysV2MetadataByGameIDCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolReplaysV2MetadataByGameIDCreateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolReplaysV2MetadataByGameIdCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolRevivalsV1SeriesOpt post lol revivals v1 series opt API
*/
func (a *Client) PostLolRevivalsV1SeriesOpt(params *PostLolRevivalsV1SeriesOptParams) (*PostLolRevivalsV1SeriesOptNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolRevivalsV1SeriesOptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolRevivalsV1SeriesOpt",
		Method:             "POST",
		PathPattern:        "/lol-revivals/v1/series/opt",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolRevivalsV1SeriesOptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolRevivalsV1SeriesOptNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolRevivalsV1SeriesOpt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolRevivalsV1WelcomeBackModalSeen post lol revivals v1 welcome back modal seen API
*/
func (a *Client) PostLolRevivalsV1WelcomeBackModalSeen(params *PostLolRevivalsV1WelcomeBackModalSeenParams) (*PostLolRevivalsV1WelcomeBackModalSeenNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolRevivalsV1WelcomeBackModalSeenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolRevivalsV1WelcomeBackModalSeen",
		Method:             "POST",
		PathPattern:        "/lol-revivals/v1/welcome-back-modal/seen",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolRevivalsV1WelcomeBackModalSeenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolRevivalsV1WelcomeBackModalSeenNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolRevivalsV1WelcomeBackModalSeen: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolRsoAuthV1AuthorizationGas post lol rso auth v1 authorization gas API
*/
func (a *Client) PostLolRsoAuthV1AuthorizationGas(params *PostLolRsoAuthV1AuthorizationGasParams) (*PostLolRsoAuthV1AuthorizationGasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolRsoAuthV1AuthorizationGasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolRsoAuthV1AuthorizationGas",
		Method:             "POST",
		PathPattern:        "/lol-rso-auth/v1/authorization/gas",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolRsoAuthV1AuthorizationGasReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolRsoAuthV1AuthorizationGasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolRsoAuthV1AuthorizationGas: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolRsoAuthV1AuthorizationRefresh post lol rso auth v1 authorization refresh API
*/
func (a *Client) PostLolRsoAuthV1AuthorizationRefresh(params *PostLolRsoAuthV1AuthorizationRefreshParams) (*PostLolRsoAuthV1AuthorizationRefreshOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolRsoAuthV1AuthorizationRefreshParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolRsoAuthV1AuthorizationRefresh",
		Method:             "POST",
		PathPattern:        "/lol-rso-auth/v1/authorization/refresh",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolRsoAuthV1AuthorizationRefreshReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolRsoAuthV1AuthorizationRefreshOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolRsoAuthV1AuthorizationRefresh: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolRsoAuthV1AuthorizationUserinfo post lol rso auth v1 authorization userinfo API
*/
func (a *Client) PostLolRsoAuthV1AuthorizationUserinfo(params *PostLolRsoAuthV1AuthorizationUserinfoParams) (*PostLolRsoAuthV1AuthorizationUserinfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolRsoAuthV1AuthorizationUserinfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolRsoAuthV1AuthorizationUserinfo",
		Method:             "POST",
		PathPattern:        "/lol-rso-auth/v1/authorization/userinfo",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolRsoAuthV1AuthorizationUserinfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolRsoAuthV1AuthorizationUserinfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolRsoAuthV1AuthorizationUserinfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolRsoAuthV1DeviceID post lol rso auth v1 device Id API
*/
func (a *Client) PostLolRsoAuthV1DeviceID(params *PostLolRsoAuthV1DeviceIDParams) (*PostLolRsoAuthV1DeviceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolRsoAuthV1DeviceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolRsoAuthV1DeviceId",
		Method:             "POST",
		PathPattern:        "/lol-rso-auth/v1/device-id",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolRsoAuthV1DeviceIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolRsoAuthV1DeviceIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolRsoAuthV1DeviceId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolRsoAuthV2Config post lol rso auth v2 config API
*/
func (a *Client) PostLolRsoAuthV2Config(params *PostLolRsoAuthV2ConfigParams) (*PostLolRsoAuthV2ConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolRsoAuthV2ConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolRsoAuthV2Config",
		Method:             "POST",
		PathPattern:        "/lol-rso-auth/v2/config",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolRsoAuthV2ConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolRsoAuthV2ConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolRsoAuthV2Config: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolSettingsV1AccountSave post lol settings v1 account save API
*/
func (a *Client) PostLolSettingsV1AccountSave(params *PostLolSettingsV1AccountSaveParams) (*PostLolSettingsV1AccountSaveNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolSettingsV1AccountSaveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolSettingsV1AccountSave",
		Method:             "POST",
		PathPattern:        "/lol-settings/v1/account/save",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolSettingsV1AccountSaveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolSettingsV1AccountSaveNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolSettingsV1AccountSave: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolSimpleDialogMessagesV1Messages post lol simple dialog messages v1 messages API
*/
func (a *Client) PostLolSimpleDialogMessagesV1Messages(params *PostLolSimpleDialogMessagesV1MessagesParams) (*PostLolSimpleDialogMessagesV1MessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolSimpleDialogMessagesV1MessagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolSimpleDialogMessagesV1Messages",
		Method:             "POST",
		PathPattern:        "/lol-simple-dialog-messages/v1/messages",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolSimpleDialogMessagesV1MessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolSimpleDialogMessagesV1MessagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolSimpleDialogMessagesV1Messages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolSpectatorV1BuddySpectate post lol spectator v1 buddy spectate API
*/
func (a *Client) PostLolSpectatorV1BuddySpectate(params *PostLolSpectatorV1BuddySpectateParams) (*PostLolSpectatorV1BuddySpectateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolSpectatorV1BuddySpectateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolSpectatorV1BuddySpectate",
		Method:             "POST",
		PathPattern:        "/lol-spectator/v1/buddy/spectate",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolSpectatorV1BuddySpectateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolSpectatorV1BuddySpectateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolSpectatorV1BuddySpectate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolSpectatorV1SpectateLaunch post lol spectator v1 spectate launch API
*/
func (a *Client) PostLolSpectatorV1SpectateLaunch(params *PostLolSpectatorV1SpectateLaunchParams) (*PostLolSpectatorV1SpectateLaunchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolSpectatorV1SpectateLaunchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolSpectatorV1SpectateLaunch",
		Method:             "POST",
		PathPattern:        "/lol-spectator/v1/spectate/launch",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolSpectatorV1SpectateLaunchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolSpectatorV1SpectateLaunchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolSpectatorV1SpectateLaunch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolStatstonesV1FeaturedChampionStatstonesByChampionItemIDByStatstoneID post lol statstones v1 featured champion statstones by champion item Id by statstone Id API
*/
func (a *Client) PostLolStatstonesV1FeaturedChampionStatstonesByChampionItemIDByStatstoneID(params *PostLolStatstonesV1FeaturedChampionStatstonesByChampionItemIDByStatstoneIDParams) (*PostLolStatstonesV1FeaturedChampionStatstonesByChampionItemIDByStatstoneIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolStatstonesV1FeaturedChampionStatstonesByChampionItemIDByStatstoneIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolStatstonesV1FeaturedChampionStatstonesByChampionItemIdByStatstoneId",
		Method:             "POST",
		PathPattern:        "/lol-statstones/v1/featured-champion-statstones/{championItemId}/{statstoneId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolStatstonesV1FeaturedChampionStatstonesByChampionItemIDByStatstoneIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolStatstonesV1FeaturedChampionStatstonesByChampionItemIDByStatstoneIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolStatstonesV1FeaturedChampionStatstonesByChampionItemIdByStatstoneId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolStoreV1LastPage post lol store v1 last page API
*/
func (a *Client) PostLolStoreV1LastPage(params *PostLolStoreV1LastPageParams) (*PostLolStoreV1LastPageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolStoreV1LastPageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolStoreV1LastPage",
		Method:             "POST",
		PathPattern:        "/lol-store/v1/lastPage",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolStoreV1LastPageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolStoreV1LastPageNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolStoreV1LastPage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolStoreV1NotificationsAcknowledge post lol store v1 notifications acknowledge API
*/
func (a *Client) PostLolStoreV1NotificationsAcknowledge(params *PostLolStoreV1NotificationsAcknowledgeParams) (*PostLolStoreV1NotificationsAcknowledgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolStoreV1NotificationsAcknowledgeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolStoreV1NotificationsAcknowledge",
		Method:             "POST",
		PathPattern:        "/lol-store/v1/notifications/acknowledge",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolStoreV1NotificationsAcknowledgeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolStoreV1NotificationsAcknowledgeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolStoreV1NotificationsAcknowledge: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolStoreV1SkinsBySkinIDPurchase post lol store v1 skins by skin Id purchase API
*/
func (a *Client) PostLolStoreV1SkinsBySkinIDPurchase(params *PostLolStoreV1SkinsBySkinIDPurchaseParams) (*PostLolStoreV1SkinsBySkinIDPurchaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolStoreV1SkinsBySkinIDPurchaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolStoreV1SkinsBySkinIdPurchase",
		Method:             "POST",
		PathPattern:        "/lol-store/v1/skins/{skinId}/purchase",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolStoreV1SkinsBySkinIDPurchaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolStoreV1SkinsBySkinIDPurchaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolStoreV1SkinsBySkinIdPurchase: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolSuggestedPlayersV1ReportedPlayer post lol suggested players v1 reported player API
*/
func (a *Client) PostLolSuggestedPlayersV1ReportedPlayer(params *PostLolSuggestedPlayersV1ReportedPlayerParams) (*PostLolSuggestedPlayersV1ReportedPlayerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolSuggestedPlayersV1ReportedPlayerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolSuggestedPlayersV1ReportedPlayer",
		Method:             "POST",
		PathPattern:        "/lol-suggested-players/v1/reported-player",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolSuggestedPlayersV1ReportedPlayerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolSuggestedPlayersV1ReportedPlayerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolSuggestedPlayersV1ReportedPlayer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolSuggestedPlayersV1VictoriousComrade post lol suggested players v1 victorious comrade API
*/
func (a *Client) PostLolSuggestedPlayersV1VictoriousComrade(params *PostLolSuggestedPlayersV1VictoriousComradeParams) (*PostLolSuggestedPlayersV1VictoriousComradeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolSuggestedPlayersV1VictoriousComradeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolSuggestedPlayersV1VictoriousComrade",
		Method:             "POST",
		PathPattern:        "/lol-suggested-players/v1/victorious-comrade",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolSuggestedPlayersV1VictoriousComradeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolSuggestedPlayersV1VictoriousComradeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolSuggestedPlayersV1VictoriousComrade: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolSummonerV1CurrentSummonerName post lol summoner v1 current summoner name API
*/
func (a *Client) PostLolSummonerV1CurrentSummonerName(params *PostLolSummonerV1CurrentSummonerNameParams) (*PostLolSummonerV1CurrentSummonerNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolSummonerV1CurrentSummonerNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolSummonerV1CurrentSummonerName",
		Method:             "POST",
		PathPattern:        "/lol-summoner/v1/current-summoner/name",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolSummonerV1CurrentSummonerNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolSummonerV1CurrentSummonerNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolSummonerV1CurrentSummonerName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolSummonerV1CurrentSummonerSummonerProfile post lol summoner v1 current summoner summoner profile API
*/
func (a *Client) PostLolSummonerV1CurrentSummonerSummonerProfile(params *PostLolSummonerV1CurrentSummonerSummonerProfileParams) (*PostLolSummonerV1CurrentSummonerSummonerProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolSummonerV1CurrentSummonerSummonerProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolSummonerV1CurrentSummonerSummonerProfile",
		Method:             "POST",
		PathPattern:        "/lol-summoner/v1/current-summoner/summoner-profile",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolSummonerV1CurrentSummonerSummonerProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolSummonerV1CurrentSummonerSummonerProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolSummonerV1CurrentSummonerSummonerProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolSummonerV1Summoners post lol summoner v1 summoners API
*/
func (a *Client) PostLolSummonerV1Summoners(params *PostLolSummonerV1SummonersParams) (*PostLolSummonerV1SummonersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolSummonerV1SummonersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolSummonerV1Summoners",
		Method:             "POST",
		PathPattern:        "/lol-summoner/v1/summoners",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolSummonerV1SummonersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolSummonerV1SummonersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolSummonerV1Summoners: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolSummonerV2SummonersPuuid post lol summoner v2 summoners puuid API
*/
func (a *Client) PostLolSummonerV2SummonersPuuid(params *PostLolSummonerV2SummonersPuuidParams) (*PostLolSummonerV2SummonersPuuidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolSummonerV2SummonersPuuidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolSummonerV2SummonersPuuid",
		Method:             "POST",
		PathPattern:        "/lol-summoner/v2/summoners/puuid",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolSummonerV2SummonersPuuidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolSummonerV2SummonersPuuidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolSummonerV2SummonersPuuid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolTencentQtV1UIStatesByFeature post lol tencent qt v1 Ui states by feature API
*/
func (a *Client) PostLolTencentQtV1UIStatesByFeature(params *PostLolTencentQtV1UIStatesByFeatureParams) (*PostLolTencentQtV1UIStatesByFeatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolTencentQtV1UIStatesByFeatureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolTencentQtV1UiStatesByFeature",
		Method:             "POST",
		PathPattern:        "/lol-tencent-qt/v1/ui-states/{feature}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolTencentQtV1UIStatesByFeatureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolTencentQtV1UIStatesByFeatureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolTencentQtV1UiStatesByFeature: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLolTftV1TftSeriesOptIn post lol tft v1 tft series opt in API
*/
func (a *Client) PostLolTftV1TftSeriesOptIn(params *PostLolTftV1TftSeriesOptInParams) (*PostLolTftV1TftSeriesOptInNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLolTftV1TftSeriesOptInParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLolTftV1TftSeriesOptIn",
		Method:             "POST",
		PathPattern:        "/lol-tft/v1/tft/series/opt-in",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLolTftV1TftSeriesOptInReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLolTftV1TftSeriesOptInNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLolTftV1TftSeriesOptIn: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPatcherV1Notifications post patcher v1 notifications API
*/
func (a *Client) PostPatcherV1Notifications(params *PostPatcherV1NotificationsParams) (*PostPatcherV1NotificationsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPatcherV1NotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPatcherV1Notifications",
		Method:             "POST",
		PathPattern:        "/patcher/v1/notifications",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPatcherV1NotificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPatcherV1NotificationsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPatcherV1Notifications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPatcherV1ProductsByProductIDDetectCorruptionRequest post patcher v1 products by product Id detect corruption request API
*/
func (a *Client) PostPatcherV1ProductsByProductIDDetectCorruptionRequest(params *PostPatcherV1ProductsByProductIDDetectCorruptionRequestParams) (*PostPatcherV1ProductsByProductIDDetectCorruptionRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPatcherV1ProductsByProductIDDetectCorruptionRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPatcherV1ProductsByProductIdDetectCorruptionRequest",
		Method:             "POST",
		PathPattern:        "/patcher/v1/products/{product-id}/detect-corruption-request",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPatcherV1ProductsByProductIDDetectCorruptionRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPatcherV1ProductsByProductIDDetectCorruptionRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPatcherV1ProductsByProductIdDetectCorruptionRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPatcherV1ProductsByProductIDPartialRepairRequest post patcher v1 products by product Id partial repair request API
*/
func (a *Client) PostPatcherV1ProductsByProductIDPartialRepairRequest(params *PostPatcherV1ProductsByProductIDPartialRepairRequestParams) (*PostPatcherV1ProductsByProductIDPartialRepairRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPatcherV1ProductsByProductIDPartialRepairRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPatcherV1ProductsByProductIdPartialRepairRequest",
		Method:             "POST",
		PathPattern:        "/patcher/v1/products/{product-id}/partial-repair-request",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPatcherV1ProductsByProductIDPartialRepairRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPatcherV1ProductsByProductIDPartialRepairRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPatcherV1ProductsByProductIdPartialRepairRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPatcherV1ProductsByProductIDSignalStartPatchingDelayed post patcher v1 products by product Id signal start patching delayed API
*/
func (a *Client) PostPatcherV1ProductsByProductIDSignalStartPatchingDelayed(params *PostPatcherV1ProductsByProductIDSignalStartPatchingDelayedParams) (*PostPatcherV1ProductsByProductIDSignalStartPatchingDelayedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPatcherV1ProductsByProductIDSignalStartPatchingDelayedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPatcherV1ProductsByProductIdSignalStartPatchingDelayed",
		Method:             "POST",
		PathPattern:        "/patcher/v1/products/{product-id}/signal-start-patching-delayed",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPatcherV1ProductsByProductIDSignalStartPatchingDelayedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPatcherV1ProductsByProductIDSignalStartPatchingDelayedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPatcherV1ProductsByProductIdSignalStartPatchingDelayed: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPatcherV1ProductsByProductIDStartCheckingRequest post patcher v1 products by product Id start checking request API
*/
func (a *Client) PostPatcherV1ProductsByProductIDStartCheckingRequest(params *PostPatcherV1ProductsByProductIDStartCheckingRequestParams) (*PostPatcherV1ProductsByProductIDStartCheckingRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPatcherV1ProductsByProductIDStartCheckingRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPatcherV1ProductsByProductIdStartCheckingRequest",
		Method:             "POST",
		PathPattern:        "/patcher/v1/products/{product-id}/start-checking-request",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPatcherV1ProductsByProductIDStartCheckingRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPatcherV1ProductsByProductIDStartCheckingRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPatcherV1ProductsByProductIdStartCheckingRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPatcherV1ProductsByProductIDStartPatchingRequest post patcher v1 products by product Id start patching request API
*/
func (a *Client) PostPatcherV1ProductsByProductIDStartPatchingRequest(params *PostPatcherV1ProductsByProductIDStartPatchingRequestParams) (*PostPatcherV1ProductsByProductIDStartPatchingRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPatcherV1ProductsByProductIDStartPatchingRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPatcherV1ProductsByProductIdStartPatchingRequest",
		Method:             "POST",
		PathPattern:        "/patcher/v1/products/{product-id}/start-patching-request",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPatcherV1ProductsByProductIDStartPatchingRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPatcherV1ProductsByProductIDStartPatchingRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPatcherV1ProductsByProductIdStartPatchingRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPatcherV1ProductsByProductIDStopCheckingRequest post patcher v1 products by product Id stop checking request API
*/
func (a *Client) PostPatcherV1ProductsByProductIDStopCheckingRequest(params *PostPatcherV1ProductsByProductIDStopCheckingRequestParams) (*PostPatcherV1ProductsByProductIDStopCheckingRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPatcherV1ProductsByProductIDStopCheckingRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPatcherV1ProductsByProductIdStopCheckingRequest",
		Method:             "POST",
		PathPattern:        "/patcher/v1/products/{product-id}/stop-checking-request",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPatcherV1ProductsByProductIDStopCheckingRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPatcherV1ProductsByProductIDStopCheckingRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPatcherV1ProductsByProductIdStopCheckingRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPatcherV1ProductsByProductIDStopPatchingRequest post patcher v1 products by product Id stop patching request API
*/
func (a *Client) PostPatcherV1ProductsByProductIDStopPatchingRequest(params *PostPatcherV1ProductsByProductIDStopPatchingRequestParams) (*PostPatcherV1ProductsByProductIDStopPatchingRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPatcherV1ProductsByProductIDStopPatchingRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPatcherV1ProductsByProductIdStopPatchingRequest",
		Method:             "POST",
		PathPattern:        "/patcher/v1/products/{product-id}/stop-patching-request",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPatcherV1ProductsByProductIDStopPatchingRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPatcherV1ProductsByProductIDStopPatchingRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPatcherV1ProductsByProductIdStopPatchingRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPatcherV1ProductsLeagueOfLegendsFullRepairRequest post patcher v1 products league of legends full repair request API
*/
func (a *Client) PostPatcherV1ProductsLeagueOfLegendsFullRepairRequest(params *PostPatcherV1ProductsLeagueOfLegendsFullRepairRequestParams) (*PostPatcherV1ProductsLeagueOfLegendsFullRepairRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPatcherV1ProductsLeagueOfLegendsFullRepairRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPatcherV1ProductsLeagueOfLegendsFullRepairRequest",
		Method:             "POST",
		PathPattern:        "/patcher/v1/products/league_of_legends/full-repair-request",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPatcherV1ProductsLeagueOfLegendsFullRepairRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPatcherV1ProductsLeagueOfLegendsFullRepairRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPatcherV1ProductsLeagueOfLegendsFullRepairRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPaymentsV1PmcStartURL post payments v1 pmc start Url API
*/
func (a *Client) PostPaymentsV1PmcStartURL(params *PostPaymentsV1PmcStartURLParams) (*PostPaymentsV1PmcStartURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsV1PmcStartURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsV1PmcStartUrl",
		Method:             "POST",
		PathPattern:        "/payments/v1/pmc-start-url",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPaymentsV1PmcStartURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPaymentsV1PmcStartURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPaymentsV1PmcStartUrl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPlayerNotificationsV1Notifications post player notifications v1 notifications API
*/
func (a *Client) PostPlayerNotificationsV1Notifications(params *PostPlayerNotificationsV1NotificationsParams) (*PostPlayerNotificationsV1NotificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPlayerNotificationsV1NotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPlayerNotificationsV1Notifications",
		Method:             "POST",
		PathPattern:        "/player-notifications/v1/notifications",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPlayerNotificationsV1NotificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPlayerNotificationsV1NotificationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPlayerNotificationsV1Notifications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRecofrienderV1ContactsByAccountIDAvailable post recofriender v1 contacts by account Id available API
*/
func (a *Client) PostRecofrienderV1ContactsByAccountIDAvailable(params *PostRecofrienderV1ContactsByAccountIDAvailableParams) (*PostRecofrienderV1ContactsByAccountIDAvailableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRecofrienderV1ContactsByAccountIDAvailableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRecofrienderV1ContactsByAccountIdAvailable",
		Method:             "POST",
		PathPattern:        "/recofriender/v1/contacts/{accountId}/available",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRecofrienderV1ContactsByAccountIDAvailableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRecofrienderV1ContactsByAccountIDAvailableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRecofrienderV1ContactsByAccountIdAvailable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRecofrienderV1ContactsByAccountIDDismissed post recofriender v1 contacts by account Id dismissed API
*/
func (a *Client) PostRecofrienderV1ContactsByAccountIDDismissed(params *PostRecofrienderV1ContactsByAccountIDDismissedParams) (*PostRecofrienderV1ContactsByAccountIDDismissedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRecofrienderV1ContactsByAccountIDDismissedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRecofrienderV1ContactsByAccountIdDismissed",
		Method:             "POST",
		PathPattern:        "/recofriender/v1/contacts/{accountId}/dismissed",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRecofrienderV1ContactsByAccountIDDismissedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRecofrienderV1ContactsByAccountIDDismissedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRecofrienderV1ContactsByAccountIdDismissed: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRecofrienderV1ContactsByAccountIDInvited post recofriender v1 contacts by account Id invited API
*/
func (a *Client) PostRecofrienderV1ContactsByAccountIDInvited(params *PostRecofrienderV1ContactsByAccountIDInvitedParams) (*PostRecofrienderV1ContactsByAccountIDInvitedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRecofrienderV1ContactsByAccountIDInvitedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRecofrienderV1ContactsByAccountIdInvited",
		Method:             "POST",
		PathPattern:        "/recofriender/v1/contacts/{accountId}/invited",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRecofrienderV1ContactsByAccountIDInvitedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRecofrienderV1ContactsByAccountIDInvitedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRecofrienderV1ContactsByAccountIdInvited: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRecofrienderV1RegistrationsByNetwork post recofriender v1 registrations by network API
*/
func (a *Client) PostRecofrienderV1RegistrationsByNetwork(params *PostRecofrienderV1RegistrationsByNetworkParams) (*PostRecofrienderV1RegistrationsByNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRecofrienderV1RegistrationsByNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRecofrienderV1RegistrationsByNetwork",
		Method:             "POST",
		PathPattern:        "/recofriender/v1/registrations/{network}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRecofrienderV1RegistrationsByNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRecofrienderV1RegistrationsByNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRecofrienderV1RegistrationsByNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRiotMessagingServiceV1Connect post riot messaging service v1 connect API
*/
func (a *Client) PostRiotMessagingServiceV1Connect(params *PostRiotMessagingServiceV1ConnectParams) (*PostRiotMessagingServiceV1ConnectNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRiotMessagingServiceV1ConnectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRiotMessagingServiceV1Connect",
		Method:             "POST",
		PathPattern:        "/riot-messaging-service/v1/connect",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRiotMessagingServiceV1ConnectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRiotMessagingServiceV1ConnectNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRiotMessagingServiceV1Connect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRiotMessagingServiceV1Entitlements post riot messaging service v1 entitlements API
*/
func (a *Client) PostRiotMessagingServiceV1Entitlements(params *PostRiotMessagingServiceV1EntitlementsParams) (*PostRiotMessagingServiceV1EntitlementsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRiotMessagingServiceV1EntitlementsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRiotMessagingServiceV1Entitlements",
		Method:             "POST",
		PathPattern:        "/riot-messaging-service/v1/entitlements",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRiotMessagingServiceV1EntitlementsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRiotMessagingServiceV1EntitlementsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRiotMessagingServiceV1Entitlements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSanitizerV1ContainsSanitized post sanitizer v1 contains sanitized API
*/
func (a *Client) PostSanitizerV1ContainsSanitized(params *PostSanitizerV1ContainsSanitizedParams) (*PostSanitizerV1ContainsSanitizedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSanitizerV1ContainsSanitizedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSanitizerV1ContainsSanitized",
		Method:             "POST",
		PathPattern:        "/sanitizer/v1/containsSanitized",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSanitizerV1ContainsSanitizedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSanitizerV1ContainsSanitizedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSanitizerV1ContainsSanitized: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSanitizerV1Sanitize post sanitizer v1 sanitize API
*/
func (a *Client) PostSanitizerV1Sanitize(params *PostSanitizerV1SanitizeParams) (*PostSanitizerV1SanitizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSanitizerV1SanitizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSanitizerV1Sanitize",
		Method:             "POST",
		PathPattern:        "/sanitizer/v1/sanitize",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSanitizerV1SanitizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSanitizerV1SanitizeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSanitizerV1Sanitize: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostVoiceChatV1PushToTalkCheckAvailable post voice chat v1 push to talk check available API
*/
func (a *Client) PostVoiceChatV1PushToTalkCheckAvailable(params *PostVoiceChatV1PushToTalkCheckAvailableParams) (*PostVoiceChatV1PushToTalkCheckAvailableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVoiceChatV1PushToTalkCheckAvailableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVoiceChatV1PushToTalkCheckAvailable",
		Method:             "POST",
		PathPattern:        "/voice-chat/v1/push-to-talk/check-available",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostVoiceChatV1PushToTalkCheckAvailableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostVoiceChatV1PushToTalkCheckAvailableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostVoiceChatV1PushToTalkCheckAvailable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostVoiceChatV1SessionsByID post voice chat v1 sessions by Id API
*/
func (a *Client) PostVoiceChatV1SessionsByID(params *PostVoiceChatV1SessionsByIDParams) (*PostVoiceChatV1SessionsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVoiceChatV1SessionsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVoiceChatV1SessionsById",
		Method:             "POST",
		PathPattern:        "/voice-chat/v1/sessions/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostVoiceChatV1SessionsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostVoiceChatV1SessionsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostVoiceChatV1SessionsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostVoiceChatV2Sessions post voice chat v2 sessions API
*/
func (a *Client) PostVoiceChatV2Sessions(params *PostVoiceChatV2SessionsParams) (*PostVoiceChatV2SessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVoiceChatV2SessionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVoiceChatV2Sessions",
		Method:             "POST",
		PathPattern:        "/voice-chat/v2/sessions",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostVoiceChatV2SessionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostVoiceChatV2SessionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostVoiceChatV2Sessions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostVoiceChatV2SessionsByID post voice chat v2 sessions by Id API
*/
func (a *Client) PostVoiceChatV2SessionsByID(params *PostVoiceChatV2SessionsByIDParams) (*PostVoiceChatV2SessionsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVoiceChatV2SessionsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVoiceChatV2SessionsById",
		Method:             "POST",
		PathPattern:        "/voice-chat/v2/sessions/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostVoiceChatV2SessionsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostVoiceChatV2SessionsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostVoiceChatV2SessionsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutClientConfigV1EntitlementsToken put client config v1 entitlements token API
*/
func (a *Client) PutClientConfigV1EntitlementsToken(params *PutClientConfigV1EntitlementsTokenParams) (*PutClientConfigV1EntitlementsTokenNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClientConfigV1EntitlementsTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutClientConfigV1EntitlementsToken",
		Method:             "PUT",
		PathPattern:        "/client-config/v1/entitlements-token",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutClientConfigV1EntitlementsTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutClientConfigV1EntitlementsTokenNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutClientConfigV1EntitlementsToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutClientConfigV1RefreshConfigStatus put client config v1 refresh config status API
*/
func (a *Client) PutClientConfigV1RefreshConfigStatus(params *PutClientConfigV1RefreshConfigStatusParams) (*PutClientConfigV1RefreshConfigStatusNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClientConfigV1RefreshConfigStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutClientConfigV1RefreshConfigStatus",
		Method:             "PUT",
		PathPattern:        "/client-config/v1/refresh-config-status",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutClientConfigV1RefreshConfigStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutClientConfigV1RefreshConfigStatusNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutClientConfigV1RefreshConfigStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutClientConfigV2NamespaceChanges put client config v2 namespace changes API
*/
func (a *Client) PutClientConfigV2NamespaceChanges(params *PutClientConfigV2NamespaceChangesParams) (*PutClientConfigV2NamespaceChangesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClientConfigV2NamespaceChangesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutClientConfigV2NamespaceChanges",
		Method:             "PUT",
		PathPattern:        "/client-config/v2/namespace-changes",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutClientConfigV2NamespaceChangesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutClientConfigV2NamespaceChangesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutClientConfigV2NamespaceChanges: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutGcloudVoiceChatV1CodecSettings put gcloud voice chat v1 codec settings API
*/
func (a *Client) PutGcloudVoiceChatV1CodecSettings(params *PutGcloudVoiceChatV1CodecSettingsParams) (*PutGcloudVoiceChatV1CodecSettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutGcloudVoiceChatV1CodecSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutGcloudVoiceChatV1CodecSettings",
		Method:             "PUT",
		PathPattern:        "/gcloud-voice-chat/v1/codec-settings",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutGcloudVoiceChatV1CodecSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutGcloudVoiceChatV1CodecSettingsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutGcloudVoiceChatV1CodecSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutGcloudVoiceChatV1PushToTalk put gcloud voice chat v1 push to talk API
*/
func (a *Client) PutGcloudVoiceChatV1PushToTalk(params *PutGcloudVoiceChatV1PushToTalkParams) (*PutGcloudVoiceChatV1PushToTalkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutGcloudVoiceChatV1PushToTalkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutGcloudVoiceChatV1PushToTalk",
		Method:             "PUT",
		PathPattern:        "/gcloud-voice-chat/v1/push-to-talk",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutGcloudVoiceChatV1PushToTalkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutGcloudVoiceChatV1PushToTalkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutGcloudVoiceChatV1PushToTalk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutGcloudVoiceChatV2DevicesCapturePromptForPermission put gcloud voice chat v2 devices capture prompt for permission API
*/
func (a *Client) PutGcloudVoiceChatV2DevicesCapturePromptForPermission(params *PutGcloudVoiceChatV2DevicesCapturePromptForPermissionParams) (*PutGcloudVoiceChatV2DevicesCapturePromptForPermissionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutGcloudVoiceChatV2DevicesCapturePromptForPermissionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutGcloudVoiceChatV2DevicesCapturePromptForPermission",
		Method:             "PUT",
		PathPattern:        "/gcloud-voice-chat/v2/devices/capture/prompt-for-permission",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutGcloudVoiceChatV2DevicesCapturePromptForPermissionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutGcloudVoiceChatV2DevicesCapturePromptForPermissionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutGcloudVoiceChatV2DevicesCapturePromptForPermission: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutGcloudVoiceChatV2SessionsBySessionIDParticipantsByParticipantID put gcloud voice chat v2 sessions by session Id participants by participant Id API
*/
func (a *Client) PutGcloudVoiceChatV2SessionsBySessionIDParticipantsByParticipantID(params *PutGcloudVoiceChatV2SessionsBySessionIDParticipantsByParticipantIDParams) (*PutGcloudVoiceChatV2SessionsBySessionIDParticipantsByParticipantIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutGcloudVoiceChatV2SessionsBySessionIDParticipantsByParticipantIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutGcloudVoiceChatV2SessionsBySessionIdParticipantsByParticipantId",
		Method:             "PUT",
		PathPattern:        "/gcloud-voice-chat/v2/sessions/{sessionId}/participants/{participantId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutGcloudVoiceChatV2SessionsBySessionIDParticipantsByParticipantIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutGcloudVoiceChatV2SessionsBySessionIDParticipantsByParticipantIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutGcloudVoiceChatV2SessionsBySessionIdParticipantsByParticipantId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutGcloudVoiceChatV2Settings put gcloud voice chat v2 settings API
*/
func (a *Client) PutGcloudVoiceChatV2Settings(params *PutGcloudVoiceChatV2SettingsParams) (*PutGcloudVoiceChatV2SettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutGcloudVoiceChatV2SettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutGcloudVoiceChatV2Settings",
		Method:             "PUT",
		PathPattern:        "/gcloud-voice-chat/v2/settings",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutGcloudVoiceChatV2SettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutGcloudVoiceChatV2SettingsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutGcloudVoiceChatV2Settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolBannersV1CurrentSummonerFlagsEquipped put lol banners v1 current summoner flags equipped API
*/
func (a *Client) PutLolBannersV1CurrentSummonerFlagsEquipped(params *PutLolBannersV1CurrentSummonerFlagsEquippedParams) (*PutLolBannersV1CurrentSummonerFlagsEquippedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolBannersV1CurrentSummonerFlagsEquippedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolBannersV1CurrentSummonerFlagsEquipped",
		Method:             "PUT",
		PathPattern:        "/lol-banners/v1/current-summoner/flags/equipped",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolBannersV1CurrentSummonerFlagsEquippedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolBannersV1CurrentSummonerFlagsEquippedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolBannersV1CurrentSummonerFlagsEquipped: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolChatV1ConversationsActive put lol chat v1 conversations active API
*/
func (a *Client) PutLolChatV1ConversationsActive(params *PutLolChatV1ConversationsActiveParams) (*PutLolChatV1ConversationsActiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolChatV1ConversationsActiveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolChatV1ConversationsActive",
		Method:             "PUT",
		PathPattern:        "/lol-chat/v1/conversations/active",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolChatV1ConversationsActiveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolChatV1ConversationsActiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolChatV1ConversationsActive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolChatV1ConversationsByID put lol chat v1 conversations by Id API
*/
func (a *Client) PutLolChatV1ConversationsByID(params *PutLolChatV1ConversationsByIDParams) (*PutLolChatV1ConversationsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolChatV1ConversationsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolChatV1ConversationsById",
		Method:             "PUT",
		PathPattern:        "/lol-chat/v1/conversations/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolChatV1ConversationsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolChatV1ConversationsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolChatV1ConversationsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolChatV1ConversationsByIDClosed put lol chat v1 conversations by Id closed API
*/
func (a *Client) PutLolChatV1ConversationsByIDClosed(params *PutLolChatV1ConversationsByIDClosedParams) (*PutLolChatV1ConversationsByIDClosedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolChatV1ConversationsByIDClosedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolChatV1ConversationsByIdClosed",
		Method:             "PUT",
		PathPattern:        "/lol-chat/v1/conversations/{id}/closed",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolChatV1ConversationsByIDClosedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolChatV1ConversationsByIDClosedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolChatV1ConversationsByIdClosed: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolChatV1FriendGroupsByID put lol chat v1 friend groups by Id API
*/
func (a *Client) PutLolChatV1FriendGroupsByID(params *PutLolChatV1FriendGroupsByIDParams) (*PutLolChatV1FriendGroupsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolChatV1FriendGroupsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolChatV1FriendGroupsById",
		Method:             "PUT",
		PathPattern:        "/lol-chat/v1/friend-groups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolChatV1FriendGroupsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolChatV1FriendGroupsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolChatV1FriendGroupsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolChatV1FriendGroupsOrder put lol chat v1 friend groups order API
*/
func (a *Client) PutLolChatV1FriendGroupsOrder(params *PutLolChatV1FriendGroupsOrderParams) (*PutLolChatV1FriendGroupsOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolChatV1FriendGroupsOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolChatV1FriendGroupsOrder",
		Method:             "PUT",
		PathPattern:        "/lol-chat/v1/friend-groups/order",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolChatV1FriendGroupsOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolChatV1FriendGroupsOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolChatV1FriendGroupsOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolChatV1FriendRequestsByID put lol chat v1 friend requests by Id API
*/
func (a *Client) PutLolChatV1FriendRequestsByID(params *PutLolChatV1FriendRequestsByIDParams) (*PutLolChatV1FriendRequestsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolChatV1FriendRequestsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolChatV1FriendRequestsById",
		Method:             "PUT",
		PathPattern:        "/lol-chat/v1/friend-requests/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolChatV1FriendRequestsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolChatV1FriendRequestsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolChatV1FriendRequestsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolChatV1FriendsByID put lol chat v1 friends by Id API
*/
func (a *Client) PutLolChatV1FriendsByID(params *PutLolChatV1FriendsByIDParams) (*PutLolChatV1FriendsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolChatV1FriendsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolChatV1FriendsById",
		Method:             "PUT",
		PathPattern:        "/lol-chat/v1/friends/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolChatV1FriendsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolChatV1FriendsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolChatV1FriendsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolChatV1Me put lol chat v1 me API
*/
func (a *Client) PutLolChatV1Me(params *PutLolChatV1MeParams) (*PutLolChatV1MeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolChatV1MeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolChatV1Me",
		Method:             "PUT",
		PathPattern:        "/lol-chat/v1/me",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolChatV1MeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolChatV1MeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolChatV1Me: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolChatV1Settings put lol chat v1 settings API
*/
func (a *Client) PutLolChatV1Settings(params *PutLolChatV1SettingsParams) (*PutLolChatV1SettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolChatV1SettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolChatV1Settings",
		Method:             "PUT",
		PathPattern:        "/lol-chat/v1/settings",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolChatV1SettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolChatV1SettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolChatV1Settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolChatV1SettingsByKey put lol chat v1 settings by key API
*/
func (a *Client) PutLolChatV1SettingsByKey(params *PutLolChatV1SettingsByKeyParams) (*PutLolChatV1SettingsByKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolChatV1SettingsByKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolChatV1SettingsByKey",
		Method:             "PUT",
		PathPattern:        "/lol-chat/v1/settings/{key}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolChatV1SettingsByKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolChatV1SettingsByKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolChatV1SettingsByKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolCollectionsV1InventoriesBySummonerIDVerification put lol collections v1 inventories by summoner Id verification API
*/
func (a *Client) PutLolCollectionsV1InventoriesBySummonerIDVerification(params *PutLolCollectionsV1InventoriesBySummonerIDVerificationParams) (*PutLolCollectionsV1InventoriesBySummonerIDVerificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolCollectionsV1InventoriesBySummonerIDVerificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolCollectionsV1InventoriesBySummonerIdVerification",
		Method:             "PUT",
		PathPattern:        "/lol-collections/v1/inventories/{summonerId}/verification",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolCollectionsV1InventoriesBySummonerIDVerificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolCollectionsV1InventoriesBySummonerIDVerificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolCollectionsV1InventoriesBySummonerIdVerification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolCosmeticsV1SelectionCompanion put lol cosmetics v1 selection companion API
*/
func (a *Client) PutLolCosmeticsV1SelectionCompanion(params *PutLolCosmeticsV1SelectionCompanionParams) (*PutLolCosmeticsV1SelectionCompanionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolCosmeticsV1SelectionCompanionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolCosmeticsV1SelectionCompanion",
		Method:             "PUT",
		PathPattern:        "/lol-cosmetics/v1/selection/companion",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolCosmeticsV1SelectionCompanionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolCosmeticsV1SelectionCompanionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolCosmeticsV1SelectionCompanion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolCosmeticsV1SelectionTftMapSkin put lol cosmetics v1 selection tft map skin API
*/
func (a *Client) PutLolCosmeticsV1SelectionTftMapSkin(params *PutLolCosmeticsV1SelectionTftMapSkinParams) (*PutLolCosmeticsV1SelectionTftMapSkinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolCosmeticsV1SelectionTftMapSkinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolCosmeticsV1SelectionTftMapSkin",
		Method:             "PUT",
		PathPattern:        "/lol-cosmetics/v1/selection/tft-map-skin",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolCosmeticsV1SelectionTftMapSkinReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolCosmeticsV1SelectionTftMapSkinOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolCosmeticsV1SelectionTftMapSkin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolEmailVerificationV1Email put lol email verification v1 email API
*/
func (a *Client) PutLolEmailVerificationV1Email(params *PutLolEmailVerificationV1EmailParams) (*PutLolEmailVerificationV1EmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolEmailVerificationV1EmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolEmailVerificationV1Email",
		Method:             "PUT",
		PathPattern:        "/lol-email-verification/v1/email",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolEmailVerificationV1EmailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolEmailVerificationV1EmailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolEmailVerificationV1Email: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolHighlightsV1HighlightsByID put lol highlights v1 highlights by Id API
*/
func (a *Client) PutLolHighlightsV1HighlightsByID(params *PutLolHighlightsV1HighlightsByIDParams) (*PutLolHighlightsV1HighlightsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolHighlightsV1HighlightsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolHighlightsV1HighlightsById",
		Method:             "PUT",
		PathPattern:        "/lol-highlights/v1/highlights/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolHighlightsV1HighlightsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolHighlightsV1HighlightsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolHighlightsV1HighlightsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolItemSetsV1ItemSetsBySummonerIDSets put lol item sets v1 item sets by summoner Id sets API
*/
func (a *Client) PutLolItemSetsV1ItemSetsBySummonerIDSets(params *PutLolItemSetsV1ItemSetsBySummonerIDSetsParams) (*PutLolItemSetsV1ItemSetsBySummonerIDSetsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolItemSetsV1ItemSetsBySummonerIDSetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolItemSetsV1ItemSetsBySummonerIdSets",
		Method:             "PUT",
		PathPattern:        "/lol-item-sets/v1/item-sets/{summonerId}/sets",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolItemSetsV1ItemSetsBySummonerIDSetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolItemSetsV1ItemSetsBySummonerIDSetsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolItemSetsV1ItemSetsBySummonerIdSets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolLoadoutsV4LoadoutsByID put lol loadouts v4 loadouts by Id API
*/
func (a *Client) PutLolLoadoutsV4LoadoutsByID(params *PutLolLoadoutsV4LoadoutsByIDParams) (*PutLolLoadoutsV4LoadoutsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolLoadoutsV4LoadoutsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolLoadoutsV4LoadoutsById",
		Method:             "PUT",
		PathPattern:        "/lol-loadouts/v4/loadouts/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolLoadoutsV4LoadoutsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolLoadoutsV4LoadoutsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolLoadoutsV4LoadoutsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolLobbyV1AutofillDisplayed put lol lobby v1 autofill displayed API
*/
func (a *Client) PutLolLobbyV1AutofillDisplayed(params *PutLolLobbyV1AutofillDisplayedParams) (*PutLolLobbyV1AutofillDisplayedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolLobbyV1AutofillDisplayedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolLobbyV1AutofillDisplayed",
		Method:             "PUT",
		PathPattern:        "/lol-lobby/v1/autofill-displayed",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolLobbyV1AutofillDisplayedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolLobbyV1AutofillDisplayedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolLobbyV1AutofillDisplayed: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolLobbyV1LobbyMembersLocalMemberPositionPreferences put lol lobby v1 lobby members local member position preferences API
*/
func (a *Client) PutLolLobbyV1LobbyMembersLocalMemberPositionPreferences(params *PutLolLobbyV1LobbyMembersLocalMemberPositionPreferencesParams) (*PutLolLobbyV1LobbyMembersLocalMemberPositionPreferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolLobbyV1LobbyMembersLocalMemberPositionPreferencesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolLobbyV1LobbyMembersLocalMemberPositionPreferences",
		Method:             "PUT",
		PathPattern:        "/lol-lobby/v1/lobby/members/localMember/position-preferences",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolLobbyV1LobbyMembersLocalMemberPositionPreferencesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolLobbyV1LobbyMembersLocalMemberPositionPreferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolLobbyV1LobbyMembersLocalMemberPositionPreferences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolLobbyV1PartiesActive put lol lobby v1 parties active API
*/
func (a *Client) PutLolLobbyV1PartiesActive(params *PutLolLobbyV1PartiesActiveParams) (*PutLolLobbyV1PartiesActiveNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolLobbyV1PartiesActiveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolLobbyV1PartiesActive",
		Method:             "PUT",
		PathPattern:        "/lol-lobby/v1/parties/active",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolLobbyV1PartiesActiveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolLobbyV1PartiesActiveNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolLobbyV1PartiesActive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolLobbyV1PartiesByPartyIDMembersByPuuidRole put lol lobby v1 parties by party Id members by puuid role API
*/
func (a *Client) PutLolLobbyV1PartiesByPartyIDMembersByPuuidRole(params *PutLolLobbyV1PartiesByPartyIDMembersByPuuidRoleParams) (*PutLolLobbyV1PartiesByPartyIDMembersByPuuidRoleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolLobbyV1PartiesByPartyIDMembersByPuuidRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolLobbyV1PartiesByPartyIdMembersByPuuidRole",
		Method:             "PUT",
		PathPattern:        "/lol-lobby/v1/parties/{partyId}/members/{puuid}/role",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolLobbyV1PartiesByPartyIDMembersByPuuidRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolLobbyV1PartiesByPartyIDMembersByPuuidRoleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolLobbyV1PartiesByPartyIdMembersByPuuidRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolLobbyV1PartiesMetadata put lol lobby v1 parties metadata API
*/
func (a *Client) PutLolLobbyV1PartiesMetadata(params *PutLolLobbyV1PartiesMetadataParams) (*PutLolLobbyV1PartiesMetadataNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolLobbyV1PartiesMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolLobbyV1PartiesMetadata",
		Method:             "PUT",
		PathPattern:        "/lol-lobby/v1/parties/metadata",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolLobbyV1PartiesMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolLobbyV1PartiesMetadataNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolLobbyV1PartiesMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolLobbyV1PartiesQueue put lol lobby v1 parties queue API
*/
func (a *Client) PutLolLobbyV1PartiesQueue(params *PutLolLobbyV1PartiesQueueParams) (*PutLolLobbyV1PartiesQueueNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolLobbyV1PartiesQueueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolLobbyV1PartiesQueue",
		Method:             "PUT",
		PathPattern:        "/lol-lobby/v1/parties/queue",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolLobbyV1PartiesQueueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolLobbyV1PartiesQueueNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolLobbyV1PartiesQueue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolLobbyV1PartiesReady put lol lobby v1 parties ready API
*/
func (a *Client) PutLolLobbyV1PartiesReady(params *PutLolLobbyV1PartiesReadyParams) (*PutLolLobbyV1PartiesReadyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolLobbyV1PartiesReadyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolLobbyV1PartiesReady",
		Method:             "PUT",
		PathPattern:        "/lol-lobby/v1/parties/ready",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolLobbyV1PartiesReadyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolLobbyV1PartiesReadyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolLobbyV1PartiesReady: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolLobbyV2LobbyMembersLocalMemberPositionPreferences put lol lobby v2 lobby members local member position preferences API
*/
func (a *Client) PutLolLobbyV2LobbyMembersLocalMemberPositionPreferences(params *PutLolLobbyV2LobbyMembersLocalMemberPositionPreferencesParams) (*PutLolLobbyV2LobbyMembersLocalMemberPositionPreferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolLobbyV2LobbyMembersLocalMemberPositionPreferencesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolLobbyV2LobbyMembersLocalMemberPositionPreferences",
		Method:             "PUT",
		PathPattern:        "/lol-lobby/v2/lobby/members/localMember/position-preferences",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolLobbyV2LobbyMembersLocalMemberPositionPreferencesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolLobbyV2LobbyMembersLocalMemberPositionPreferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolLobbyV2LobbyMembersLocalMemberPositionPreferences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolLobbyV2LobbyPartyType put lol lobby v2 lobby party type API
*/
func (a *Client) PutLolLobbyV2LobbyPartyType(params *PutLolLobbyV2LobbyPartyTypeParams) (*PutLolLobbyV2LobbyPartyTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolLobbyV2LobbyPartyTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolLobbyV2LobbyPartyType",
		Method:             "PUT",
		PathPattern:        "/lol-lobby/v2/lobby/partyType",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolLobbyV2LobbyPartyTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolLobbyV2LobbyPartyTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolLobbyV2LobbyPartyType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolLoginV1ShutdownLocksByLockName put lol login v1 shutdown locks by lock name API
*/
func (a *Client) PutLolLoginV1ShutdownLocksByLockName(params *PutLolLoginV1ShutdownLocksByLockNameParams) (*PutLolLoginV1ShutdownLocksByLockNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolLoginV1ShutdownLocksByLockNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolLoginV1ShutdownLocksByLockName",
		Method:             "PUT",
		PathPattern:        "/lol-login/v1/shutdown-locks/{lockName}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolLoginV1ShutdownLocksByLockNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolLoginV1ShutdownLocksByLockNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolLoginV1ShutdownLocksByLockName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolMatchmakingV1Search put lol matchmaking v1 search API
*/
func (a *Client) PutLolMatchmakingV1Search(params *PutLolMatchmakingV1SearchParams) (*PutLolMatchmakingV1SearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolMatchmakingV1SearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolMatchmakingV1Search",
		Method:             "PUT",
		PathPattern:        "/lol-matchmaking/v1/search",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolMatchmakingV1SearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolMatchmakingV1SearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolMatchmakingV1Search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolMissionsV1Player put lol missions v1 player API
*/
func (a *Client) PutLolMissionsV1Player(params *PutLolMissionsV1PlayerParams) (*PutLolMissionsV1PlayerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolMissionsV1PlayerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolMissionsV1Player",
		Method:             "PUT",
		PathPattern:        "/lol-missions/v1/player",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolMissionsV1PlayerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolMissionsV1PlayerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolMissionsV1Player: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolMissionsV1PlayerByMissionID put lol missions v1 player by mission Id API
*/
func (a *Client) PutLolMissionsV1PlayerByMissionID(params *PutLolMissionsV1PlayerByMissionIDParams) (*PutLolMissionsV1PlayerByMissionIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolMissionsV1PlayerByMissionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolMissionsV1PlayerByMissionId",
		Method:             "PUT",
		PathPattern:        "/lol-missions/v1/player/{missionId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolMissionsV1PlayerByMissionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolMissionsV1PlayerByMissionIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolMissionsV1PlayerByMissionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolMissionsV1PlayerOpt put lol missions v1 player opt API
*/
func (a *Client) PutLolMissionsV1PlayerOpt(params *PutLolMissionsV1PlayerOptParams) (*PutLolMissionsV1PlayerOptNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolMissionsV1PlayerOptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolMissionsV1PlayerOpt",
		Method:             "PUT",
		PathPattern:        "/lol-missions/v1/player/opt",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolMissionsV1PlayerOptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolMissionsV1PlayerOptNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolMissionsV1PlayerOpt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolMissionsV2PlayerOpt put lol missions v2 player opt API
*/
func (a *Client) PutLolMissionsV2PlayerOpt(params *PutLolMissionsV2PlayerOptParams) (*PutLolMissionsV2PlayerOptNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolMissionsV2PlayerOptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolMissionsV2PlayerOpt",
		Method:             "PUT",
		PathPattern:        "/lol-missions/v2/player/opt",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolMissionsV2PlayerOptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolMissionsV2PlayerOptNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolMissionsV2PlayerOpt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolNpeTutorialPathV1Settings put lol npe tutorial path v1 settings API
*/
func (a *Client) PutLolNpeTutorialPathV1Settings(params *PutLolNpeTutorialPathV1SettingsParams) (*PutLolNpeTutorialPathV1SettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolNpeTutorialPathV1SettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolNpeTutorialPathV1Settings",
		Method:             "PUT",
		PathPattern:        "/lol-npe-tutorial-path/v1/settings",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolNpeTutorialPathV1SettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolNpeTutorialPathV1SettingsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolNpeTutorialPathV1Settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolNpeTutorialPathV1TutorialsByTutorialIDView put lol npe tutorial path v1 tutorials by tutorial Id view API
*/
func (a *Client) PutLolNpeTutorialPathV1TutorialsByTutorialIDView(params *PutLolNpeTutorialPathV1TutorialsByTutorialIDViewParams) (*PutLolNpeTutorialPathV1TutorialsByTutorialIDViewNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolNpeTutorialPathV1TutorialsByTutorialIDViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolNpeTutorialPathV1TutorialsByTutorialIdView",
		Method:             "PUT",
		PathPattern:        "/lol-npe-tutorial-path/v1/tutorials/{tutorialId}/view",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolNpeTutorialPathV1TutorialsByTutorialIDViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolNpeTutorialPathV1TutorialsByTutorialIDViewNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolNpeTutorialPathV1TutorialsByTutorialIdView: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolPatchV1SelfUpdateRestart put lol patch v1 self update restart API
*/
func (a *Client) PutLolPatchV1SelfUpdateRestart(params *PutLolPatchV1SelfUpdateRestartParams) (*PutLolPatchV1SelfUpdateRestartNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolPatchV1SelfUpdateRestartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolPatchV1SelfUpdateRestart",
		Method:             "PUT",
		PathPattern:        "/lol-patch/v1/self-update-restart",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolPatchV1SelfUpdateRestartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolPatchV1SelfUpdateRestartNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolPatchV1SelfUpdateRestart: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolPatchV1Ux put lol patch v1 ux API
*/
func (a *Client) PutLolPatchV1Ux(params *PutLolPatchV1UxParams) (*PutLolPatchV1UxNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolPatchV1UxParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolPatchV1Ux",
		Method:             "PUT",
		PathPattern:        "/lol-patch/v1/ux",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolPatchV1UxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolPatchV1UxNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolPatchV1Ux: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolPerksV1Currentpage put lol perks v1 currentpage API
*/
func (a *Client) PutLolPerksV1Currentpage(params *PutLolPerksV1CurrentpageParams) (*PutLolPerksV1CurrentpageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolPerksV1CurrentpageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolPerksV1Currentpage",
		Method:             "PUT",
		PathPattern:        "/lol-perks/v1/currentpage",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolPerksV1CurrentpageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolPerksV1CurrentpageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolPerksV1Currentpage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolPerksV1PagesByID put lol perks v1 pages by Id API
*/
func (a *Client) PutLolPerksV1PagesByID(params *PutLolPerksV1PagesByIDParams) (*PutLolPerksV1PagesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolPerksV1PagesByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolPerksV1PagesById",
		Method:             "PUT",
		PathPattern:        "/lol-perks/v1/pages/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolPerksV1PagesByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolPerksV1PagesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolPerksV1PagesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolPerksV1PerksAckGameplayUpdated put lol perks v1 perks ack gameplay updated API
*/
func (a *Client) PutLolPerksV1PerksAckGameplayUpdated(params *PutLolPerksV1PerksAckGameplayUpdatedParams) (*PutLolPerksV1PerksAckGameplayUpdatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolPerksV1PerksAckGameplayUpdatedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolPerksV1PerksAckGameplayUpdated",
		Method:             "PUT",
		PathPattern:        "/lol-perks/v1/perks/ack-gameplay-updated",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolPerksV1PerksAckGameplayUpdatedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolPerksV1PerksAckGameplayUpdatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolPerksV1PerksAckGameplayUpdated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolPerksV1Settings put lol perks v1 settings API
*/
func (a *Client) PutLolPerksV1Settings(params *PutLolPerksV1SettingsParams) (*PutLolPerksV1SettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolPerksV1SettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolPerksV1Settings",
		Method:             "PUT",
		PathPattern:        "/lol-perks/v1/settings",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolPerksV1SettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolPerksV1SettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolPerksV1Settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolPlayerPreferencesV1Preference put lol player preferences v1 preference API
*/
func (a *Client) PutLolPlayerPreferencesV1Preference(params *PutLolPlayerPreferencesV1PreferenceParams) (*PutLolPlayerPreferencesV1PreferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolPlayerPreferencesV1PreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolPlayerPreferencesV1Preference",
		Method:             "PUT",
		PathPattern:        "/lol-player-preferences/v1/preference",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolPlayerPreferencesV1PreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolPlayerPreferencesV1PreferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolPlayerPreferencesV1Preference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolPremadeVoiceV1Capturedevices put lol premade voice v1 capturedevices API
*/
func (a *Client) PutLolPremadeVoiceV1Capturedevices(params *PutLolPremadeVoiceV1CapturedevicesParams) (*PutLolPremadeVoiceV1CapturedevicesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolPremadeVoiceV1CapturedevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolPremadeVoiceV1Capturedevices",
		Method:             "PUT",
		PathPattern:        "/lol-premade-voice/v1/capturedevices",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolPremadeVoiceV1CapturedevicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolPremadeVoiceV1CapturedevicesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolPremadeVoiceV1Capturedevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolPremadeVoiceV1ParticipantsByPuuidMute put lol premade voice v1 participants by puuid mute API
*/
func (a *Client) PutLolPremadeVoiceV1ParticipantsByPuuidMute(params *PutLolPremadeVoiceV1ParticipantsByPuuidMuteParams) (*PutLolPremadeVoiceV1ParticipantsByPuuidMuteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolPremadeVoiceV1ParticipantsByPuuidMuteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolPremadeVoiceV1ParticipantsByPuuidMute",
		Method:             "PUT",
		PathPattern:        "/lol-premade-voice/v1/participants/{puuid}/mute",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolPremadeVoiceV1ParticipantsByPuuidMuteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolPremadeVoiceV1ParticipantsByPuuidMuteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolPremadeVoiceV1ParticipantsByPuuidMute: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolPremadeVoiceV1ParticipantsByPuuidVolume put lol premade voice v1 participants by puuid volume API
*/
func (a *Client) PutLolPremadeVoiceV1ParticipantsByPuuidVolume(params *PutLolPremadeVoiceV1ParticipantsByPuuidVolumeParams) (*PutLolPremadeVoiceV1ParticipantsByPuuidVolumeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolPremadeVoiceV1ParticipantsByPuuidVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolPremadeVoiceV1ParticipantsByPuuidVolume",
		Method:             "PUT",
		PathPattern:        "/lol-premade-voice/v1/participants/{puuid}/volume",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolPremadeVoiceV1ParticipantsByPuuidVolumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolPremadeVoiceV1ParticipantsByPuuidVolumeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolPremadeVoiceV1ParticipantsByPuuidVolume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolPremadeVoiceV1SelfActivationSensitivity put lol premade voice v1 self activation sensitivity API
*/
func (a *Client) PutLolPremadeVoiceV1SelfActivationSensitivity(params *PutLolPremadeVoiceV1SelfActivationSensitivityParams) (*PutLolPremadeVoiceV1SelfActivationSensitivityNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolPremadeVoiceV1SelfActivationSensitivityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolPremadeVoiceV1SelfActivationSensitivity",
		Method:             "PUT",
		PathPattern:        "/lol-premade-voice/v1/self/activationSensitivity",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolPremadeVoiceV1SelfActivationSensitivityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolPremadeVoiceV1SelfActivationSensitivityNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolPremadeVoiceV1SelfActivationSensitivity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolPremadeVoiceV1SelfInputMode put lol premade voice v1 self input mode API
*/
func (a *Client) PutLolPremadeVoiceV1SelfInputMode(params *PutLolPremadeVoiceV1SelfInputModeParams) (*PutLolPremadeVoiceV1SelfInputModeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolPremadeVoiceV1SelfInputModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolPremadeVoiceV1SelfInputMode",
		Method:             "PUT",
		PathPattern:        "/lol-premade-voice/v1/self/inputMode",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolPremadeVoiceV1SelfInputModeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolPremadeVoiceV1SelfInputModeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolPremadeVoiceV1SelfInputMode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolPremadeVoiceV1SelfMicLevel put lol premade voice v1 self mic level API
*/
func (a *Client) PutLolPremadeVoiceV1SelfMicLevel(params *PutLolPremadeVoiceV1SelfMicLevelParams) (*PutLolPremadeVoiceV1SelfMicLevelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolPremadeVoiceV1SelfMicLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolPremadeVoiceV1SelfMicLevel",
		Method:             "PUT",
		PathPattern:        "/lol-premade-voice/v1/self/micLevel",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolPremadeVoiceV1SelfMicLevelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolPremadeVoiceV1SelfMicLevelNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolPremadeVoiceV1SelfMicLevel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolPremadeVoiceV1SelfMute put lol premade voice v1 self mute API
*/
func (a *Client) PutLolPremadeVoiceV1SelfMute(params *PutLolPremadeVoiceV1SelfMuteParams) (*PutLolPremadeVoiceV1SelfMuteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolPremadeVoiceV1SelfMuteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolPremadeVoiceV1SelfMute",
		Method:             "PUT",
		PathPattern:        "/lol-premade-voice/v1/self/mute",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolPremadeVoiceV1SelfMuteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolPremadeVoiceV1SelfMuteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolPremadeVoiceV1SelfMute: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolRegaliaV2CurrentSummonerRegalia put lol regalia v2 current summoner regalia API
*/
func (a *Client) PutLolRegaliaV2CurrentSummonerRegalia(params *PutLolRegaliaV2CurrentSummonerRegaliaParams) (*PutLolRegaliaV2CurrentSummonerRegaliaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolRegaliaV2CurrentSummonerRegaliaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolRegaliaV2CurrentSummonerRegalia",
		Method:             "PUT",
		PathPattern:        "/lol-regalia/v2/current-summoner/regalia",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolRegaliaV2CurrentSummonerRegaliaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolRegaliaV2CurrentSummonerRegaliaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolRegaliaV2CurrentSummonerRegalia: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolSettingsV1AccountByCategory put lol settings v1 account by category API
*/
func (a *Client) PutLolSettingsV1AccountByCategory(params *PutLolSettingsV1AccountByCategoryParams) (*PutLolSettingsV1AccountByCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolSettingsV1AccountByCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolSettingsV1AccountByCategory",
		Method:             "PUT",
		PathPattern:        "/lol-settings/v1/account/{category}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolSettingsV1AccountByCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolSettingsV1AccountByCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolSettingsV1AccountByCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolSettingsV2AccountByPpTypeByCategory put lol settings v2 account by pp type by category API
*/
func (a *Client) PutLolSettingsV2AccountByPpTypeByCategory(params *PutLolSettingsV2AccountByPpTypeByCategoryParams) (*PutLolSettingsV2AccountByPpTypeByCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolSettingsV2AccountByPpTypeByCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolSettingsV2AccountByPpTypeByCategory",
		Method:             "PUT",
		PathPattern:        "/lol-settings/v2/account/{ppType}/{category}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolSettingsV2AccountByPpTypeByCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolSettingsV2AccountByPpTypeByCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolSettingsV2AccountByPpTypeByCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutLolSummonerV1CurrentSummonerIcon put lol summoner v1 current summoner icon API
*/
func (a *Client) PutLolSummonerV1CurrentSummonerIcon(params *PutLolSummonerV1CurrentSummonerIconParams) (*PutLolSummonerV1CurrentSummonerIconOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLolSummonerV1CurrentSummonerIconParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLolSummonerV1CurrentSummonerIcon",
		Method:             "PUT",
		PathPattern:        "/lol-summoner/v1/current-summoner/icon",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLolSummonerV1CurrentSummonerIconReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLolSummonerV1CurrentSummonerIconOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutLolSummonerV1CurrentSummonerIcon: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutPatcherV1SelfUpdateRestart put patcher v1 self update restart API
*/
func (a *Client) PutPatcherV1SelfUpdateRestart(params *PutPatcherV1SelfUpdateRestartParams) (*PutPatcherV1SelfUpdateRestartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPatcherV1SelfUpdateRestartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutPatcherV1SelfUpdateRestart",
		Method:             "PUT",
		PathPattern:        "/patcher/v1/self-update-restart",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutPatcherV1SelfUpdateRestartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutPatcherV1SelfUpdateRestartOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutPatcherV1SelfUpdateRestart: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutPatcherV1Ux put patcher v1 ux API
*/
func (a *Client) PutPatcherV1Ux(params *PutPatcherV1UxParams) (*PutPatcherV1UxNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPatcherV1UxParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutPatcherV1Ux",
		Method:             "PUT",
		PathPattern:        "/patcher/v1/ux",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutPatcherV1UxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutPatcherV1UxNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutPatcherV1Ux: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutPlayerNotificationsV1Config put player notifications v1 config API
*/
func (a *Client) PutPlayerNotificationsV1Config(params *PutPlayerNotificationsV1ConfigParams) (*PutPlayerNotificationsV1ConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPlayerNotificationsV1ConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutPlayerNotificationsV1Config",
		Method:             "PUT",
		PathPattern:        "/player-notifications/v1/config",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutPlayerNotificationsV1ConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutPlayerNotificationsV1ConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutPlayerNotificationsV1Config: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutPlayerNotificationsV1NotificationsByID put player notifications v1 notifications by Id API
*/
func (a *Client) PutPlayerNotificationsV1NotificationsByID(params *PutPlayerNotificationsV1NotificationsByIDParams) (*PutPlayerNotificationsV1NotificationsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPlayerNotificationsV1NotificationsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutPlayerNotificationsV1NotificationsById",
		Method:             "PUT",
		PathPattern:        "/player-notifications/v1/notifications/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutPlayerNotificationsV1NotificationsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutPlayerNotificationsV1NotificationsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutPlayerNotificationsV1NotificationsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRecofrienderV1Debug put recofriender v1 debug API
*/
func (a *Client) PutRecofrienderV1Debug(params *PutRecofrienderV1DebugParams) (*PutRecofrienderV1DebugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRecofrienderV1DebugParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutRecofrienderV1Debug",
		Method:             "PUT",
		PathPattern:        "/recofriender/v1/debug",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRecofrienderV1DebugReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRecofrienderV1DebugOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRecofrienderV1Debug: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutVoiceChatV1CodecSettings put voice chat v1 codec settings API
*/
func (a *Client) PutVoiceChatV1CodecSettings(params *PutVoiceChatV1CodecSettingsParams) (*PutVoiceChatV1CodecSettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutVoiceChatV1CodecSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutVoiceChatV1CodecSettings",
		Method:             "PUT",
		PathPattern:        "/voice-chat/v1/codec-settings",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutVoiceChatV1CodecSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutVoiceChatV1CodecSettingsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutVoiceChatV1CodecSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutVoiceChatV1PushToTalk put voice chat v1 push to talk API
*/
func (a *Client) PutVoiceChatV1PushToTalk(params *PutVoiceChatV1PushToTalkParams) (*PutVoiceChatV1PushToTalkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutVoiceChatV1PushToTalkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutVoiceChatV1PushToTalk",
		Method:             "PUT",
		PathPattern:        "/voice-chat/v1/push-to-talk",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutVoiceChatV1PushToTalkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutVoiceChatV1PushToTalkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutVoiceChatV1PushToTalk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutVoiceChatV2DevicesCapturePromptForPermission put voice chat v2 devices capture prompt for permission API
*/
func (a *Client) PutVoiceChatV2DevicesCapturePromptForPermission(params *PutVoiceChatV2DevicesCapturePromptForPermissionParams) (*PutVoiceChatV2DevicesCapturePromptForPermissionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutVoiceChatV2DevicesCapturePromptForPermissionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutVoiceChatV2DevicesCapturePromptForPermission",
		Method:             "PUT",
		PathPattern:        "/voice-chat/v2/devices/capture/prompt-for-permission",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutVoiceChatV2DevicesCapturePromptForPermissionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutVoiceChatV2DevicesCapturePromptForPermissionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutVoiceChatV2DevicesCapturePromptForPermission: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutVoiceChatV2SessionsBySessionIDParticipantsByParticipantID put voice chat v2 sessions by session Id participants by participant Id API
*/
func (a *Client) PutVoiceChatV2SessionsBySessionIDParticipantsByParticipantID(params *PutVoiceChatV2SessionsBySessionIDParticipantsByParticipantIDParams) (*PutVoiceChatV2SessionsBySessionIDParticipantsByParticipantIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutVoiceChatV2SessionsBySessionIDParticipantsByParticipantIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutVoiceChatV2SessionsBySessionIdParticipantsByParticipantId",
		Method:             "PUT",
		PathPattern:        "/voice-chat/v2/sessions/{sessionId}/participants/{participantId}",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutVoiceChatV2SessionsBySessionIDParticipantsByParticipantIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutVoiceChatV2SessionsBySessionIDParticipantsByParticipantIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutVoiceChatV2SessionsBySessionIdParticipantsByParticipantId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutVoiceChatV2Settings put voice chat v2 settings API
*/
func (a *Client) PutVoiceChatV2Settings(params *PutVoiceChatV2SettingsParams) (*PutVoiceChatV2SettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutVoiceChatV2SettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutVoiceChatV2Settings",
		Method:             "PUT",
		PathPattern:        "/voice-chat/v2/settings",
		ProducesMediaTypes: []string{"application/json", "application/x-msgpack", "application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "application/vnd.api+json", "application/x-msgpack", "application/x-www-form-urlencoded", "application/x-yaml", "multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutVoiceChatV2SettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutVoiceChatV2SettingsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutVoiceChatV2Settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
