// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/paralin/go-rift-api/models"
)

// NewPostLolLoginV1SessionParams creates a new PostLolLoginV1SessionParams object
// with the default values initialized.
func NewPostLolLoginV1SessionParams() *PostLolLoginV1SessionParams {
	var ()
	return &PostLolLoginV1SessionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostLolLoginV1SessionParamsWithTimeout creates a new PostLolLoginV1SessionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostLolLoginV1SessionParamsWithTimeout(timeout time.Duration) *PostLolLoginV1SessionParams {
	var ()
	return &PostLolLoginV1SessionParams{

		timeout: timeout,
	}
}

// NewPostLolLoginV1SessionParamsWithContext creates a new PostLolLoginV1SessionParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostLolLoginV1SessionParamsWithContext(ctx context.Context) *PostLolLoginV1SessionParams {
	var ()
	return &PostLolLoginV1SessionParams{

		Context: ctx,
	}
}

// NewPostLolLoginV1SessionParamsWithHTTPClient creates a new PostLolLoginV1SessionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostLolLoginV1SessionParamsWithHTTPClient(client *http.Client) *PostLolLoginV1SessionParams {
	var ()
	return &PostLolLoginV1SessionParams{
		HTTPClient: client,
	}
}

/*PostLolLoginV1SessionParams contains all the parameters to send to the API endpoint
for the post lol login v1 session operation typically these are written to a http.Request
*/
type PostLolLoginV1SessionParams struct {

	/*UsernameAndPassword*/
	UsernameAndPassword *models.LolLoginUsernameAndPassword

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post lol login v1 session params
func (o *PostLolLoginV1SessionParams) WithTimeout(timeout time.Duration) *PostLolLoginV1SessionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post lol login v1 session params
func (o *PostLolLoginV1SessionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post lol login v1 session params
func (o *PostLolLoginV1SessionParams) WithContext(ctx context.Context) *PostLolLoginV1SessionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post lol login v1 session params
func (o *PostLolLoginV1SessionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post lol login v1 session params
func (o *PostLolLoginV1SessionParams) WithHTTPClient(client *http.Client) *PostLolLoginV1SessionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post lol login v1 session params
func (o *PostLolLoginV1SessionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUsernameAndPassword adds the usernameAndPassword to the post lol login v1 session params
func (o *PostLolLoginV1SessionParams) WithUsernameAndPassword(usernameAndPassword *models.LolLoginUsernameAndPassword) *PostLolLoginV1SessionParams {
	o.SetUsernameAndPassword(usernameAndPassword)
	return o
}

// SetUsernameAndPassword adds the usernameAndPassword to the post lol login v1 session params
func (o *PostLolLoginV1SessionParams) SetUsernameAndPassword(usernameAndPassword *models.LolLoginUsernameAndPassword) {
	o.UsernameAndPassword = usernameAndPassword
}

// WriteToRequest writes these params to a swagger request
func (o *PostLolLoginV1SessionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.UsernameAndPassword != nil {
		if err := r.SetBodyParam(o.UsernameAndPassword); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
