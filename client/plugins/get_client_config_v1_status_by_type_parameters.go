// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetClientConfigV1StatusByTypeParams creates a new GetClientConfigV1StatusByTypeParams object
// with the default values initialized.
func NewGetClientConfigV1StatusByTypeParams() *GetClientConfigV1StatusByTypeParams {
	var ()
	return &GetClientConfigV1StatusByTypeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetClientConfigV1StatusByTypeParamsWithTimeout creates a new GetClientConfigV1StatusByTypeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetClientConfigV1StatusByTypeParamsWithTimeout(timeout time.Duration) *GetClientConfigV1StatusByTypeParams {
	var ()
	return &GetClientConfigV1StatusByTypeParams{

		timeout: timeout,
	}
}

// NewGetClientConfigV1StatusByTypeParamsWithContext creates a new GetClientConfigV1StatusByTypeParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetClientConfigV1StatusByTypeParamsWithContext(ctx context.Context) *GetClientConfigV1StatusByTypeParams {
	var ()
	return &GetClientConfigV1StatusByTypeParams{

		Context: ctx,
	}
}

// NewGetClientConfigV1StatusByTypeParamsWithHTTPClient creates a new GetClientConfigV1StatusByTypeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetClientConfigV1StatusByTypeParamsWithHTTPClient(client *http.Client) *GetClientConfigV1StatusByTypeParams {
	var ()
	return &GetClientConfigV1StatusByTypeParams{
		HTTPClient: client,
	}
}

/*GetClientConfigV1StatusByTypeParams contains all the parameters to send to the API endpoint
for the get client config v1 status by type operation typically these are written to a http.Request
*/
type GetClientConfigV1StatusByTypeParams struct {

	/*Type*/
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get client config v1 status by type params
func (o *GetClientConfigV1StatusByTypeParams) WithTimeout(timeout time.Duration) *GetClientConfigV1StatusByTypeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get client config v1 status by type params
func (o *GetClientConfigV1StatusByTypeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get client config v1 status by type params
func (o *GetClientConfigV1StatusByTypeParams) WithContext(ctx context.Context) *GetClientConfigV1StatusByTypeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get client config v1 status by type params
func (o *GetClientConfigV1StatusByTypeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get client config v1 status by type params
func (o *GetClientConfigV1StatusByTypeParams) WithHTTPClient(client *http.Client) *GetClientConfigV1StatusByTypeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get client config v1 status by type params
func (o *GetClientConfigV1StatusByTypeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithType adds the typeVar to the get client config v1 status by type params
func (o *GetClientConfigV1StatusByTypeParams) WithType(typeVar string) *GetClientConfigV1StatusByTypeParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get client config v1 status by type params
func (o *GetClientConfigV1StatusByTypeParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetClientConfigV1StatusByTypeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param type
	if err := r.SetPathParam("type", o.Type); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
