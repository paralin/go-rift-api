// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/paralin/go-rift-api/models"
)

// GetClientConfigV1StatusByTypeReader is a Reader for the GetClientConfigV1StatusByType structure.
type GetClientConfigV1StatusByTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetClientConfigV1StatusByTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetClientConfigV1StatusByTypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetClientConfigV1StatusByTypeOK creates a GetClientConfigV1StatusByTypeOK with default headers values
func NewGetClientConfigV1StatusByTypeOK() *GetClientConfigV1StatusByTypeOK {
	return &GetClientConfigV1StatusByTypeOK{}
}

/*GetClientConfigV1StatusByTypeOK handles this case with default header values.

Successful response
*/
type GetClientConfigV1StatusByTypeOK struct {
	Payload *models.ClientConfigConfigStatus
}

func (o *GetClientConfigV1StatusByTypeOK) Error() string {
	return fmt.Sprintf("[GET /client-config/v1/status/{type}][%d] getClientConfigV1StatusByTypeOK  %+v", 200, o.Payload)
}

func (o *GetClientConfigV1StatusByTypeOK) GetPayload() *models.ClientConfigConfigStatus {
	return o.Payload
}

func (o *GetClientConfigV1StatusByTypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ClientConfigConfigStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
