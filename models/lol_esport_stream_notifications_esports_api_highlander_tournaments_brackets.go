// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LolEsportStreamNotificationsEsportsAPIHighlanderTournamentsBrackets lol esport stream notifications esports API highlander tournaments brackets
// swagger:model LolEsportStreamNotificationsEsportsAPI_highlanderTournaments_brackets
type LolEsportStreamNotificationsEsportsAPIHighlanderTournamentsBrackets struct {

	// id
	ID string `json:"id,omitempty"`

	// matches
	Matches map[string]LolEsportStreamNotificationsEsportsAPIHighlanderTournamentsMatches `json:"matches,omitempty"`
}

// Validate validates this lol esport stream notifications esports API highlander tournaments brackets
func (m *LolEsportStreamNotificationsEsportsAPIHighlanderTournamentsBrackets) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatches(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolEsportStreamNotificationsEsportsAPIHighlanderTournamentsBrackets) validateMatches(formats strfmt.Registry) error {

	if swag.IsZero(m.Matches) { // not required
		return nil
	}

	for k := range m.Matches {

		if err := validate.Required("matches"+"."+k, "body", m.Matches[k]); err != nil {
			return err
		}
		if val, ok := m.Matches[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolEsportStreamNotificationsEsportsAPIHighlanderTournamentsBrackets) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolEsportStreamNotificationsEsportsAPIHighlanderTournamentsBrackets) UnmarshalBinary(b []byte) error {
	var res LolEsportStreamNotificationsEsportsAPIHighlanderTournamentsBrackets
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
