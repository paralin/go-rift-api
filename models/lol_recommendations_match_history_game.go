// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolRecommendationsMatchHistoryGame lol recommendations match history game
// swagger:model LolRecommendationsMatchHistoryGame
type LolRecommendationsMatchHistoryGame struct {

	// game creation
	GameCreation int64 `json:"gameCreation,omitempty"`

	// game creation date
	GameCreationDate string `json:"gameCreationDate,omitempty"`

	// game duration
	GameDuration int32 `json:"gameDuration,omitempty"`

	// game Id
	GameID int64 `json:"gameId,omitempty"`

	// game mode
	GameMode string `json:"gameMode,omitempty"`

	// game type
	GameType string `json:"gameType,omitempty"`

	// game version
	GameVersion string `json:"gameVersion,omitempty"`

	// map Id
	MapID int64 `json:"mapId,omitempty"`

	// participant identities
	ParticipantIdentities []*LolRecommendationsMatchHistoryParticipantIdentities `json:"participantIdentities"`

	// participants
	Participants []*LolRecommendationsMatchHistoryParticipant `json:"participants"`

	// platform Id
	PlatformID string `json:"platformId,omitempty"`

	// queue Id
	QueueID int32 `json:"queueId,omitempty"`

	// season Id
	SeasonID int64 `json:"seasonId,omitempty"`
}

// Validate validates this lol recommendations match history game
func (m *LolRecommendationsMatchHistoryGame) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParticipantIdentities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParticipants(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolRecommendationsMatchHistoryGame) validateParticipantIdentities(formats strfmt.Registry) error {

	if swag.IsZero(m.ParticipantIdentities) { // not required
		return nil
	}

	for i := 0; i < len(m.ParticipantIdentities); i++ {
		if swag.IsZero(m.ParticipantIdentities[i]) { // not required
			continue
		}

		if m.ParticipantIdentities[i] != nil {
			if err := m.ParticipantIdentities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("participantIdentities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LolRecommendationsMatchHistoryGame) validateParticipants(formats strfmt.Registry) error {

	if swag.IsZero(m.Participants) { // not required
		return nil
	}

	for i := 0; i < len(m.Participants); i++ {
		if swag.IsZero(m.Participants[i]) { // not required
			continue
		}

		if m.Participants[i] != nil {
			if err := m.Participants[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("participants" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolRecommendationsMatchHistoryGame) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolRecommendationsMatchHistoryGame) UnmarshalBinary(b []byte) error {
	var res LolRecommendationsMatchHistoryGame
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
