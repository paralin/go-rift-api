// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// SubState sub state
// swagger:model SubState
type SubState string

const (

	// SubStateSUGGESTED captures enum value "SUGGESTED"
	SubStateSUGGESTED SubState = "SUGGESTED"

	// SubStatePENDING captures enum value "PENDING"
	SubStatePENDING SubState = "PENDING"

	// SubStateDECLINED captures enum value "DECLINED"
	SubStateDECLINED SubState = "DECLINED"

	// SubStateREVOKED captures enum value "REVOKED"
	SubStateREVOKED SubState = "REVOKED"

	// SubStateNOTREADY captures enum value "NOT_READY"
	SubStateNOTREADY SubState = "NOT_READY"

	// SubStateFORCEDNOTREADY captures enum value "FORCED_NOT_READY"
	SubStateFORCEDNOTREADY SubState = "FORCED_NOT_READY"

	// SubStateREADY captures enum value "READY"
	SubStateREADY SubState = "READY"
)

// for schema
var subStateEnum []interface{}

func init() {
	var res []SubState
	if err := json.Unmarshal([]byte(`["SUGGESTED","PENDING","DECLINED","REVOKED","NOT_READY","FORCED_NOT_READY","READY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subStateEnum = append(subStateEnum, v)
	}
}

func (m SubState) validateSubStateEnum(path, location string, value SubState) error {
	if err := validate.Enum(path, location, value, subStateEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this sub state
func (m SubState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSubStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
