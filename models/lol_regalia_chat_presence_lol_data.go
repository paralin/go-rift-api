// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolRegaliaChatPresenceLolData lol regalia chat presence lol data
// swagger:model LolRegaliaChatPresenceLolData
type LolRegaliaChatPresenceLolData struct {

	// level
	Level int32 `json:"level,omitempty"`

	// ranked league division
	RankedLeagueDivision LolRegaliaLeagueDivision `json:"rankedLeagueDivision,omitempty"`

	// ranked league queue
	RankedLeagueQueue LolRegaliaLeagueQueueType `json:"rankedLeagueQueue,omitempty"`

	// ranked league tier
	RankedLeagueTier LolRegaliaLeagueTier `json:"rankedLeagueTier,omitempty"`

	// ranked prev season division
	RankedPrevSeasonDivision LolRegaliaLeagueDivision `json:"rankedPrevSeasonDivision,omitempty"`

	// ranked prev season tier
	RankedPrevSeasonTier LolRegaliaLeagueTier `json:"rankedPrevSeasonTier,omitempty"`

	// ranked split reward level
	RankedSplitRewardLevel int32 `json:"rankedSplitRewardLevel,omitempty"`

	// regalia
	Regalia *LolRegaliaRegaliaSettings `json:"regalia,omitempty"`
}

// Validate validates this lol regalia chat presence lol data
func (m *LolRegaliaChatPresenceLolData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRankedLeagueDivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRankedLeagueQueue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRankedLeagueTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRankedPrevSeasonDivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRankedPrevSeasonTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegalia(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolRegaliaChatPresenceLolData) validateRankedLeagueDivision(formats strfmt.Registry) error {

	if swag.IsZero(m.RankedLeagueDivision) { // not required
		return nil
	}

	if err := m.RankedLeagueDivision.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rankedLeagueDivision")
		}
		return err
	}

	return nil
}

func (m *LolRegaliaChatPresenceLolData) validateRankedLeagueQueue(formats strfmt.Registry) error {

	if swag.IsZero(m.RankedLeagueQueue) { // not required
		return nil
	}

	if err := m.RankedLeagueQueue.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rankedLeagueQueue")
		}
		return err
	}

	return nil
}

func (m *LolRegaliaChatPresenceLolData) validateRankedLeagueTier(formats strfmt.Registry) error {

	if swag.IsZero(m.RankedLeagueTier) { // not required
		return nil
	}

	if err := m.RankedLeagueTier.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rankedLeagueTier")
		}
		return err
	}

	return nil
}

func (m *LolRegaliaChatPresenceLolData) validateRankedPrevSeasonDivision(formats strfmt.Registry) error {

	if swag.IsZero(m.RankedPrevSeasonDivision) { // not required
		return nil
	}

	if err := m.RankedPrevSeasonDivision.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rankedPrevSeasonDivision")
		}
		return err
	}

	return nil
}

func (m *LolRegaliaChatPresenceLolData) validateRankedPrevSeasonTier(formats strfmt.Registry) error {

	if swag.IsZero(m.RankedPrevSeasonTier) { // not required
		return nil
	}

	if err := m.RankedPrevSeasonTier.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rankedPrevSeasonTier")
		}
		return err
	}

	return nil
}

func (m *LolRegaliaChatPresenceLolData) validateRegalia(formats strfmt.Registry) error {

	if swag.IsZero(m.Regalia) { // not required
		return nil
	}

	if m.Regalia != nil {
		if err := m.Regalia.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("regalia")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolRegaliaChatPresenceLolData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolRegaliaChatPresenceLolData) UnmarshalBinary(b []byte) error {
	var res LolRegaliaChatPresenceLolData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
