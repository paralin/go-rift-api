// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ClashEventData clash event data
// swagger:model ClashEventData
type ClashEventData struct {

	// bracket
	Bracket int64 `json:"bracket,omitempty"`

	// earned date
	EarnedDate string `json:"earnedDate,omitempty"`

	// player u UI ds
	PlayerUUIDs []string `json:"playerUUIDs"`

	// reward spec
	RewardSpec *ClashRewardSpec `json:"rewardSpec,omitempty"`

	// reward type
	RewardType string `json:"rewardType,omitempty"`

	// season Id
	SeasonID int32 `json:"seasonId,omitempty"`

	// team logo chroma Id
	TeamLogoChromaID string `json:"teamLogoChromaId,omitempty"`

	// team logo name
	TeamLogoName string `json:"teamLogoName,omitempty"`

	// team name
	TeamName string `json:"teamName,omitempty"`

	// theme
	Theme string `json:"theme,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// tournament Id
	TournamentID int64 `json:"tournamentId,omitempty"`

	// tournament name
	TournamentName string `json:"tournamentName,omitempty"`
}

// Validate validates this clash event data
func (m *ClashEventData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRewardSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClashEventData) validateRewardSpec(formats strfmt.Registry) error {

	if swag.IsZero(m.RewardSpec) { // not required
		return nil
	}

	if m.RewardSpec != nil {
		if err := m.RewardSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rewardSpec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClashEventData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClashEventData) UnmarshalBinary(b []byte) error {
	var res ClashEventData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
