// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ClashRewardType clash reward type
// swagger:model ClashRewardType
type ClashRewardType string

const (

	// ClashRewardTypeTROPHY captures enum value "TROPHY"
	ClashRewardTypeTROPHY ClashRewardType = "TROPHY"

	// ClashRewardTypeFLAG captures enum value "FLAG"
	ClashRewardTypeFLAG ClashRewardType = "FLAG"

	// ClashRewardTypeFRAME captures enum value "FRAME"
	ClashRewardTypeFRAME ClashRewardType = "FRAME"

	// ClashRewardTypeLOGO captures enum value "LOGO"
	ClashRewardTypeLOGO ClashRewardType = "LOGO"

	// ClashRewardTypeLOOT captures enum value "LOOT"
	ClashRewardTypeLOOT ClashRewardType = "LOOT"

	// ClashRewardTypeVP captures enum value "VP"
	ClashRewardTypeVP ClashRewardType = "VP"

	// ClashRewardTypeTOC captures enum value "TOC"
	ClashRewardTypeTOC ClashRewardType = "TOC"
)

// for schema
var clashRewardTypeEnum []interface{}

func init() {
	var res []ClashRewardType
	if err := json.Unmarshal([]byte(`["TROPHY","FLAG","FRAME","LOGO","LOOT","VP","TOC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clashRewardTypeEnum = append(clashRewardTypeEnum, v)
	}
}

func (m ClashRewardType) validateClashRewardTypeEnum(path, location string, value ClashRewardType) error {
	if err := validate.Enum(path, location, value, clashRewardTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this clash reward type
func (m ClashRewardType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClashRewardTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
