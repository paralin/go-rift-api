// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MetricMetadata metric metadata
// swagger:model MetricMetadata
type MetricMetadata struct {

	// alerts
	Alerts []*MetricMetadataAlert `json:"alerts"`

	// category
	Category string `json:"category,omitempty"`

	// data type
	DataType MetricDataType `json:"data_type,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// destination
	Destination string `json:"destination,omitempty"`

	// info
	Info string `json:"info,omitempty"`

	// notify
	Notify *MetricMetadataNotify `json:"notify,omitempty"`

	// period
	Period int32 `json:"period,omitempty"`

	// pretty name
	PrettyName string `json:"pretty_name,omitempty"`

	// priority
	Priority MetricPriority `json:"priority,omitempty"`

	// sample window ms
	SampleWindowMs int32 `json:"sample_window_ms,omitempty"`

	// transient aggregation
	TransientAggregation AggregationType `json:"transientAggregation,omitempty"`

	// type
	Type MetricType `json:"type,omitempty"`

	// units
	Units string `json:"units,omitempty"`
}

// Validate validates this metric metadata
func (m *MetricMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlerts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotify(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransientAggregation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetricMetadata) validateAlerts(formats strfmt.Registry) error {

	if swag.IsZero(m.Alerts) { // not required
		return nil
	}

	for i := 0; i < len(m.Alerts); i++ {
		if swag.IsZero(m.Alerts[i]) { // not required
			continue
		}

		if m.Alerts[i] != nil {
			if err := m.Alerts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("alerts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MetricMetadata) validateDataType(formats strfmt.Registry) error {

	if swag.IsZero(m.DataType) { // not required
		return nil
	}

	if err := m.DataType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("data_type")
		}
		return err
	}

	return nil
}

func (m *MetricMetadata) validateNotify(formats strfmt.Registry) error {

	if swag.IsZero(m.Notify) { // not required
		return nil
	}

	if m.Notify != nil {
		if err := m.Notify.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notify")
			}
			return err
		}
	}

	return nil
}

func (m *MetricMetadata) validatePriority(formats strfmt.Registry) error {

	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	if err := m.Priority.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("priority")
		}
		return err
	}

	return nil
}

func (m *MetricMetadata) validateTransientAggregation(formats strfmt.Registry) error {

	if swag.IsZero(m.TransientAggregation) { // not required
		return nil
	}

	if err := m.TransientAggregation.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("transientAggregation")
		}
		return err
	}

	return nil
}

func (m *MetricMetadata) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetricMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetricMetadata) UnmarshalBinary(b []byte) error {
	var res MetricMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
