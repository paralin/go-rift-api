// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TicketOfferState ticket offer state
// swagger:model TicketOfferState
type TicketOfferState string

const (

	// TicketOfferStateACTIVE captures enum value "ACTIVE"
	TicketOfferStateACTIVE TicketOfferState = "ACTIVE"

	// TicketOfferStateACCEPTED captures enum value "ACCEPTED"
	TicketOfferStateACCEPTED TicketOfferState = "ACCEPTED"

	// TicketOfferStateREJECTED captures enum value "REJECTED"
	TicketOfferStateREJECTED TicketOfferState = "REJECTED"

	// TicketOfferStateREVOKED captures enum value "REVOKED"
	TicketOfferStateREVOKED TicketOfferState = "REVOKED"
)

// for schema
var ticketOfferStateEnum []interface{}

func init() {
	var res []TicketOfferState
	if err := json.Unmarshal([]byte(`["ACTIVE","ACCEPTED","REJECTED","REVOKED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ticketOfferStateEnum = append(ticketOfferStateEnum, v)
	}
}

func (m TicketOfferState) validateTicketOfferStateEnum(path, location string, value TicketOfferState) error {
	if err := validate.Enum(path, location, value, ticketOfferStateEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this ticket offer state
func (m TicketOfferState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTicketOfferStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
