// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolClashBracket lol clash bracket
// swagger:model LolClashBracket
type LolClashBracket struct {

	// current loser round
	CurrentLoserRound int32 `json:"currentLoserRound,omitempty"`

	// current round
	CurrentRound int32 `json:"currentRound,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// is complete
	IsComplete bool `json:"isComplete,omitempty"`

	// loser bracket matches
	LoserBracketMatches []*BracketMatch `json:"loserBracketMatches"`

	// matches
	Matches []*BracketMatch `json:"matches"`

	// period
	Period int32 `json:"period,omitempty"`

	// rosters
	Rosters []*BracketRoster `json:"rosters"`

	// size
	Size int32 `json:"size,omitempty"`

	// tournament Id
	TournamentID int64 `json:"tournamentId,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this lol clash bracket
func (m *LolClashBracket) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLoserBracketMatches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRosters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolClashBracket) validateLoserBracketMatches(formats strfmt.Registry) error {

	if swag.IsZero(m.LoserBracketMatches) { // not required
		return nil
	}

	for i := 0; i < len(m.LoserBracketMatches); i++ {
		if swag.IsZero(m.LoserBracketMatches[i]) { // not required
			continue
		}

		if m.LoserBracketMatches[i] != nil {
			if err := m.LoserBracketMatches[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("loserBracketMatches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LolClashBracket) validateMatches(formats strfmt.Registry) error {

	if swag.IsZero(m.Matches) { // not required
		return nil
	}

	for i := 0; i < len(m.Matches); i++ {
		if swag.IsZero(m.Matches[i]) { // not required
			continue
		}

		if m.Matches[i] != nil {
			if err := m.Matches[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LolClashBracket) validateRosters(formats strfmt.Registry) error {

	if swag.IsZero(m.Rosters) { // not required
		return nil
	}

	for i := 0; i < len(m.Rosters); i++ {
		if swag.IsZero(m.Rosters[i]) { // not required
			continue
		}

		if m.Rosters[i] != nil {
			if err := m.Rosters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rosters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolClashBracket) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolClashBracket) UnmarshalBinary(b []byte) error {
	var res LolClashBracket
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
