// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PendingRosterDTO pending roster d t o
// swagger:model PendingRosterDTO
type PendingRosterDTO struct {

	// captain Id
	CaptainID int64 `json:"captainId,omitempty"`

	// high tier variance
	HighTierVariance bool `json:"highTierVariance,omitempty"`

	// invitation Id
	InvitationID string `json:"invitationId,omitempty"`

	// invite faileds
	InviteFaileds []*FailedInvite `json:"inviteFaileds"`

	// invitees
	Invitees []*PendingRosterInviteeDTO `json:"invitees"`

	// logo
	Logo int32 `json:"logo,omitempty"`

	// logo color
	LogoColor int32 `json:"logoColor,omitempty"`

	// members
	Members []*PendingRosterMemberDTO `json:"members"`

	// name
	Name string `json:"name,omitempty"`

	// reward logos
	RewardLogos []*RewardLogo `json:"rewardLogos"`

	// short name
	ShortName string `json:"shortName,omitempty"`

	// ticket offers
	TicketOffers []*TicketOfferDTO `json:"ticketOffers"`

	// tier
	Tier int32 `json:"tier,omitempty"`

	// tournament Id
	TournamentID int64 `json:"tournamentId,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this pending roster d t o
func (m *PendingRosterDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInviteFaileds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvitees(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRewardLogos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTicketOffers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PendingRosterDTO) validateInviteFaileds(formats strfmt.Registry) error {

	if swag.IsZero(m.InviteFaileds) { // not required
		return nil
	}

	for i := 0; i < len(m.InviteFaileds); i++ {
		if swag.IsZero(m.InviteFaileds[i]) { // not required
			continue
		}

		if m.InviteFaileds[i] != nil {
			if err := m.InviteFaileds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inviteFaileds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PendingRosterDTO) validateInvitees(formats strfmt.Registry) error {

	if swag.IsZero(m.Invitees) { // not required
		return nil
	}

	for i := 0; i < len(m.Invitees); i++ {
		if swag.IsZero(m.Invitees[i]) { // not required
			continue
		}

		if m.Invitees[i] != nil {
			if err := m.Invitees[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("invitees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PendingRosterDTO) validateMembers(formats strfmt.Registry) error {

	if swag.IsZero(m.Members) { // not required
		return nil
	}

	for i := 0; i < len(m.Members); i++ {
		if swag.IsZero(m.Members[i]) { // not required
			continue
		}

		if m.Members[i] != nil {
			if err := m.Members[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PendingRosterDTO) validateRewardLogos(formats strfmt.Registry) error {

	if swag.IsZero(m.RewardLogos) { // not required
		return nil
	}

	for i := 0; i < len(m.RewardLogos); i++ {
		if swag.IsZero(m.RewardLogos[i]) { // not required
			continue
		}

		if m.RewardLogos[i] != nil {
			if err := m.RewardLogos[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rewardLogos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PendingRosterDTO) validateTicketOffers(formats strfmt.Registry) error {

	if swag.IsZero(m.TicketOffers) { // not required
		return nil
	}

	for i := 0; i < len(m.TicketOffers); i++ {
		if swag.IsZero(m.TicketOffers[i]) { // not required
			continue
		}

		if m.TicketOffers[i] != nil {
			if err := m.TicketOffers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ticketOffers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PendingRosterDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PendingRosterDTO) UnmarshalBinary(b []byte) error {
	var res PendingRosterDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
