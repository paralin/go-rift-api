// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolWorldsTokenCardTokenUpsell lol worlds token card token upsell
// swagger:model LolWorldsTokenCardTokenUpsell
type LolWorldsTokenCardTokenUpsell struct {

	// background Url
	BackgroundURL string `json:"backgroundUrl,omitempty"`

	// button text
	ButtonText string `json:"buttonText,omitempty"`

	// currency Url
	CurrencyURL string `json:"currencyUrl,omitempty"`

	// currently locked
	CurrentlyLocked LolWorldsTokenCardTokenUpsellLockedType `json:"currentlyLocked,omitempty"`

	// dependent inventory Id
	DependentInventoryID int32 `json:"dependentInventoryId,omitempty"`

	// dependent inventory type
	DependentInventoryType string `json:"dependentInventoryType,omitempty"`

	// end date
	EndDate string `json:"endDate,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// internal name
	InternalName string `json:"internalName,omitempty"`

	// locked count
	LockedCount int32 `json:"lockedCount,omitempty"`

	// premium currency name
	PremiumCurrencyName string `json:"premiumCurrencyName,omitempty"`

	// purchase Url
	PurchaseURL string `json:"purchaseUrl,omitempty"`

	// start date
	StartDate string `json:"startDate,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// tooltip background Url
	TooltipBackgroundURL string `json:"tooltipBackgroundUrl,omitempty"`

	// tooltip description
	TooltipDescription string `json:"tooltipDescription,omitempty"`

	// tooltip title
	TooltipTitle string `json:"tooltipTitle,omitempty"`
}

// Validate validates this lol worlds token card token upsell
func (m *LolWorldsTokenCardTokenUpsell) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentlyLocked(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolWorldsTokenCardTokenUpsell) validateCurrentlyLocked(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrentlyLocked) { // not required
		return nil
	}

	if err := m.CurrentlyLocked.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("currentlyLocked")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolWorldsTokenCardTokenUpsell) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolWorldsTokenCardTokenUpsell) UnmarshalBinary(b []byte) error {
	var res LolWorldsTokenCardTokenUpsell
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
