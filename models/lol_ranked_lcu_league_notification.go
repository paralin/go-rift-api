// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolRankedLcuLeagueNotification lol ranked lcu league notification
// swagger:model LolRankedLcuLeagueNotification
type LolRankedLcuLeagueNotification struct {

	// change reason
	ChangeReason string `json:"changeReason,omitempty"`

	// display type
	DisplayType LolRankedNotificationDisplayType `json:"displayType,omitempty"`

	// division
	Division LolRankedLeagueDivision `json:"division,omitempty"`

	// eligible for promo helper
	EligibleForPromoHelper bool `json:"eligibleForPromoHelper,omitempty"`

	// game Id
	GameID int64 `json:"gameId,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// league points
	LeaguePoints int32 `json:"leaguePoints,omitempty"`

	// league points delta
	LeaguePointsDelta int32 `json:"leaguePointsDelta,omitempty"`

	// miniseries progress
	MiniseriesProgress string `json:"miniseriesProgress,omitempty"`

	// miniseries wins
	MiniseriesWins int32 `json:"miniseriesWins,omitempty"`

	// msg Id
	MsgID string `json:"msgId,omitempty"`

	// notify reason
	NotifyReason string `json:"notifyReason,omitempty"`

	// provisional games remaining
	ProvisionalGamesRemaining int32 `json:"provisionalGamesRemaining,omitempty"`

	// queue type
	QueueType LolRankedLeagueQueueType `json:"queueType,omitempty"`

	// reward earned Id
	RewardEarnedID string `json:"rewardEarnedId,omitempty"`

	// reward earned type
	RewardEarnedType string `json:"rewardEarnedType,omitempty"`

	// split points notification
	SplitPointsNotification *LolRankedSplitPointsNotification `json:"splitPointsNotification,omitempty"`

	// tier
	Tier LolRankedLeagueTier `json:"tier,omitempty"`

	// time until inactivity status changes
	TimeUntilInactivityStatusChanges int64 `json:"timeUntilInactivityStatusChanges,omitempty"`
}

// Validate validates this lol ranked lcu league notification
func (m *LolRankedLcuLeagueNotification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSplitPointsNotification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolRankedLcuLeagueNotification) validateDisplayType(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayType) { // not required
		return nil
	}

	if err := m.DisplayType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("displayType")
		}
		return err
	}

	return nil
}

func (m *LolRankedLcuLeagueNotification) validateDivision(formats strfmt.Registry) error {

	if swag.IsZero(m.Division) { // not required
		return nil
	}

	if err := m.Division.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("division")
		}
		return err
	}

	return nil
}

func (m *LolRankedLcuLeagueNotification) validateQueueType(formats strfmt.Registry) error {

	if swag.IsZero(m.QueueType) { // not required
		return nil
	}

	if err := m.QueueType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("queueType")
		}
		return err
	}

	return nil
}

func (m *LolRankedLcuLeagueNotification) validateSplitPointsNotification(formats strfmt.Registry) error {

	if swag.IsZero(m.SplitPointsNotification) { // not required
		return nil
	}

	if m.SplitPointsNotification != nil {
		if err := m.SplitPointsNotification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("splitPointsNotification")
			}
			return err
		}
	}

	return nil
}

func (m *LolRankedLcuLeagueNotification) validateTier(formats strfmt.Registry) error {

	if swag.IsZero(m.Tier) { // not required
		return nil
	}

	if err := m.Tier.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tier")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolRankedLcuLeagueNotification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolRankedLcuLeagueNotification) UnmarshalBinary(b []byte) error {
	var res LolRankedLcuLeagueNotification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
