// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ChampSelectLcdsGameDTO champ select lcds game d t o
// swagger:model ChampSelectLcdsGameDTO
type ChampSelectLcdsGameDTO struct {

	// banned champions
	BannedChampions []*BannedChampion `json:"bannedChampions"`

	// game mutators
	GameMutators []string `json:"gameMutators"`

	// game state
	GameState string `json:"gameState,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// optimistic lock
	OptimisticLock int64 `json:"optimisticLock,omitempty"`

	// pick turn
	PickTurn int32 `json:"pickTurn,omitempty"`

	// player champion selections
	PlayerChampionSelections []*ChampSelectLcdsPlayerChampionSelectionDTO `json:"playerChampionSelections"`

	// queue type name
	QueueTypeName string `json:"queueTypeName,omitempty"`

	// room name
	RoomName string `json:"roomName,omitempty"`

	// room password
	RoomPassword string `json:"roomPassword,omitempty"`

	// spectator delay
	SpectatorDelay int64 `json:"spectatorDelay,omitempty"`

	// status of participants
	StatusOfParticipants string `json:"statusOfParticipants,omitempty"`

	// team one
	TeamOne []interface{} `json:"teamOne"`

	// team two
	TeamTwo []interface{} `json:"teamTwo"`
}

// Validate validates this champ select lcds game d t o
func (m *ChampSelectLcdsGameDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBannedChampions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlayerChampionSelections(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChampSelectLcdsGameDTO) validateBannedChampions(formats strfmt.Registry) error {

	if swag.IsZero(m.BannedChampions) { // not required
		return nil
	}

	for i := 0; i < len(m.BannedChampions); i++ {
		if swag.IsZero(m.BannedChampions[i]) { // not required
			continue
		}

		if m.BannedChampions[i] != nil {
			if err := m.BannedChampions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bannedChampions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ChampSelectLcdsGameDTO) validatePlayerChampionSelections(formats strfmt.Registry) error {

	if swag.IsZero(m.PlayerChampionSelections) { // not required
		return nil
	}

	for i := 0; i < len(m.PlayerChampionSelections); i++ {
		if swag.IsZero(m.PlayerChampionSelections[i]) { // not required
			continue
		}

		if m.PlayerChampionSelections[i] != nil {
			if err := m.PlayerChampionSelections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("playerChampionSelections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChampSelectLcdsGameDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChampSelectLcdsGameDTO) UnmarshalBinary(b []byte) error {
	var res ChampSelectLcdsGameDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
