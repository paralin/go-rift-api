// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LootLcdsRecipeClientDTO loot lcds recipe client d t o
// swagger:model LootLcdsRecipeClientDTO
type LootLcdsRecipeClientDTO struct {

	// crafter name
	CrafterName string `json:"crafterName,omitempty"`

	// display categories
	DisplayCategories string `json:"displayCategories,omitempty"`

	// metadata
	Metadata *LootLcdsRecipeMetadata `json:"metadata,omitempty"`

	// outputs
	Outputs []*LootLcdsRecipeOutputDTO `json:"outputs"`

	// recipe name
	RecipeName string `json:"recipeName,omitempty"`

	// slots
	Slots []*LootLcdsRecipeSlotClientDTO `json:"slots"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this loot lcds recipe client d t o
func (m *LootLcdsRecipeClientDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlots(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LootLcdsRecipeClientDTO) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *LootLcdsRecipeClientDTO) validateOutputs(formats strfmt.Registry) error {

	if swag.IsZero(m.Outputs) { // not required
		return nil
	}

	for i := 0; i < len(m.Outputs); i++ {
		if swag.IsZero(m.Outputs[i]) { // not required
			continue
		}

		if m.Outputs[i] != nil {
			if err := m.Outputs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outputs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LootLcdsRecipeClientDTO) validateSlots(formats strfmt.Registry) error {

	if swag.IsZero(m.Slots) { // not required
		return nil
	}

	for i := 0; i < len(m.Slots); i++ {
		if swag.IsZero(m.Slots[i]) { // not required
			continue
		}

		if m.Slots[i] != nil {
			if err := m.Slots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("slots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LootLcdsRecipeClientDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LootLcdsRecipeClientDTO) UnmarshalBinary(b []byte) error {
	var res LootLcdsRecipeClientDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
