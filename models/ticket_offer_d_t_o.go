// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TicketOfferDTO ticket offer d t o
// swagger:model TicketOfferDTO
type TicketOfferDTO struct {

	// count
	Count int32 `json:"count,omitempty"`

	// offer player Id
	OfferPlayerID int64 `json:"offerPlayerId,omitempty"`

	// receive player Id
	ReceivePlayerID int64 `json:"receivePlayerId,omitempty"`

	// ticket offer state
	TicketOfferState TicketOfferState `json:"ticketOfferState,omitempty"`

	// type
	Type TicketType `json:"type,omitempty"`
}

// Validate validates this ticket offer d t o
func (m *TicketOfferDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTicketOfferState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TicketOfferDTO) validateTicketOfferState(formats strfmt.Registry) error {

	if swag.IsZero(m.TicketOfferState) { // not required
		return nil
	}

	if err := m.TicketOfferState.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ticketOfferState")
		}
		return err
	}

	return nil
}

func (m *TicketOfferDTO) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TicketOfferDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TicketOfferDTO) UnmarshalBinary(b []byte) error {
	var res TicketOfferDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
