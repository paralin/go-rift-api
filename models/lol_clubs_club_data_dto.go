// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolClubsClubDataDto lol clubs club data dto
// swagger:model LolClubsClubDataDto
type LolClubsClubDataDto struct {

	// club key
	ClubKey string `json:"clubKey,omitempty"`

	// created ts
	CreatedTs int64 `json:"createdTs,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// jid
	Jid string `json:"jid,omitempty"`

	// last modified ts
	LastModifiedTs int64 `json:"lastModifiedTs,omitempty"`

	// motd
	Motd string `json:"motd,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// permission map
	PermissionMap *LolClubsClubPermissions `json:"permissionMap,omitempty"`

	// role
	Role string `json:"role,omitempty"`

	// tag
	Tag string `json:"tag,omitempty"`
}

// Validate validates this lol clubs club data dto
func (m *LolClubsClubDataDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePermissionMap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolClubsClubDataDto) validatePermissionMap(formats strfmt.Registry) error {

	if swag.IsZero(m.PermissionMap) { // not required
		return nil
	}

	if m.PermissionMap != nil {
		if err := m.PermissionMap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissionMap")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolClubsClubDataDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolClubsClubDataDto) UnmarshalBinary(b []byte) error {
	var res LolClubsClubDataDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
