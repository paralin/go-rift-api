// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ReplayResponseStatus replay response status
// swagger:model ReplayResponseStatus
type ReplayResponseStatus string

const (

	// ReplayResponseStatusOK captures enum value "OK"
	ReplayResponseStatusOK ReplayResponseStatus = "OK"

	// ReplayResponseStatusNOTFOUND captures enum value "NOT_FOUND"
	ReplayResponseStatusNOTFOUND ReplayResponseStatus = "NOT_FOUND"

	// ReplayResponseStatusEXPIRED captures enum value "EXPIRED"
	ReplayResponseStatusEXPIRED ReplayResponseStatus = "EXPIRED"

	// ReplayResponseStatusBADREQUEST captures enum value "BAD_REQUEST"
	ReplayResponseStatusBADREQUEST ReplayResponseStatus = "BAD_REQUEST"

	// ReplayResponseStatusINTERNALSERVERERROR captures enum value "INTERNAL_SERVER_ERROR"
	ReplayResponseStatusINTERNALSERVERERROR ReplayResponseStatus = "INTERNAL_SERVER_ERROR"
)

// for schema
var replayResponseStatusEnum []interface{}

func init() {
	var res []ReplayResponseStatus
	if err := json.Unmarshal([]byte(`["OK","NOT_FOUND","EXPIRED","BAD_REQUEST","INTERNAL_SERVER_ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		replayResponseStatusEnum = append(replayResponseStatusEnum, v)
	}
}

func (m ReplayResponseStatus) validateReplayResponseStatusEnum(path, location string, value ReplayResponseStatus) error {
	if err := validate.Enum(path, location, value, replayResponseStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this replay response status
func (m ReplayResponseStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateReplayResponseStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
