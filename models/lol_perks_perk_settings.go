// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LolPerksPerkSettings lol perks perk settings
// swagger:model LolPerksPerkSettings
type LolPerksPerkSettings struct {

	// pages
	Pages []*LolPerksPerkPageResource `json:"pages"`

	// per shard perk books
	PerShardPerkBooks map[string]LolPerksPerkBook `json:"perShardPerkBooks,omitempty"`

	// settings
	Settings *LolPerksUISettings `json:"settings,omitempty"`
}

// Validate validates this lol perks perk settings
func (m *LolPerksPerkSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerShardPerkBooks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolPerksPerkSettings) validatePages(formats strfmt.Registry) error {

	if swag.IsZero(m.Pages) { // not required
		return nil
	}

	for i := 0; i < len(m.Pages); i++ {
		if swag.IsZero(m.Pages[i]) { // not required
			continue
		}

		if m.Pages[i] != nil {
			if err := m.Pages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LolPerksPerkSettings) validatePerShardPerkBooks(formats strfmt.Registry) error {

	if swag.IsZero(m.PerShardPerkBooks) { // not required
		return nil
	}

	for k := range m.PerShardPerkBooks {

		if err := validate.Required("perShardPerkBooks"+"."+k, "body", m.PerShardPerkBooks[k]); err != nil {
			return err
		}
		if val, ok := m.PerShardPerkBooks[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *LolPerksPerkSettings) validateSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	if m.Settings != nil {
		if err := m.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolPerksPerkSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolPerksPerkSettings) UnmarshalBinary(b []byte) error {
	var res LolPerksPerkSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
