// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LcdsPracticeGameConfig lcds practice game config
// swagger:model LcdsPracticeGameConfig
type LcdsPracticeGameConfig struct {

	// allow spectators
	AllowSpectators string `json:"allowSpectators,omitempty"`

	// game map
	GameMap *LcdsGameMap `json:"gameMap,omitempty"`

	// game mode
	GameMode string `json:"gameMode,omitempty"`

	// game mutators
	GameMutators []string `json:"gameMutators"`

	// game name
	GameName string `json:"gameName,omitempty"`

	// game password
	GamePassword string `json:"gamePassword,omitempty"`

	// game type config
	GameTypeConfig int32 `json:"gameTypeConfig,omitempty"`

	// max num players
	MaxNumPlayers int32 `json:"maxNumPlayers,omitempty"`

	// passback data packet
	PassbackDataPacket string `json:"passbackDataPacket,omitempty"`

	// passback Url
	PassbackURL string `json:"passbackUrl,omitempty"`

	// region
	Region string `json:"region,omitempty"`
}

// Validate validates this lcds practice game config
func (m *LcdsPracticeGameConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGameMap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LcdsPracticeGameConfig) validateGameMap(formats strfmt.Registry) error {

	if swag.IsZero(m.GameMap) { // not required
		return nil
	}

	if m.GameMap != nil {
		if err := m.GameMap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gameMap")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LcdsPracticeGameConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LcdsPracticeGameConfig) UnmarshalBinary(b []byte) error {
	var res LcdsPracticeGameConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
