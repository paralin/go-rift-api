// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolMatchHistoryMatchHistoryEvent lol match history match history event
// swagger:model LolMatchHistoryMatchHistoryEvent
type LolMatchHistoryMatchHistoryEvent struct {

	// assisting participant ids
	AssistingParticipantIds []int64 `json:"assistingParticipantIds"`

	// building type
	BuildingType string `json:"buildingType,omitempty"`

	// item Id
	ItemID int64 `json:"itemId,omitempty"`

	// killer Id
	KillerID int64 `json:"killerId,omitempty"`

	// lane type
	LaneType string `json:"laneType,omitempty"`

	// monster sub type
	MonsterSubType string `json:"monsterSubType,omitempty"`

	// monster type
	MonsterType string `json:"monsterType,omitempty"`

	// participant Id
	ParticipantID int64 `json:"participantId,omitempty"`

	// position
	Position *LolMatchHistoryMatchHistoryPosition `json:"position,omitempty"`

	// skill slot
	SkillSlot int64 `json:"skillSlot,omitempty"`

	// team Id
	TeamID int64 `json:"teamId,omitempty"`

	// timestamp
	Timestamp int64 `json:"timestamp,omitempty"`

	// tower type
	TowerType string `json:"towerType,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// victim Id
	VictimID int64 `json:"victimId,omitempty"`
}

// Validate validates this lol match history match history event
func (m *LolMatchHistoryMatchHistoryEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolMatchHistoryMatchHistoryEvent) validatePosition(formats strfmt.Registry) error {

	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if m.Position != nil {
		if err := m.Position.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolMatchHistoryMatchHistoryEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolMatchHistoryMatchHistoryEvent) UnmarshalBinary(b []byte) error {
	var res LolMatchHistoryMatchHistoryEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
