// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Position position
// swagger:model Position
type Position string

const (

	// PositionTOP captures enum value "TOP"
	PositionTOP Position = "TOP"

	// PositionMIDDLE captures enum value "MIDDLE"
	PositionMIDDLE Position = "MIDDLE"

	// PositionBOTTOM captures enum value "BOTTOM"
	PositionBOTTOM Position = "BOTTOM"

	// PositionJUNGLE captures enum value "JUNGLE"
	PositionJUNGLE Position = "JUNGLE"

	// PositionUTILITY captures enum value "UTILITY"
	PositionUTILITY Position = "UTILITY"

	// PositionFILL captures enum value "FILL"
	PositionFILL Position = "FILL"

	// PositionUNSELECTED captures enum value "UNSELECTED"
	PositionUNSELECTED Position = "UNSELECTED"
)

// for schema
var positionEnum []interface{}

func init() {
	var res []Position
	if err := json.Unmarshal([]byte(`["TOP","MIDDLE","BOTTOM","JUNGLE","UTILITY","FILL","UNSELECTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		positionEnum = append(positionEnum, v)
	}
}

func (m Position) validatePositionEnum(path, location string, value Position) error {
	if err := validate.Enum(path, location, value, positionEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this position
func (m Position) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePositionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
