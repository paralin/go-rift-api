// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MatchmakingLcdsGameDTO matchmaking lcds game d t o
// swagger:model MatchmakingLcdsGameDTO
type MatchmakingLcdsGameDTO struct {

	// game state
	GameState string `json:"gameState,omitempty"`

	// status of participants
	StatusOfParticipants string `json:"statusOfParticipants,omitempty"`

	// team one
	TeamOne []*MatchmakingLcdsPlayerParticipant `json:"teamOne"`

	// team two
	TeamTwo []*MatchmakingLcdsPlayerParticipant `json:"teamTwo"`

	// terminated condition
	TerminatedCondition string `json:"terminatedCondition,omitempty"`
}

// Validate validates this matchmaking lcds game d t o
func (m *MatchmakingLcdsGameDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTeamOne(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamTwo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MatchmakingLcdsGameDTO) validateTeamOne(formats strfmt.Registry) error {

	if swag.IsZero(m.TeamOne) { // not required
		return nil
	}

	for i := 0; i < len(m.TeamOne); i++ {
		if swag.IsZero(m.TeamOne[i]) { // not required
			continue
		}

		if m.TeamOne[i] != nil {
			if err := m.TeamOne[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("teamOne" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MatchmakingLcdsGameDTO) validateTeamTwo(formats strfmt.Registry) error {

	if swag.IsZero(m.TeamTwo) { // not required
		return nil
	}

	for i := 0; i < len(m.TeamTwo); i++ {
		if swag.IsZero(m.TeamTwo[i]) { // not required
			continue
		}

		if m.TeamTwo[i] != nil {
			if err := m.TeamTwo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("teamTwo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MatchmakingLcdsGameDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MatchmakingLcdsGameDTO) UnmarshalBinary(b []byte) error {
	var res MatchmakingLcdsGameDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
