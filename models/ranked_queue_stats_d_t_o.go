// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// RankedQueueStatsDTO ranked queue stats d t o
// swagger:model RankedQueueStatsDTO
type RankedQueueStatsDTO struct {

	// league points
	LeaguePoints int32 `json:"leaguePoints,omitempty"`

	// losses
	Losses int32 `json:"losses,omitempty"`

	// mini series progress
	MiniSeriesProgress string `json:"miniSeriesProgress,omitempty"`

	// previous season achieved rank
	PreviousSeasonAchievedRank string `json:"previousSeasonAchievedRank,omitempty"`

	// previous season achieved tier
	PreviousSeasonAchievedTier string `json:"previousSeasonAchievedTier,omitempty"`

	// previous season end rank
	PreviousSeasonEndRank string `json:"previousSeasonEndRank,omitempty"`

	// previous season end tier
	PreviousSeasonEndTier string `json:"previousSeasonEndTier,omitempty"`

	// provisional game threshold
	ProvisionalGameThreshold int32 `json:"provisionalGameThreshold,omitempty"`

	// provisional games remaining
	ProvisionalGamesRemaining int32 `json:"provisionalGamesRemaining,omitempty"`

	// queue type
	QueueType string `json:"queueType,omitempty"`

	// rank
	Rank string `json:"rank,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// warnings
	Warnings *RankedQueueWarningsDTO `json:"warnings,omitempty"`

	// wins
	Wins int32 `json:"wins,omitempty"`
}

// Validate validates this ranked queue stats d t o
func (m *RankedQueueStatsDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWarnings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RankedQueueStatsDTO) validateWarnings(formats strfmt.Registry) error {

	if swag.IsZero(m.Warnings) { // not required
		return nil
	}

	if m.Warnings != nil {
		if err := m.Warnings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("warnings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RankedQueueStatsDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RankedQueueStatsDTO) UnmarshalBinary(b []byte) error {
	var res RankedQueueStatsDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
