// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolRegaliaRegaliaSettings lol regalia regalia settings
// swagger:model LolRegaliaRegaliaSettings
type LolRegaliaRegaliaSettings struct {

	// banner type
	BannerType LolRegaliaRegaliaBannerType `json:"bannerType,omitempty"`

	// crest type
	CrestType LolRegaliaRegaliaCrestType `json:"crestType,omitempty"`
}

// Validate validates this lol regalia regalia settings
func (m *LolRegaliaRegaliaSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBannerType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrestType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolRegaliaRegaliaSettings) validateBannerType(formats strfmt.Registry) error {

	if swag.IsZero(m.BannerType) { // not required
		return nil
	}

	if err := m.BannerType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("bannerType")
		}
		return err
	}

	return nil
}

func (m *LolRegaliaRegaliaSettings) validateCrestType(formats strfmt.Registry) error {

	if swag.IsZero(m.CrestType) { // not required
		return nil
	}

	if err := m.CrestType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("crestType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolRegaliaRegaliaSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolRegaliaRegaliaSettings) UnmarshalBinary(b []byte) error {
	var res LolRegaliaRegaliaSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
