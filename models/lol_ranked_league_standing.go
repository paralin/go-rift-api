// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolRankedLeagueStanding lol ranked league standing
// swagger:model LolRankedLeagueStanding
type LolRankedLeagueStanding struct {

	// division
	Division LolRankedLeagueDivision `json:"division,omitempty"`

	// earned regalia reward ids
	EarnedRegaliaRewardIds []string `json:"earnedRegaliaRewardIds"`

	// is provisional
	IsProvisional bool `json:"isProvisional,omitempty"`

	// league points
	LeaguePoints int64 `json:"leaguePoints,omitempty"`

	// losses
	Losses int64 `json:"losses,omitempty"`

	// miniseries results
	MiniseriesResults []LolRankedMiniseries `json:"miniseriesResults"`

	// pending demotion
	PendingDemotion bool `json:"pendingDemotion,omitempty"`

	// pending promotion
	PendingPromotion bool `json:"pendingPromotion,omitempty"`

	// position
	Position int32 `json:"position,omitempty"`

	// position delta
	PositionDelta int32 `json:"positionDelta,omitempty"`

	// previous position
	PreviousPosition int32 `json:"previousPosition,omitempty"`

	// previous season achieved division
	PreviousSeasonAchievedDivision LolRankedLeagueDivision `json:"previousSeasonAchievedDivision,omitempty"`

	// previous season achieved tier
	PreviousSeasonAchievedTier LolRankedLeagueTier `json:"previousSeasonAchievedTier,omitempty"`

	// provisional games remaining
	ProvisionalGamesRemaining int32 `json:"provisionalGamesRemaining,omitempty"`

	// puuid
	Puuid string `json:"puuid,omitempty"`

	// ranked regalia level
	RankedRegaliaLevel int32 `json:"rankedRegaliaLevel,omitempty"`

	// rival name
	RivalName string `json:"rivalName,omitempty"`

	// summoner Id
	SummonerID int64 `json:"summonerId,omitempty"`

	// summoner name
	SummonerName string `json:"summonerName,omitempty"`

	// tier
	Tier LolRankedLeagueTier `json:"tier,omitempty"`

	// wins
	Wins int64 `json:"wins,omitempty"`
}

// Validate validates this lol ranked league standing
func (m *LolRankedLeagueStanding) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiniseriesResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousSeasonAchievedDivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousSeasonAchievedTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolRankedLeagueStanding) validateDivision(formats strfmt.Registry) error {

	if swag.IsZero(m.Division) { // not required
		return nil
	}

	if err := m.Division.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("division")
		}
		return err
	}

	return nil
}

func (m *LolRankedLeagueStanding) validateMiniseriesResults(formats strfmt.Registry) error {

	if swag.IsZero(m.MiniseriesResults) { // not required
		return nil
	}

	for i := 0; i < len(m.MiniseriesResults); i++ {

		if err := m.MiniseriesResults[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("miniseriesResults" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *LolRankedLeagueStanding) validatePreviousSeasonAchievedDivision(formats strfmt.Registry) error {

	if swag.IsZero(m.PreviousSeasonAchievedDivision) { // not required
		return nil
	}

	if err := m.PreviousSeasonAchievedDivision.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("previousSeasonAchievedDivision")
		}
		return err
	}

	return nil
}

func (m *LolRankedLeagueStanding) validatePreviousSeasonAchievedTier(formats strfmt.Registry) error {

	if swag.IsZero(m.PreviousSeasonAchievedTier) { // not required
		return nil
	}

	if err := m.PreviousSeasonAchievedTier.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("previousSeasonAchievedTier")
		}
		return err
	}

	return nil
}

func (m *LolRankedLeagueStanding) validateTier(formats strfmt.Registry) error {

	if swag.IsZero(m.Tier) { // not required
		return nil
	}

	if err := m.Tier.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tier")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolRankedLeagueStanding) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolRankedLeagueStanding) UnmarshalBinary(b []byte) error {
	var res LolRankedLeagueStanding
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
