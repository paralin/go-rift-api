// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolChampSelectChampGridChampion lol champ select champ grid champion
// swagger:model LolChampSelectChampGridChampion
type LolChampSelectChampGridChampion struct {

	// disabled
	Disabled bool `json:"disabled,omitempty"`

	// free to play
	FreeToPlay bool `json:"freeToPlay,omitempty"`

	// free to play for queue
	FreeToPlayForQueue bool `json:"freeToPlayForQueue,omitempty"`

	// free to play reward
	FreeToPlayReward bool `json:"freeToPlayReward,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// mastery chest granted
	MasteryChestGranted bool `json:"masteryChestGranted,omitempty"`

	// mastery level
	MasteryLevel int32 `json:"masteryLevel,omitempty"`

	// mastery points
	MasteryPoints int32 `json:"masteryPoints,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// owned
	Owned bool `json:"owned,omitempty"`

	// positions favorited
	PositionsFavorited []string `json:"positionsFavorited"`

	// rented
	Rented bool `json:"rented,omitempty"`

	// roles
	Roles []string `json:"roles"`

	// selection status
	SelectionStatus *LolChampSelectChampionSelection `json:"selectionStatus,omitempty"`

	// square portrait path
	SquarePortraitPath string `json:"squarePortraitPath,omitempty"`
}

// Validate validates this lol champ select champ grid champion
func (m *LolChampSelectChampGridChampion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelectionStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolChampSelectChampGridChampion) validateSelectionStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.SelectionStatus) { // not required
		return nil
	}

	if m.SelectionStatus != nil {
		if err := m.SelectionStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selectionStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolChampSelectChampGridChampion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolChampSelectChampGridChampion) UnmarshalBinary(b []byte) error {
	var res LolChampSelectChampGridChampion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
