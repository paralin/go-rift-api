// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolPatchComponentState lol patch component state
// swagger:model LolPatchComponentState
type LolPatchComponentState struct {

	// action
	Action LolPatchComponentStateAction `json:"action,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// is corrupted
	IsCorrupted bool `json:"isCorrupted,omitempty"`

	// is up to date
	IsUpToDate bool `json:"isUpToDate,omitempty"`

	// is update available
	IsUpdateAvailable bool `json:"isUpdateAvailable,omitempty"`

	// progress
	Progress *LolPatchComponentActionProgress `json:"progress,omitempty"`

	// time of last up to date check i s o8601
	TimeOfLastUpToDateCheckISO8601 string `json:"timeOfLastUpToDateCheckISO8601,omitempty"`
}

// Validate validates this lol patch component state
func (m *LolPatchComponentState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolPatchComponentState) validateAction(formats strfmt.Registry) error {

	if swag.IsZero(m.Action) { // not required
		return nil
	}

	if err := m.Action.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("action")
		}
		return err
	}

	return nil
}

func (m *LolPatchComponentState) validateProgress(formats strfmt.Registry) error {

	if swag.IsZero(m.Progress) { // not required
		return nil
	}

	if m.Progress != nil {
		if err := m.Progress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("progress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolPatchComponentState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolPatchComponentState) UnmarshalBinary(b []byte) error {
	var res LolPatchComponentState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
