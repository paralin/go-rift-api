// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolClubsPlayerClub lol clubs player club
// swagger:model LolClubsPlayerClub
type LolClubsPlayerClub struct {

	// created
	Created int64 `json:"created,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// is club tag eligible
	IsClubTagEligible bool `json:"isClubTagEligible,omitempty"`

	// jid
	Jid string `json:"jid,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// last modified
	LastModified int64 `json:"lastModified,omitempty"`

	// members
	Members *LolClubsClubMemberLists `json:"members,omitempty"`

	// motd
	Motd string `json:"motd,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// owner
	Owner *LolClubsClubMember `json:"owner,omitempty"`

	// permissions
	Permissions *LolClubsClubPermissions `json:"permissions,omitempty"`

	// primary
	Primary bool `json:"primary,omitempty"`

	// role
	Role LolClubsClubRole `json:"role,omitempty"`

	// tag
	Tag string `json:"tag,omitempty"`
}

// Validate validates this lol clubs player club
func (m *LolClubsPlayerClub) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolClubsPlayerClub) validateMembers(formats strfmt.Registry) error {

	if swag.IsZero(m.Members) { // not required
		return nil
	}

	if m.Members != nil {
		if err := m.Members.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("members")
			}
			return err
		}
	}

	return nil
}

func (m *LolClubsPlayerClub) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *LolClubsPlayerClub) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	if m.Permissions != nil {
		if err := m.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissions")
			}
			return err
		}
	}

	return nil
}

func (m *LolClubsPlayerClub) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if err := m.Role.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("role")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolClubsPlayerClub) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolClubsPlayerClub) UnmarshalBinary(b []byte) error {
	var res LolClubsPlayerClub
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
