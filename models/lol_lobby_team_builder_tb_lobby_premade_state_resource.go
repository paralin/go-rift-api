// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolLobbyTeamBuilderTbLobbyPremadeStateResource lol lobby team builder tb lobby premade state resource
// swagger:model LolLobbyTeamBuilderTbLobbyPremadeStateResource
type LolLobbyTeamBuilderTbLobbyPremadeStateResource struct {

	// auto fill eligible
	AutoFillEligible bool `json:"autoFillEligible,omitempty"`

	// auto fill protected for promos
	AutoFillProtectedForPromos bool `json:"autoFillProtectedForPromos,omitempty"`

	// auto fill protected for streaking
	AutoFillProtectedForStreaking bool `json:"autoFillProtectedForStreaking,omitempty"`

	// backwards to premade transition reason
	BackwardsToPremadeTransitionReason *LolLobbyTeamBuilderTbLobbyBackwardsToPremadeTransitionResource `json:"backwardsToPremadeTransitionReason,omitempty"`

	// captain slot Id
	CaptainSlotID int32 `json:"captainSlotId,omitempty"`

	// draft premade Id
	DraftPremadeID string `json:"draftPremadeId,omitempty"`

	// draft slots
	DraftSlots []*LolLobbyTeamBuilderTbLobbySlotResource `json:"draftSlots"`

	// local player slot Id
	LocalPlayerSlotID int32 `json:"localPlayerSlotId,omitempty"`

	// playable draft positions
	PlayableDraftPositions []string `json:"playableDraftPositions"`

	// premade chat room Id
	PremadeChatRoomID string `json:"premadeChatRoomId,omitempty"`

	// ready state
	ReadyState *LolLobbyTeamBuilderReadyStateV1 `json:"readyState,omitempty"`

	// ready to matchmake
	ReadyToMatchmake bool `json:"readyToMatchmake,omitempty"`

	// show position excluder
	ShowPositionExcluder bool `json:"showPositionExcluder,omitempty"`

	// show position selector
	ShowPositionSelector bool `json:"showPositionSelector,omitempty"`

	// timer
	Timer int64 `json:"timer,omitempty"`
}

// Validate validates this lol lobby team builder tb lobby premade state resource
func (m *LolLobbyTeamBuilderTbLobbyPremadeStateResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackwardsToPremadeTransitionReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDraftSlots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadyState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolLobbyTeamBuilderTbLobbyPremadeStateResource) validateBackwardsToPremadeTransitionReason(formats strfmt.Registry) error {

	if swag.IsZero(m.BackwardsToPremadeTransitionReason) { // not required
		return nil
	}

	if m.BackwardsToPremadeTransitionReason != nil {
		if err := m.BackwardsToPremadeTransitionReason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backwardsToPremadeTransitionReason")
			}
			return err
		}
	}

	return nil
}

func (m *LolLobbyTeamBuilderTbLobbyPremadeStateResource) validateDraftSlots(formats strfmt.Registry) error {

	if swag.IsZero(m.DraftSlots) { // not required
		return nil
	}

	for i := 0; i < len(m.DraftSlots); i++ {
		if swag.IsZero(m.DraftSlots[i]) { // not required
			continue
		}

		if m.DraftSlots[i] != nil {
			if err := m.DraftSlots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("draftSlots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LolLobbyTeamBuilderTbLobbyPremadeStateResource) validateReadyState(formats strfmt.Registry) error {

	if swag.IsZero(m.ReadyState) { // not required
		return nil
	}

	if m.ReadyState != nil {
		if err := m.ReadyState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("readyState")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolLobbyTeamBuilderTbLobbyPremadeStateResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolLobbyTeamBuilderTbLobbyPremadeStateResource) UnmarshalBinary(b []byte) error {
	var res LolLobbyTeamBuilderTbLobbyPremadeStateResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
