// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TracingModuleThreadingModelV1 tracing module threading model v1
// swagger:model TracingModuleThreadingModelV1
type TracingModuleThreadingModelV1 string

const (

	// TracingModuleThreadingModelV1KNone captures enum value "kNone"
	TracingModuleThreadingModelV1KNone TracingModuleThreadingModelV1 = "kNone"

	// TracingModuleThreadingModelV1KMainThread captures enum value "kMainThread"
	TracingModuleThreadingModelV1KMainThread TracingModuleThreadingModelV1 = "kMainThread"

	// TracingModuleThreadingModelV1KDedicated captures enum value "kDedicated"
	TracingModuleThreadingModelV1KDedicated TracingModuleThreadingModelV1 = "kDedicated"

	// TracingModuleThreadingModelV1KSequential captures enum value "kSequential"
	TracingModuleThreadingModelV1KSequential TracingModuleThreadingModelV1 = "kSequential"

	// TracingModuleThreadingModelV1KConcurrent captures enum value "kConcurrent"
	TracingModuleThreadingModelV1KConcurrent TracingModuleThreadingModelV1 = "kConcurrent"

	// TracingModuleThreadingModelV1KParallel captures enum value "kParallel"
	TracingModuleThreadingModelV1KParallel TracingModuleThreadingModelV1 = "kParallel"
)

// for schema
var tracingModuleThreadingModelV1Enum []interface{}

func init() {
	var res []TracingModuleThreadingModelV1
	if err := json.Unmarshal([]byte(`["kNone","kMainThread","kDedicated","kSequential","kConcurrent","kParallel"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tracingModuleThreadingModelV1Enum = append(tracingModuleThreadingModelV1Enum, v)
	}
}

func (m TracingModuleThreadingModelV1) validateTracingModuleThreadingModelV1Enum(path, location string, value TracingModuleThreadingModelV1) error {
	if err := validate.Enum(path, location, value, tracingModuleThreadingModelV1Enum); err != nil {
		return err
	}
	return nil
}

// Validate validates this tracing module threading model v1
func (m TracingModuleThreadingModelV1) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTracingModuleThreadingModelV1Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
