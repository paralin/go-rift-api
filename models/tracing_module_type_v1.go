// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TracingModuleTypeV1 tracing module type v1
// swagger:model TracingModuleTypeV1
type TracingModuleTypeV1 string

const (

	// TracingModuleTypeV1KUnknown captures enum value "kUnknown"
	TracingModuleTypeV1KUnknown TracingModuleTypeV1 = "kUnknown"

	// TracingModuleTypeV1KRemoteAppModule captures enum value "kRemoteAppModule"
	TracingModuleTypeV1KRemoteAppModule TracingModuleTypeV1 = "kRemoteAppModule"

	// TracingModuleTypeV1KBackEndPlugin captures enum value "kBackEndPlugin"
	TracingModuleTypeV1KBackEndPlugin TracingModuleTypeV1 = "kBackEndPlugin"

	// TracingModuleTypeV1KBackendOther captures enum value "kBackendOther"
	TracingModuleTypeV1KBackendOther TracingModuleTypeV1 = "kBackendOther"

	// TracingModuleTypeV1KFrontEndPlugin captures enum value "kFrontEndPlugin"
	TracingModuleTypeV1KFrontEndPlugin TracingModuleTypeV1 = "kFrontEndPlugin"

	// TracingModuleTypeV1KRemotingSource captures enum value "kRemotingSource"
	TracingModuleTypeV1KRemotingSource TracingModuleTypeV1 = "kRemotingSource"
)

// for schema
var tracingModuleTypeV1Enum []interface{}

func init() {
	var res []TracingModuleTypeV1
	if err := json.Unmarshal([]byte(`["kUnknown","kRemoteAppModule","kBackEndPlugin","kBackendOther","kFrontEndPlugin","kRemotingSource"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tracingModuleTypeV1Enum = append(tracingModuleTypeV1Enum, v)
	}
}

func (m TracingModuleTypeV1) validateTracingModuleTypeV1Enum(path, location string, value TracingModuleTypeV1) error {
	if err := validate.Enum(path, location, value, tracingModuleTypeV1Enum); err != nil {
		return err
	}
	return nil
}

// Validate validates this tracing module type v1
func (m TracingModuleTypeV1) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTracingModuleTypeV1Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
