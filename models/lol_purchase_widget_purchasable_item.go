// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolPurchaseWidgetPurchasableItem lol purchase widget purchasable item
// swagger:model LolPurchaseWidgetPurchasableItem
type LolPurchaseWidgetPurchasableItem struct {

	// bundled items
	BundledItems []*LolPurchaseWidgetItemDefinition `json:"bundledItems"`

	// dependencies
	Dependencies []*LolPurchaseWidgetItemDefinition `json:"dependencies"`

	// item
	Item *LolPurchaseWidgetItemDefinition `json:"item,omitempty"`

	// purchase options
	PurchaseOptions []*LolPurchaseWidgetPurchaseOption `json:"purchaseOptions"`

	// sale
	Sale *LolPurchaseWidgetItemSale `json:"sale,omitempty"`

	// validation errors
	ValidationErrors []*LolPurchaseWidgetValidationErrorEntry `json:"validationErrors"`
}

// Validate validates this lol purchase widget purchasable item
func (m *LolPurchaseWidgetPurchasableItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBundledItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurchaseOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidationErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolPurchaseWidgetPurchasableItem) validateBundledItems(formats strfmt.Registry) error {

	if swag.IsZero(m.BundledItems) { // not required
		return nil
	}

	for i := 0; i < len(m.BundledItems); i++ {
		if swag.IsZero(m.BundledItems[i]) { // not required
			continue
		}

		if m.BundledItems[i] != nil {
			if err := m.BundledItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bundledItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LolPurchaseWidgetPurchasableItem) validateDependencies(formats strfmt.Registry) error {

	if swag.IsZero(m.Dependencies) { // not required
		return nil
	}

	for i := 0; i < len(m.Dependencies); i++ {
		if swag.IsZero(m.Dependencies[i]) { // not required
			continue
		}

		if m.Dependencies[i] != nil {
			if err := m.Dependencies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependencies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LolPurchaseWidgetPurchasableItem) validateItem(formats strfmt.Registry) error {

	if swag.IsZero(m.Item) { // not required
		return nil
	}

	if m.Item != nil {
		if err := m.Item.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("item")
			}
			return err
		}
	}

	return nil
}

func (m *LolPurchaseWidgetPurchasableItem) validatePurchaseOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.PurchaseOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.PurchaseOptions); i++ {
		if swag.IsZero(m.PurchaseOptions[i]) { // not required
			continue
		}

		if m.PurchaseOptions[i] != nil {
			if err := m.PurchaseOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("purchaseOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LolPurchaseWidgetPurchasableItem) validateSale(formats strfmt.Registry) error {

	if swag.IsZero(m.Sale) { // not required
		return nil
	}

	if m.Sale != nil {
		if err := m.Sale.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sale")
			}
			return err
		}
	}

	return nil
}

func (m *LolPurchaseWidgetPurchasableItem) validateValidationErrors(formats strfmt.Registry) error {

	if swag.IsZero(m.ValidationErrors) { // not required
		return nil
	}

	for i := 0; i < len(m.ValidationErrors); i++ {
		if swag.IsZero(m.ValidationErrors[i]) { // not required
			continue
		}

		if m.ValidationErrors[i] != nil {
			if err := m.ValidationErrors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("validationErrors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolPurchaseWidgetPurchasableItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolPurchaseWidgetPurchasableItem) UnmarshalBinary(b []byte) error {
	var res LolPurchaseWidgetPurchasableItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
