// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// LolRankedNotificationDisplayType lol ranked notification display type
// swagger:model LolRankedNotificationDisplayType
type LolRankedNotificationDisplayType string

const (

	// LolRankedNotificationDisplayTypeNONE captures enum value "NONE"
	LolRankedNotificationDisplayTypeNONE LolRankedNotificationDisplayType = "NONE"

	// LolRankedNotificationDisplayTypeTOAST captures enum value "TOAST"
	LolRankedNotificationDisplayTypeTOAST LolRankedNotificationDisplayType = "TOAST"

	// LolRankedNotificationDisplayTypeMODAL captures enum value "MODAL"
	LolRankedNotificationDisplayTypeMODAL LolRankedNotificationDisplayType = "MODAL"

	// LolRankedNotificationDisplayTypeVIGNETTE captures enum value "VIGNETTE"
	LolRankedNotificationDisplayTypeVIGNETTE LolRankedNotificationDisplayType = "VIGNETTE"
)

// for schema
var lolRankedNotificationDisplayTypeEnum []interface{}

func init() {
	var res []LolRankedNotificationDisplayType
	if err := json.Unmarshal([]byte(`["NONE","TOAST","MODAL","VIGNETTE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lolRankedNotificationDisplayTypeEnum = append(lolRankedNotificationDisplayTypeEnum, v)
	}
}

func (m LolRankedNotificationDisplayType) validateLolRankedNotificationDisplayTypeEnum(path, location string, value LolRankedNotificationDisplayType) error {
	if err := validate.Enum(path, location, value, lolRankedNotificationDisplayTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this lol ranked notification display type
func (m LolRankedNotificationDisplayType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLolRankedNotificationDisplayTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
