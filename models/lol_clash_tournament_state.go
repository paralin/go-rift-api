// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// LolClashTournamentState lol clash tournament state
// swagger:model LolClashTournamentState
type LolClashTournamentState string

const (

	// LolClashTournamentStateIDLE captures enum value "IDLE"
	LolClashTournamentStateIDLE LolClashTournamentState = "IDLE"

	// LolClashTournamentStateLOCKIN captures enum value "LOCK_IN"
	LolClashTournamentStateLOCKIN LolClashTournamentState = "LOCK_IN"

	// LolClashTournamentStateSCOUTING captures enum value "SCOUTING"
	LolClashTournamentStateSCOUTING LolClashTournamentState = "SCOUTING"

	// LolClashTournamentStateINGAME captures enum value "IN_GAME"
	LolClashTournamentStateINGAME LolClashTournamentState = "IN_GAME"

	// LolClashTournamentStateRESULTS captures enum value "RESULTS"
	LolClashTournamentStateRESULTS LolClashTournamentState = "RESULTS"
)

// for schema
var lolClashTournamentStateEnum []interface{}

func init() {
	var res []LolClashTournamentState
	if err := json.Unmarshal([]byte(`["IDLE","LOCK_IN","SCOUTING","IN_GAME","RESULTS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lolClashTournamentStateEnum = append(lolClashTournamentStateEnum, v)
	}
}

func (m LolClashTournamentState) validateLolClashTournamentStateEnum(path, location string, value LolClashTournamentState) error {
	if err := validate.Enum(path, location, value, lolClashTournamentStateEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this lol clash tournament state
func (m LolClashTournamentState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLolClashTournamentStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
