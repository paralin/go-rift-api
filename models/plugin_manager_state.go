// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// PluginManagerState plugin manager state
// swagger:model PluginManagerState
type PluginManagerState string

const (

	// PluginManagerStateNotReady captures enum value "NotReady"
	PluginManagerStateNotReady PluginManagerState = "NotReady"

	// PluginManagerStatePluginsInitialized captures enum value "PluginsInitialized"
	PluginManagerStatePluginsInitialized PluginManagerState = "PluginsInitialized"
)

// for schema
var pluginManagerStateEnum []interface{}

func init() {
	var res []PluginManagerState
	if err := json.Unmarshal([]byte(`["NotReady","PluginsInitialized"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pluginManagerStateEnum = append(pluginManagerStateEnum, v)
	}
}

func (m PluginManagerState) validatePluginManagerStateEnum(path, location string, value PluginManagerState) error {
	if err := validate.Enum(path, location, value, pluginManagerStateEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this plugin manager state
func (m PluginManagerState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePluginManagerStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
