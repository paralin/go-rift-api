// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PluginResource plugin resource
// swagger:model PluginResource
type PluginResource struct {

	// app
	App string `json:"app,omitempty"`

	// asset bundle names
	AssetBundleNames []string `json:"assetBundleNames"`

	// dependencies
	Dependencies []*PluginResourceContract `json:"dependencies"`

	// feature
	Feature string `json:"feature,omitempty"`

	// full name
	FullName string `json:"fullName,omitempty"`

	// implemented contracts
	ImplementedContracts []*PluginResourceContract `json:"implementedContracts"`

	// mounted asset bundles
	MountedAssetBundles map[string]string `json:"mountedAssetBundles,omitempty"`

	// order w a d file mounted
	OrderWADFileMounted int32 `json:"orderWADFileMounted,omitempty"`

	// plugin info Api sem ver
	PluginInfoAPISemVer string `json:"pluginInfoApiSemVer,omitempty"`

	// short name
	ShortName string `json:"shortName,omitempty"`

	// subtype
	Subtype string `json:"subtype,omitempty"`

	// supertype
	Supertype string `json:"supertype,omitempty"`

	// threading model
	ThreadingModel string `json:"threadingModel,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this plugin resource
func (m *PluginResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImplementedContracts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PluginResource) validateDependencies(formats strfmt.Registry) error {

	if swag.IsZero(m.Dependencies) { // not required
		return nil
	}

	for i := 0; i < len(m.Dependencies); i++ {
		if swag.IsZero(m.Dependencies[i]) { // not required
			continue
		}

		if m.Dependencies[i] != nil {
			if err := m.Dependencies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependencies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PluginResource) validateImplementedContracts(formats strfmt.Registry) error {

	if swag.IsZero(m.ImplementedContracts) { // not required
		return nil
	}

	for i := 0; i < len(m.ImplementedContracts); i++ {
		if swag.IsZero(m.ImplementedContracts[i]) { // not required
			continue
		}

		if m.ImplementedContracts[i] != nil {
			if err := m.ImplementedContracts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("implementedContracts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PluginResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PluginResource) UnmarshalBinary(b []byte) error {
	var res PluginResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
