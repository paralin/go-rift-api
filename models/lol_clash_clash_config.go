// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolClashClashConfig lol clash clash config
// swagger:model LolClashClashConfig
type LolClashClashConfig struct {

	// check parties registration
	CheckPartiesRegistration bool `json:"CheckPartiesRegistration,omitempty"`

	// dark mode entitlement
	DarkModeEntitlement string `json:"DarkModeEntitlement,omitempty"`

	// disabled events
	DisabledEvents []string `json:"DisabledEvents"`

	// enabled state
	EnabledState LolClashClashState `json:"EnabledState,omitempty"`

	// event sending enabled
	EventSendingEnabled bool `json:"EventSendingEnabled,omitempty"`

	// honor level required
	HonorLevelRequired int32 `json:"HonorLevelRequired,omitempty"`

	// honor refresh retry seconds
	HonorRefreshRetrySeconds int32 `json:"HonorRefreshRetrySeconds,omitempty"`

	// icon config
	IconConfig string `json:"IconConfig,omitempty"`

	// is playmode restriction enabled
	IsPlaymodeRestrictionEnabled bool `json:"IsPlaymodeRestrictionEnabled,omitempty"`

	// max time before lockin notify seconds
	MaxTimeBeforeLockinNotifySeconds int32 `json:"MaxTimeBeforeLockinNotifySeconds,omitempty"`

	// min clash notifications summoner level
	MinClashNotificationsSummonerLevel int32 `json:"MinClashNotificationsSummonerLevel,omitempty"`

	// min clash summoner level
	MinClashSummonerLevel int32 `json:"MinClashSummonerLevel,omitempty"`

	// reward grant retry interval seconds
	RewardGrantRetryIntervalSeconds int32 `json:"RewardGrantRetryIntervalSeconds,omitempty"`

	// use individual entitlement
	UseIndividualEntitlement bool `json:"UseIndividualEntitlement,omitempty"`

	// visibility
	Visibility LolClashClashVisibility `json:"Visibility,omitempty"`

	// voice eob quit delay seconds
	VoiceEobQuitDelaySeconds int32 `json:"VoiceEobQuitDelaySeconds,omitempty"`

	// voice no delay auto start seconds
	VoiceNoDelayAutoStartSeconds int32 `json:"VoiceNoDelayAutoStartSeconds,omitempty"`

	// voice random start max seconds
	VoiceRandomStartMaxSeconds int32 `json:"VoiceRandomStartMaxSeconds,omitempty"`

	// voice random start min seconds
	VoiceRandomStartMinSeconds int32 `json:"VoiceRandomStartMinSeconds,omitempty"`

	// voice retry count limit
	VoiceRetryCountLimit int32 `json:"VoiceRetryCountLimit,omitempty"`

	// voice retry delay seconds
	VoiceRetryDelaySeconds int32 `json:"VoiceRetryDelaySeconds,omitempty"`
}

// Validate validates this lol clash clash config
func (m *LolClashClashConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabledState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolClashClashConfig) validateEnabledState(formats strfmt.Registry) error {

	if swag.IsZero(m.EnabledState) { // not required
		return nil
	}

	if err := m.EnabledState.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("EnabledState")
		}
		return err
	}

	return nil
}

func (m *LolClashClashConfig) validateVisibility(formats strfmt.Registry) error {

	if swag.IsZero(m.Visibility) { // not required
		return nil
	}

	if err := m.Visibility.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Visibility")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolClashClashConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolClashClashConfig) UnmarshalBinary(b []byte) error {
	var res LolClashClashConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
