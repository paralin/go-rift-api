// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolChatMultiGamePresenceUpdate lol chat multi game presence update
// swagger:model LolChatMultiGamePresenceUpdate
type LolChatMultiGamePresenceUpdate struct {

	// msg
	Msg string `json:"msg,omitempty"`

	// private
	Private string `json:"private,omitempty"`

	// private jwt
	PrivateJwt string `json:"privateJwt,omitempty"`

	// shared
	Shared *LolChatMultiGamePresenceSharedPayload `json:"shared,omitempty"`

	// shared jwt
	SharedJwt string `json:"sharedJwt,omitempty"`

	// state
	State LolChatAccountState `json:"state,omitempty"`
}

// Validate validates this lol chat multi game presence update
func (m *LolChatMultiGamePresenceUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateShared(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolChatMultiGamePresenceUpdate) validateShared(formats strfmt.Registry) error {

	if swag.IsZero(m.Shared) { // not required
		return nil
	}

	if m.Shared != nil {
		if err := m.Shared.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shared")
			}
			return err
		}
	}

	return nil
}

func (m *LolChatMultiGamePresenceUpdate) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolChatMultiGamePresenceUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolChatMultiGamePresenceUpdate) UnmarshalBinary(b []byte) error {
	var res LolChatMultiGamePresenceUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
