// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PluginMetadataResource plugin metadata resource
// swagger:model PluginMetadataResource
type PluginMetadataResource struct {

	// app
	App string `json:"app,omitempty"`

	// feature
	Feature string `json:"feature,omitempty"`

	// global asset bundles
	GlobalAssetBundles []string `json:"globalAssetBundles"`

	// has bundled assets
	HasBundledAssets bool `json:"hasBundledAssets,omitempty"`

	// implements
	Implements map[string]string `json:"implements,omitempty"`

	// mock
	Mock string `json:"mock,omitempty"`

	// per locale asset bundles
	PerLocaleAssetBundles map[string]interface{} `json:"perLocaleAssetBundles,omitempty"`

	// subtype
	Subtype string `json:"subtype,omitempty"`

	// threading
	Threading PluginThreadingModel `json:"threading,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this plugin metadata resource
func (m *PluginMetadataResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateThreading(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PluginMetadataResource) validateThreading(formats strfmt.Registry) error {

	if swag.IsZero(m.Threading) { // not required
		return nil
	}

	if err := m.Threading.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("threading")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PluginMetadataResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PluginMetadataResource) UnmarshalBinary(b []byte) error {
	var res PluginMetadataResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
