// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// RankedScoutingDTO ranked scouting d t o
// swagger:model RankedScoutingDTO
type RankedScoutingDTO struct {

	// player Id
	PlayerID int64 `json:"playerId,omitempty"`

	// top masteries
	TopMasteries []*ChampionMasteryPublicDTO `json:"topMasteries"`

	// top season champions
	TopSeasonChampions []*ChampionScoutingDTO `json:"topSeasonChampions"`

	// total mastery score
	TotalMasteryScore int64 `json:"totalMasteryScore,omitempty"`
}

// Validate validates this ranked scouting d t o
func (m *RankedScoutingDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTopMasteries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopSeasonChampions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RankedScoutingDTO) validateTopMasteries(formats strfmt.Registry) error {

	if swag.IsZero(m.TopMasteries) { // not required
		return nil
	}

	for i := 0; i < len(m.TopMasteries); i++ {
		if swag.IsZero(m.TopMasteries[i]) { // not required
			continue
		}

		if m.TopMasteries[i] != nil {
			if err := m.TopMasteries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("topMasteries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RankedScoutingDTO) validateTopSeasonChampions(formats strfmt.Registry) error {

	if swag.IsZero(m.TopSeasonChampions) { // not required
		return nil
	}

	for i := 0; i < len(m.TopSeasonChampions); i++ {
		if swag.IsZero(m.TopSeasonChampions[i]) { // not required
			continue
		}

		if m.TopSeasonChampions[i] != nil {
			if err := m.TopSeasonChampions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("topSeasonChampions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RankedScoutingDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RankedScoutingDTO) UnmarshalBinary(b []byte) error {
	var res RankedScoutingDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
