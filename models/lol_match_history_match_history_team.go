// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolMatchHistoryMatchHistoryTeam lol match history match history team
// swagger:model LolMatchHistoryMatchHistoryTeam
type LolMatchHistoryMatchHistoryTeam struct {

	// bans
	Bans []*LolMatchHistoryMatchHistoryTeamBan `json:"bans"`

	// baron kills
	BaronKills int32 `json:"baronKills,omitempty"`

	// dominion victory score
	DominionVictoryScore int32 `json:"dominionVictoryScore,omitempty"`

	// dragon kills
	DragonKills int32 `json:"dragonKills,omitempty"`

	// first baron
	FirstBaron bool `json:"firstBaron,omitempty"`

	// first blood
	FirstBlood bool `json:"firstBlood,omitempty"`

	// first dargon
	FirstDargon bool `json:"firstDargon,omitempty"`

	// first inhibitor
	FirstInhibitor bool `json:"firstInhibitor,omitempty"`

	// first tower
	FirstTower bool `json:"firstTower,omitempty"`

	// inhibitor kills
	InhibitorKills int32 `json:"inhibitorKills,omitempty"`

	// rift herald kills
	RiftHeraldKills int32 `json:"riftHeraldKills,omitempty"`

	// team Id
	TeamID int64 `json:"teamId,omitempty"`

	// tower kills
	TowerKills int32 `json:"towerKills,omitempty"`

	// vilemaw kills
	VilemawKills int32 `json:"vilemawKills,omitempty"`

	// win
	Win string `json:"win,omitempty"`
}

// Validate validates this lol match history match history team
func (m *LolMatchHistoryMatchHistoryTeam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBans(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolMatchHistoryMatchHistoryTeam) validateBans(formats strfmt.Registry) error {

	if swag.IsZero(m.Bans) { // not required
		return nil
	}

	for i := 0; i < len(m.Bans); i++ {
		if swag.IsZero(m.Bans[i]) { // not required
			continue
		}

		if m.Bans[i] != nil {
			if err := m.Bans[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolMatchHistoryMatchHistoryTeam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolMatchHistoryMatchHistoryTeam) UnmarshalBinary(b []byte) error {
	var res LolMatchHistoryMatchHistoryTeam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
