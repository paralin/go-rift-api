// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolLootPlayerLoot lol loot player loot
// swagger:model LolLootPlayerLoot
type LolLootPlayerLoot struct {

	// asset
	Asset string `json:"asset,omitempty"`

	// count
	Count int32 `json:"count,omitempty"`

	// disenchant loot name
	DisenchantLootName string `json:"disenchantLootName,omitempty"`

	// disenchant value
	DisenchantValue int32 `json:"disenchantValue,omitempty"`

	// display categories
	DisplayCategories string `json:"displayCategories,omitempty"`

	// expiry time
	ExpiryTime int64 `json:"expiryTime,omitempty"`

	// is new
	IsNew bool `json:"isNew,omitempty"`

	// is rental
	IsRental bool `json:"isRental,omitempty"`

	// item desc
	ItemDesc string `json:"itemDesc,omitempty"`

	// item status
	ItemStatus LolLootItemOwnershipStatus `json:"itemStatus,omitempty"`

	// localized description
	LocalizedDescription string `json:"localizedDescription,omitempty"`

	// localized name
	LocalizedName string `json:"localizedName,omitempty"`

	// localized recipe subtitle
	LocalizedRecipeSubtitle string `json:"localizedRecipeSubtitle,omitempty"`

	// localized recipe title
	LocalizedRecipeTitle string `json:"localizedRecipeTitle,omitempty"`

	// loot Id
	LootID string `json:"lootId,omitempty"`

	// loot name
	LootName string `json:"lootName,omitempty"`

	// parent item status
	ParentItemStatus LolLootItemOwnershipStatus `json:"parentItemStatus,omitempty"`

	// parent store item Id
	ParentStoreItemID int32 `json:"parentStoreItemId,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// redeemable status
	RedeemableStatus LolLootRedeemableStatus `json:"redeemableStatus,omitempty"`

	// ref Id
	RefID string `json:"refId,omitempty"`

	// rental games
	RentalGames int32 `json:"rentalGames,omitempty"`

	// rental seconds
	RentalSeconds int64 `json:"rentalSeconds,omitempty"`

	// shadow path
	ShadowPath string `json:"shadowPath,omitempty"`

	// splash path
	SplashPath string `json:"splashPath,omitempty"`

	// store item Id
	StoreItemID int32 `json:"storeItemId,omitempty"`

	// tags
	Tags string `json:"tags,omitempty"`

	// tile path
	TilePath string `json:"tilePath,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// upgrade essence name
	UpgradeEssenceName string `json:"upgradeEssenceName,omitempty"`

	// upgrade essence value
	UpgradeEssenceValue int32 `json:"upgradeEssenceValue,omitempty"`

	// upgrade loot name
	UpgradeLootName string `json:"upgradeLootName,omitempty"`

	// value
	Value int32 `json:"value,omitempty"`
}

// Validate validates this lol loot player loot
func (m *LolLootPlayerLoot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItemStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentItemStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedeemableStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolLootPlayerLoot) validateItemStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ItemStatus) { // not required
		return nil
	}

	if err := m.ItemStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("itemStatus")
		}
		return err
	}

	return nil
}

func (m *LolLootPlayerLoot) validateParentItemStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ParentItemStatus) { // not required
		return nil
	}

	if err := m.ParentItemStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("parentItemStatus")
		}
		return err
	}

	return nil
}

func (m *LolLootPlayerLoot) validateRedeemableStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.RedeemableStatus) { // not required
		return nil
	}

	if err := m.RedeemableStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("redeemableStatus")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolLootPlayerLoot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolLootPlayerLoot) UnmarshalBinary(b []byte) error {
	var res LolLootPlayerLoot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
