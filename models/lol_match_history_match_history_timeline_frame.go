// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LolMatchHistoryMatchHistoryTimelineFrame lol match history match history timeline frame
// swagger:model LolMatchHistoryMatchHistoryTimelineFrame
type LolMatchHistoryMatchHistoryTimelineFrame struct {

	// events
	Events []*LolMatchHistoryMatchHistoryEvent `json:"events"`

	// participant frames
	ParticipantFrames map[string]LolMatchHistoryMatchHistoryParticipantFrame `json:"participantFrames,omitempty"`

	// timestamp
	Timestamp int64 `json:"timestamp,omitempty"`
}

// Validate validates this lol match history match history timeline frame
func (m *LolMatchHistoryMatchHistoryTimelineFrame) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParticipantFrames(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolMatchHistoryMatchHistoryTimelineFrame) validateEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.Events) { // not required
		return nil
	}

	for i := 0; i < len(m.Events); i++ {
		if swag.IsZero(m.Events[i]) { // not required
			continue
		}

		if m.Events[i] != nil {
			if err := m.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LolMatchHistoryMatchHistoryTimelineFrame) validateParticipantFrames(formats strfmt.Registry) error {

	if swag.IsZero(m.ParticipantFrames) { // not required
		return nil
	}

	for k := range m.ParticipantFrames {

		if err := validate.Required("participantFrames"+"."+k, "body", m.ParticipantFrames[k]); err != nil {
			return err
		}
		if val, ok := m.ParticipantFrames[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolMatchHistoryMatchHistoryTimelineFrame) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolMatchHistoryMatchHistoryTimelineFrame) UnmarshalBinary(b []byte) error {
	var res LolMatchHistoryMatchHistoryTimelineFrame
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
