// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolPerksChampSelectSession lol perks champ select session
// swagger:model LolPerksChampSelectSession
type LolPerksChampSelectSession struct {

	// actions
	Actions []interface{} `json:"actions"`

	// bans
	Bans *LolPerksChampSelectBannedChampions `json:"bans,omitempty"`

	// chat details
	ChatDetails *LolPerksChampSelectChatRoomDetails `json:"chatDetails,omitempty"`

	// is spectating
	IsSpectating bool `json:"isSpectating,omitempty"`

	// local player cell Id
	LocalPlayerCellID int64 `json:"localPlayerCellId,omitempty"`

	// my team
	MyTeam []*LolPerksChampSelectPlayerSelection `json:"myTeam"`

	// their team
	TheirTeam []*LolPerksChampSelectPlayerSelection `json:"theirTeam"`

	// timer
	Timer *LolPerksChampSelectTimer `json:"timer,omitempty"`

	// trades
	Trades []*LolPerksChampSelectTradeContract `json:"trades"`
}

// Validate validates this lol perks champ select session
func (m *LolPerksChampSelectSession) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBans(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChatDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMyTeam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTheirTeam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrades(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolPerksChampSelectSession) validateBans(formats strfmt.Registry) error {

	if swag.IsZero(m.Bans) { // not required
		return nil
	}

	if m.Bans != nil {
		if err := m.Bans.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bans")
			}
			return err
		}
	}

	return nil
}

func (m *LolPerksChampSelectSession) validateChatDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.ChatDetails) { // not required
		return nil
	}

	if m.ChatDetails != nil {
		if err := m.ChatDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chatDetails")
			}
			return err
		}
	}

	return nil
}

func (m *LolPerksChampSelectSession) validateMyTeam(formats strfmt.Registry) error {

	if swag.IsZero(m.MyTeam) { // not required
		return nil
	}

	for i := 0; i < len(m.MyTeam); i++ {
		if swag.IsZero(m.MyTeam[i]) { // not required
			continue
		}

		if m.MyTeam[i] != nil {
			if err := m.MyTeam[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("myTeam" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LolPerksChampSelectSession) validateTheirTeam(formats strfmt.Registry) error {

	if swag.IsZero(m.TheirTeam) { // not required
		return nil
	}

	for i := 0; i < len(m.TheirTeam); i++ {
		if swag.IsZero(m.TheirTeam[i]) { // not required
			continue
		}

		if m.TheirTeam[i] != nil {
			if err := m.TheirTeam[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("theirTeam" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LolPerksChampSelectSession) validateTimer(formats strfmt.Registry) error {

	if swag.IsZero(m.Timer) { // not required
		return nil
	}

	if m.Timer != nil {
		if err := m.Timer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timer")
			}
			return err
		}
	}

	return nil
}

func (m *LolPerksChampSelectSession) validateTrades(formats strfmt.Registry) error {

	if swag.IsZero(m.Trades) { // not required
		return nil
	}

	for i := 0; i < len(m.Trades); i++ {
		if swag.IsZero(m.Trades[i]) { // not required
			continue
		}

		if m.Trades[i] != nil {
			if err := m.Trades[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trades" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolPerksChampSelectSession) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolPerksChampSelectSession) UnmarshalBinary(b []byte) error {
	var res LolPerksChampSelectSession
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
