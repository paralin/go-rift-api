// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// LolNpeTutorialPathGameflowPhase lol npe tutorial path gameflow phase
// swagger:model LolNpeTutorialPathGameflowPhase
type LolNpeTutorialPathGameflowPhase string

const (

	// LolNpeTutorialPathGameflowPhaseNone captures enum value "None"
	LolNpeTutorialPathGameflowPhaseNone LolNpeTutorialPathGameflowPhase = "None"

	// LolNpeTutorialPathGameflowPhaseLobby captures enum value "Lobby"
	LolNpeTutorialPathGameflowPhaseLobby LolNpeTutorialPathGameflowPhase = "Lobby"

	// LolNpeTutorialPathGameflowPhaseMatchmaking captures enum value "Matchmaking"
	LolNpeTutorialPathGameflowPhaseMatchmaking LolNpeTutorialPathGameflowPhase = "Matchmaking"

	// LolNpeTutorialPathGameflowPhaseCheckedIntoTournament captures enum value "CheckedIntoTournament"
	LolNpeTutorialPathGameflowPhaseCheckedIntoTournament LolNpeTutorialPathGameflowPhase = "CheckedIntoTournament"

	// LolNpeTutorialPathGameflowPhaseReadyCheck captures enum value "ReadyCheck"
	LolNpeTutorialPathGameflowPhaseReadyCheck LolNpeTutorialPathGameflowPhase = "ReadyCheck"

	// LolNpeTutorialPathGameflowPhaseChampSelect captures enum value "ChampSelect"
	LolNpeTutorialPathGameflowPhaseChampSelect LolNpeTutorialPathGameflowPhase = "ChampSelect"

	// LolNpeTutorialPathGameflowPhaseGameStart captures enum value "GameStart"
	LolNpeTutorialPathGameflowPhaseGameStart LolNpeTutorialPathGameflowPhase = "GameStart"

	// LolNpeTutorialPathGameflowPhaseFailedToLaunch captures enum value "FailedToLaunch"
	LolNpeTutorialPathGameflowPhaseFailedToLaunch LolNpeTutorialPathGameflowPhase = "FailedToLaunch"

	// LolNpeTutorialPathGameflowPhaseInProgress captures enum value "InProgress"
	LolNpeTutorialPathGameflowPhaseInProgress LolNpeTutorialPathGameflowPhase = "InProgress"

	// LolNpeTutorialPathGameflowPhaseReconnect captures enum value "Reconnect"
	LolNpeTutorialPathGameflowPhaseReconnect LolNpeTutorialPathGameflowPhase = "Reconnect"

	// LolNpeTutorialPathGameflowPhaseWaitingForStats captures enum value "WaitingForStats"
	LolNpeTutorialPathGameflowPhaseWaitingForStats LolNpeTutorialPathGameflowPhase = "WaitingForStats"

	// LolNpeTutorialPathGameflowPhasePreEndOfGame captures enum value "PreEndOfGame"
	LolNpeTutorialPathGameflowPhasePreEndOfGame LolNpeTutorialPathGameflowPhase = "PreEndOfGame"

	// LolNpeTutorialPathGameflowPhaseEndOfGame captures enum value "EndOfGame"
	LolNpeTutorialPathGameflowPhaseEndOfGame LolNpeTutorialPathGameflowPhase = "EndOfGame"

	// LolNpeTutorialPathGameflowPhaseTerminatedInError captures enum value "TerminatedInError"
	LolNpeTutorialPathGameflowPhaseTerminatedInError LolNpeTutorialPathGameflowPhase = "TerminatedInError"
)

// for schema
var lolNpeTutorialPathGameflowPhaseEnum []interface{}

func init() {
	var res []LolNpeTutorialPathGameflowPhase
	if err := json.Unmarshal([]byte(`["None","Lobby","Matchmaking","CheckedIntoTournament","ReadyCheck","ChampSelect","GameStart","FailedToLaunch","InProgress","Reconnect","WaitingForStats","PreEndOfGame","EndOfGame","TerminatedInError"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lolNpeTutorialPathGameflowPhaseEnum = append(lolNpeTutorialPathGameflowPhaseEnum, v)
	}
}

func (m LolNpeTutorialPathGameflowPhase) validateLolNpeTutorialPathGameflowPhaseEnum(path, location string, value LolNpeTutorialPathGameflowPhase) error {
	if err := validate.Enum(path, location, value, lolNpeTutorialPathGameflowPhaseEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this lol npe tutorial path gameflow phase
func (m LolNpeTutorialPathGameflowPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLolNpeTutorialPathGameflowPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
