// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolMapsMaps lol maps maps
// swagger:model LolMapsMaps
type LolMapsMaps struct {

	// assets
	Assets map[string]string `json:"assets,omitempty"`

	// categorized content bundles
	CategorizedContentBundles interface{} `json:"categorizedContentBundles,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// game mode
	GameMode string `json:"gameMode,omitempty"`

	// game mode description
	GameModeDescription string `json:"gameModeDescription,omitempty"`

	// game mode name
	GameModeName string `json:"gameModeName,omitempty"`

	// game mode short name
	GameModeShortName string `json:"gameModeShortName,omitempty"`

	// game mutator
	GameMutator string `json:"gameMutator,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// is default
	IsDefault bool `json:"isDefault,omitempty"`

	// is r g m
	IsRGM bool `json:"isRGM,omitempty"`

	// map string Id
	MapStringID string `json:"mapStringId,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// platform Id
	PlatformID string `json:"platformId,omitempty"`

	// platform name
	PlatformName string `json:"platformName,omitempty"`

	// properties
	Properties interface{} `json:"properties,omitempty"`

	// tutorial cards
	TutorialCards []*LolMapsTutorialCard `json:"tutorialCards"`
}

// Validate validates this lol maps maps
func (m *LolMapsMaps) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTutorialCards(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolMapsMaps) validateTutorialCards(formats strfmt.Registry) error {

	if swag.IsZero(m.TutorialCards) { // not required
		return nil
	}

	for i := 0; i < len(m.TutorialCards); i++ {
		if swag.IsZero(m.TutorialCards[i]) { // not required
			continue
		}

		if m.TutorialCards[i] != nil {
			if err := m.TutorialCards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tutorialCards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolMapsMaps) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolMapsMaps) UnmarshalBinary(b []byte) error {
	var res LolMapsMaps
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
