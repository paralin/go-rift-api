// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolHonorV2VendedHonorChange lol honor v2 vended honor change
// swagger:model LolHonorV2VendedHonorChange
type LolHonorV2VendedHonorChange struct {

	// action type
	ActionType string `json:"actionType,omitempty"`

	// current state
	CurrentState *LolHonorV2VendedHonorState `json:"currentState,omitempty"`

	// dynamic honor message
	DynamicHonorMessage *LolHonorV2DynamicHonorMessage `json:"dynamicHonorMessage,omitempty"`

	// previous state
	PreviousState *LolHonorV2VendedHonorState `json:"previousState,omitempty"`

	// reward
	Reward *LolHonorV2Reward `json:"reward,omitempty"`
}

// Validate validates this lol honor v2 vended honor change
func (m *LolHonorV2VendedHonorChange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDynamicHonorMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReward(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolHonorV2VendedHonorChange) validateCurrentState(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrentState) { // not required
		return nil
	}

	if m.CurrentState != nil {
		if err := m.CurrentState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentState")
			}
			return err
		}
	}

	return nil
}

func (m *LolHonorV2VendedHonorChange) validateDynamicHonorMessage(formats strfmt.Registry) error {

	if swag.IsZero(m.DynamicHonorMessage) { // not required
		return nil
	}

	if m.DynamicHonorMessage != nil {
		if err := m.DynamicHonorMessage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dynamicHonorMessage")
			}
			return err
		}
	}

	return nil
}

func (m *LolHonorV2VendedHonorChange) validatePreviousState(formats strfmt.Registry) error {

	if swag.IsZero(m.PreviousState) { // not required
		return nil
	}

	if m.PreviousState != nil {
		if err := m.PreviousState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("previousState")
			}
			return err
		}
	}

	return nil
}

func (m *LolHonorV2VendedHonorChange) validateReward(formats strfmt.Registry) error {

	if swag.IsZero(m.Reward) { // not required
		return nil
	}

	if m.Reward != nil {
		if err := m.Reward.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reward")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolHonorV2VendedHonorChange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolHonorV2VendedHonorChange) UnmarshalBinary(b []byte) error {
	var res LolHonorV2VendedHonorChange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
