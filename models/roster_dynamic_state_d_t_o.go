// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// RosterDynamicStateDTO roster dynamic state d t o
// swagger:model RosterDynamicStateDTO
type RosterDynamicStateDTO struct {

	// members
	Members []*PhaseInMember `json:"members"`

	// phase checkin states
	PhaseCheckinStates []int64 `json:"phaseCheckinStates"`

	// phase roster subs
	PhaseRosterSubs []*PhaseRosterSubDTO `json:"phaseRosterSubs"`

	// roster Id
	RosterID int64 `json:"rosterId,omitempty"`

	// subbed member ids
	SubbedMemberIds []int64 `json:"subbedMemberIds"`

	// ticket offers
	TicketOffers []*TicketOfferDTO `json:"ticketOffers"`

	// tournament Id
	TournamentID int64 `json:"tournamentId,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`

	// withdraw
	Withdraw *RosterWithdraw `json:"withdraw,omitempty"`
}

// Validate validates this roster dynamic state d t o
func (m *RosterDynamicStateDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhaseRosterSubs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTicketOffers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWithdraw(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RosterDynamicStateDTO) validateMembers(formats strfmt.Registry) error {

	if swag.IsZero(m.Members) { // not required
		return nil
	}

	for i := 0; i < len(m.Members); i++ {
		if swag.IsZero(m.Members[i]) { // not required
			continue
		}

		if m.Members[i] != nil {
			if err := m.Members[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RosterDynamicStateDTO) validatePhaseRosterSubs(formats strfmt.Registry) error {

	if swag.IsZero(m.PhaseRosterSubs) { // not required
		return nil
	}

	for i := 0; i < len(m.PhaseRosterSubs); i++ {
		if swag.IsZero(m.PhaseRosterSubs[i]) { // not required
			continue
		}

		if m.PhaseRosterSubs[i] != nil {
			if err := m.PhaseRosterSubs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("phaseRosterSubs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RosterDynamicStateDTO) validateTicketOffers(formats strfmt.Registry) error {

	if swag.IsZero(m.TicketOffers) { // not required
		return nil
	}

	for i := 0; i < len(m.TicketOffers); i++ {
		if swag.IsZero(m.TicketOffers[i]) { // not required
			continue
		}

		if m.TicketOffers[i] != nil {
			if err := m.TicketOffers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ticketOffers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RosterDynamicStateDTO) validateWithdraw(formats strfmt.Registry) error {

	if swag.IsZero(m.Withdraw) { // not required
		return nil
	}

	if m.Withdraw != nil {
		if err := m.Withdraw.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("withdraw")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RosterDynamicStateDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RosterDynamicStateDTO) UnmarshalBinary(b []byte) error {
	var res RosterDynamicStateDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
