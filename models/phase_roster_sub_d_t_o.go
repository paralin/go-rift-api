// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PhaseRosterSubDTO phase roster sub d t o
// swagger:model PhaseRosterSubDTO
type PhaseRosterSubDTO struct {

	// bet
	Bet int32 `json:"bet,omitempty"`

	// bet type
	BetType TicketType `json:"betType,omitempty"`

	// pay
	Pay int32 `json:"pay,omitempty"`

	// player Id
	PlayerID int64 `json:"playerId,omitempty"`

	// position
	Position Position `json:"position,omitempty"`

	// premium pay
	PremiumPay int32 `json:"premiumPay,omitempty"`

	// replaced player Id
	ReplacedPlayerID int64 `json:"replacedPlayerId,omitempty"`

	// sub state
	SubState SubState `json:"subState,omitempty"`

	// tier
	Tier int32 `json:"tier,omitempty"`
}

// Validate validates this phase roster sub d t o
func (m *PhaseRosterSubDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBetType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhaseRosterSubDTO) validateBetType(formats strfmt.Registry) error {

	if swag.IsZero(m.BetType) { // not required
		return nil
	}

	if err := m.BetType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("betType")
		}
		return err
	}

	return nil
}

func (m *PhaseRosterSubDTO) validatePosition(formats strfmt.Registry) error {

	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if err := m.Position.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("position")
		}
		return err
	}

	return nil
}

func (m *PhaseRosterSubDTO) validateSubState(formats strfmt.Registry) error {

	if swag.IsZero(m.SubState) { // not required
		return nil
	}

	if err := m.SubState.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("subState")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PhaseRosterSubDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PhaseRosterSubDTO) UnmarshalBinary(b []byte) error {
	var res PhaseRosterSubDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
