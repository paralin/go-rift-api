// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// BindingAsyncState Possible states of an asynchronous operation.
// swagger:model BindingAsyncState
type BindingAsyncState string

const (

	// BindingAsyncStateNone captures enum value "None"
	BindingAsyncStateNone BindingAsyncState = "None"

	// BindingAsyncStateRunning captures enum value "Running"
	BindingAsyncStateRunning BindingAsyncState = "Running"

	// BindingAsyncStateCancelling captures enum value "Cancelling"
	BindingAsyncStateCancelling BindingAsyncState = "Cancelling"

	// BindingAsyncStateCancelled captures enum value "Cancelled"
	BindingAsyncStateCancelled BindingAsyncState = "Cancelled"

	// BindingAsyncStateSucceeded captures enum value "Succeeded"
	BindingAsyncStateSucceeded BindingAsyncState = "Succeeded"

	// BindingAsyncStateFailed captures enum value "Failed"
	BindingAsyncStateFailed BindingAsyncState = "Failed"
)

// for schema
var bindingAsyncStateEnum []interface{}

func init() {
	var res []BindingAsyncState
	if err := json.Unmarshal([]byte(`["None","Running","Cancelling","Cancelled","Succeeded","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bindingAsyncStateEnum = append(bindingAsyncStateEnum, v)
	}
}

func (m BindingAsyncState) validateBindingAsyncStateEnum(path, location string, value BindingAsyncState) error {
	if err := validate.Enum(path, location, value, bindingAsyncStateEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this binding async state
func (m BindingAsyncState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBindingAsyncStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
