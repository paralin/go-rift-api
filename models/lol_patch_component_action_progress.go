// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolPatchComponentActionProgress lol patch component action progress
// swagger:model LolPatchComponentActionProgress
type LolPatchComponentActionProgress struct {

	// current item
	CurrentItem string `json:"currentItem,omitempty"`

	// network
	Network *LolPatchComponentStateProgress `json:"network,omitempty"`

	// primary work
	PrimaryWork LolPatchComponentStateWorkType `json:"primaryWork,omitempty"`

	// total
	Total *LolPatchComponentStateProgress `json:"total,omitempty"`
}

// Validate validates this lol patch component action progress
func (m *LolPatchComponentActionProgress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryWork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolPatchComponentActionProgress) validateNetwork(formats strfmt.Registry) error {

	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {
		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *LolPatchComponentActionProgress) validatePrimaryWork(formats strfmt.Registry) error {

	if swag.IsZero(m.PrimaryWork) { // not required
		return nil
	}

	if err := m.PrimaryWork.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("primaryWork")
		}
		return err
	}

	return nil
}

func (m *LolPatchComponentActionProgress) validateTotal(formats strfmt.Registry) error {

	if swag.IsZero(m.Total) { // not required
		return nil
	}

	if m.Total != nil {
		if err := m.Total.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolPatchComponentActionProgress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolPatchComponentActionProgress) UnmarshalBinary(b []byte) error {
	var res LolPatchComponentActionProgress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
