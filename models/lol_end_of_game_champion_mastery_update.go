// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolEndOfGameChampionMasteryUpdate lol end of game champion mastery update
// swagger:model LolEndOfGameChampionMasteryUpdate
type LolEndOfGameChampionMasteryUpdate struct {

	// bonus points gained
	BonusPointsGained int64 `json:"bonusPointsGained,omitempty"`

	// champion Id
	ChampionID int32 `json:"championId,omitempty"`

	// game Id
	GameID int64 `json:"gameId,omitempty"`

	// grade
	Grade string `json:"grade,omitempty"`

	// has leveled up
	HasLeveledUp bool `json:"hasLeveledUp,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// level
	Level int64 `json:"level,omitempty"`

	// level up list
	LevelUpList []*LolEndOfGameChampionMasteryMini `json:"levelUpList"`

	// member grades
	MemberGrades []*LolEndOfGameChampionMasteryGrade `json:"memberGrades"`

	// player Id
	PlayerID int64 `json:"playerId,omitempty"`

	// points before game
	PointsBeforeGame int64 `json:"pointsBeforeGame,omitempty"`

	// points gained
	PointsGained int64 `json:"pointsGained,omitempty"`

	// points gained individual contribution
	PointsGainedIndividualContribution int64 `json:"pointsGainedIndividualContribution,omitempty"`

	// points since last level before game
	PointsSinceLastLevelBeforeGame int64 `json:"pointsSinceLastLevelBeforeGame,omitempty"`

	// points until next level after game
	PointsUntilNextLevelAfterGame int64 `json:"pointsUntilNextLevelAfterGame,omitempty"`

	// points until next level before game
	PointsUntilNextLevelBeforeGame int64 `json:"pointsUntilNextLevelBeforeGame,omitempty"`

	// score
	Score int64 `json:"score,omitempty"`
}

// Validate validates this lol end of game champion mastery update
func (m *LolEndOfGameChampionMasteryUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLevelUpList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberGrades(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolEndOfGameChampionMasteryUpdate) validateLevelUpList(formats strfmt.Registry) error {

	if swag.IsZero(m.LevelUpList) { // not required
		return nil
	}

	for i := 0; i < len(m.LevelUpList); i++ {
		if swag.IsZero(m.LevelUpList[i]) { // not required
			continue
		}

		if m.LevelUpList[i] != nil {
			if err := m.LevelUpList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("levelUpList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LolEndOfGameChampionMasteryUpdate) validateMemberGrades(formats strfmt.Registry) error {

	if swag.IsZero(m.MemberGrades) { // not required
		return nil
	}

	for i := 0; i < len(m.MemberGrades); i++ {
		if swag.IsZero(m.MemberGrades[i]) { // not required
			continue
		}

		if m.MemberGrades[i] != nil {
			if err := m.MemberGrades[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("memberGrades" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolEndOfGameChampionMasteryUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolEndOfGameChampionMasteryUpdate) UnmarshalBinary(b []byte) error {
	var res LolEndOfGameChampionMasteryUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
