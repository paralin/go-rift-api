// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolLobbyTeamBuilderQueue lol lobby team builder queue
// swagger:model LolLobbyTeamBuilderQueue
type LolLobbyTeamBuilderQueue struct {

	// allowable premade sizes
	AllowablePremadeSizes []int32 `json:"allowablePremadeSizes"`

	// are free champions allowed
	AreFreeChampionsAllowed bool `json:"areFreeChampionsAllowed,omitempty"`

	// asset mutator
	AssetMutator string `json:"assetMutator,omitempty"`

	// category
	Category LolLobbyTeamBuilderQueueGameCategory `json:"category,omitempty"`

	// champions required to play
	ChampionsRequiredToPlay int32 `json:"championsRequiredToPlay,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// detailed description
	DetailedDescription string `json:"detailedDescription,omitempty"`

	// game mode
	GameMode string `json:"gameMode,omitempty"`

	// game type config
	GameTypeConfig *LolLobbyTeamBuilderQueueGameTypeConfig `json:"gameTypeConfig,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// is ranked
	IsRanked bool `json:"isRanked,omitempty"`

	// is team builder managed
	IsTeamBuilderManaged bool `json:"isTeamBuilderManaged,omitempty"`

	// is team only
	IsTeamOnly bool `json:"isTeamOnly,omitempty"`

	// last toggled off time
	LastToggledOffTime int64 `json:"lastToggledOffTime,omitempty"`

	// last toggled on time
	LastToggledOnTime int64 `json:"lastToggledOnTime,omitempty"`

	// map Id
	MapID int32 `json:"mapId,omitempty"`

	// max level
	MaxLevel int32 `json:"maxLevel,omitempty"`

	// max summoner level for first win of the day
	MaxSummonerLevelForFirstWinOfTheDay int32 `json:"maxSummonerLevelForFirstWinOfTheDay,omitempty"`

	// maximum participant list size
	MaximumParticipantListSize int32 `json:"maximumParticipantListSize,omitempty"`

	// min level
	MinLevel int32 `json:"minLevel,omitempty"`

	// minimum participant list size
	MinimumParticipantListSize int32 `json:"minimumParticipantListSize,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// num players per team
	NumPlayersPerTeam int32 `json:"numPlayersPerTeam,omitempty"`

	// queue availability
	QueueAvailability LolLobbyTeamBuilderQueueAvailability `json:"queueAvailability,omitempty"`

	// queue rewards
	QueueRewards *LolLobbyTeamBuilderQueueReward `json:"queueRewards,omitempty"`

	// removal from game allowed
	RemovalFromGameAllowed bool `json:"removalFromGameAllowed,omitempty"`

	// removal from game delay minutes
	RemovalFromGameDelayMinutes int32 `json:"removalFromGameDelayMinutes,omitempty"`

	// short name
	ShortName string `json:"shortName,omitempty"`

	// show position selector
	ShowPositionSelector bool `json:"showPositionSelector,omitempty"`

	// spectator enabled
	SpectatorEnabled bool `json:"spectatorEnabled,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this lol lobby team builder queue
func (m *LolLobbyTeamBuilderQueue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGameTypeConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueAvailability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueRewards(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolLobbyTeamBuilderQueue) validateCategory(formats strfmt.Registry) error {

	if swag.IsZero(m.Category) { // not required
		return nil
	}

	if err := m.Category.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("category")
		}
		return err
	}

	return nil
}

func (m *LolLobbyTeamBuilderQueue) validateGameTypeConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.GameTypeConfig) { // not required
		return nil
	}

	if m.GameTypeConfig != nil {
		if err := m.GameTypeConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gameTypeConfig")
			}
			return err
		}
	}

	return nil
}

func (m *LolLobbyTeamBuilderQueue) validateQueueAvailability(formats strfmt.Registry) error {

	if swag.IsZero(m.QueueAvailability) { // not required
		return nil
	}

	if err := m.QueueAvailability.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("queueAvailability")
		}
		return err
	}

	return nil
}

func (m *LolLobbyTeamBuilderQueue) validateQueueRewards(formats strfmt.Registry) error {

	if swag.IsZero(m.QueueRewards) { // not required
		return nil
	}

	if m.QueueRewards != nil {
		if err := m.QueueRewards.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queueRewards")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolLobbyTeamBuilderQueue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolLobbyTeamBuilderQueue) UnmarshalBinary(b []byte) error {
	var res LolLobbyTeamBuilderQueue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
