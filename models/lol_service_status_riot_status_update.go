// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolServiceStatusRiotStatusUpdate lol service status riot status update
// swagger:model LolServiceStatusRiotStatusUpdate
type LolServiceStatusRiotStatusUpdate struct {

	// author
	Author string `json:"author,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// publish
	Publish bool `json:"publish,omitempty"`

	// publish locations
	PublishLocations []string `json:"publish_locations"`

	// translations
	Translations []*LolServiceStatusRiotStatusTranslation `json:"translations"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this lol service status riot status update
func (m *LolServiceStatusRiotStatusUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTranslations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolServiceStatusRiotStatusUpdate) validateTranslations(formats strfmt.Registry) error {

	if swag.IsZero(m.Translations) { // not required
		return nil
	}

	for i := 0; i < len(m.Translations); i++ {
		if swag.IsZero(m.Translations[i]) { // not required
			continue
		}

		if m.Translations[i] != nil {
			if err := m.Translations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("translations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolServiceStatusRiotStatusUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolServiceStatusRiotStatusUpdate) UnmarshalBinary(b []byte) error {
	var res LolServiceStatusRiotStatusUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
