// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolLootLootDataGdsResource lol loot loot data gds resource
// swagger:model LolLootLootDataGdsResource
type LolLootLootDataGdsResource struct {

	// loot bundles
	LootBundles []*LolLootLootBundleGdsResource `json:"LootBundles"`

	// loot items
	LootItems []*LolLootLootItemGdsResource `json:"LootItems"`

	// loot recipes
	LootRecipes []*LolLootLootRecipeGdsResource `json:"LootRecipes"`

	// loot tables
	LootTables []*LolLootLootTableGdsResource `json:"LootTables"`
}

// Validate validates this lol loot loot data gds resource
func (m *LolLootLootDataGdsResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLootBundles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLootItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLootRecipes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLootTables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolLootLootDataGdsResource) validateLootBundles(formats strfmt.Registry) error {

	if swag.IsZero(m.LootBundles) { // not required
		return nil
	}

	for i := 0; i < len(m.LootBundles); i++ {
		if swag.IsZero(m.LootBundles[i]) { // not required
			continue
		}

		if m.LootBundles[i] != nil {
			if err := m.LootBundles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LootBundles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LolLootLootDataGdsResource) validateLootItems(formats strfmt.Registry) error {

	if swag.IsZero(m.LootItems) { // not required
		return nil
	}

	for i := 0; i < len(m.LootItems); i++ {
		if swag.IsZero(m.LootItems[i]) { // not required
			continue
		}

		if m.LootItems[i] != nil {
			if err := m.LootItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LootItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LolLootLootDataGdsResource) validateLootRecipes(formats strfmt.Registry) error {

	if swag.IsZero(m.LootRecipes) { // not required
		return nil
	}

	for i := 0; i < len(m.LootRecipes); i++ {
		if swag.IsZero(m.LootRecipes[i]) { // not required
			continue
		}

		if m.LootRecipes[i] != nil {
			if err := m.LootRecipes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LootRecipes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LolLootLootDataGdsResource) validateLootTables(formats strfmt.Registry) error {

	if swag.IsZero(m.LootTables) { // not required
		return nil
	}

	for i := 0; i < len(m.LootTables); i++ {
		if swag.IsZero(m.LootTables[i]) { // not required
			continue
		}

		if m.LootTables[i] != nil {
			if err := m.LootTables[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LootTables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolLootLootDataGdsResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolLootLootDataGdsResource) UnmarshalBinary(b []byte) error {
	var res LolLootLootDataGdsResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
