// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MultiLeagueEntryChangeEventDTO multi league entry change event d t o
// swagger:model MultiLeagueEntryChangeEventDTO
type MultiLeagueEntryChangeEventDTO struct {

	// game Id
	GameID int64 `json:"gameId,omitempty"`

	// main change event d t o
	MainChangeEventDTO *LeagueEntryChangeEventDTOV2 `json:"mainChangeEventDTO,omitempty"`

	// participant Id
	ParticipantID string `json:"participantId,omitempty"`

	// previous split points required
	PreviousSplitPointsRequired int32 `json:"previousSplitPointsRequired,omitempty"`

	// provisional game threshold
	ProvisionalGameThreshold int32 `json:"provisionalGameThreshold,omitempty"`

	// shard Id
	ShardID string `json:"shardId,omitempty"`

	// split point breakdown
	SplitPointBreakdown map[string]int32 `json:"splitPointBreakdown,omitempty"`

	// split points before game
	SplitPointsBeforeGame int32 `json:"splitPointsBeforeGame,omitempty"`

	// split points gained
	SplitPointsGained int32 `json:"splitPointsGained,omitempty"`

	// split points required
	SplitPointsRequired int32 `json:"splitPointsRequired,omitempty"`

	// split reward grants
	SplitRewardGrants []*SplitRewardGrantDTO `json:"splitRewardGrants"`

	// upcoming split points required
	UpcomingSplitPointsRequired int32 `json:"upcomingSplitPointsRequired,omitempty"`

	// upcoming split rewards
	UpcomingSplitRewards []*SplitRewardGrantDTO `json:"upcomingSplitRewards"`
}

// Validate validates this multi league entry change event d t o
func (m *MultiLeagueEntryChangeEventDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMainChangeEventDTO(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSplitRewardGrants(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpcomingSplitRewards(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MultiLeagueEntryChangeEventDTO) validateMainChangeEventDTO(formats strfmt.Registry) error {

	if swag.IsZero(m.MainChangeEventDTO) { // not required
		return nil
	}

	if m.MainChangeEventDTO != nil {
		if err := m.MainChangeEventDTO.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mainChangeEventDTO")
			}
			return err
		}
	}

	return nil
}

func (m *MultiLeagueEntryChangeEventDTO) validateSplitRewardGrants(formats strfmt.Registry) error {

	if swag.IsZero(m.SplitRewardGrants) { // not required
		return nil
	}

	for i := 0; i < len(m.SplitRewardGrants); i++ {
		if swag.IsZero(m.SplitRewardGrants[i]) { // not required
			continue
		}

		if m.SplitRewardGrants[i] != nil {
			if err := m.SplitRewardGrants[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("splitRewardGrants" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MultiLeagueEntryChangeEventDTO) validateUpcomingSplitRewards(formats strfmt.Registry) error {

	if swag.IsZero(m.UpcomingSplitRewards) { // not required
		return nil
	}

	for i := 0; i < len(m.UpcomingSplitRewards); i++ {
		if swag.IsZero(m.UpcomingSplitRewards[i]) { // not required
			continue
		}

		if m.UpcomingSplitRewards[i] != nil {
			if err := m.UpcomingSplitRewards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("upcomingSplitRewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MultiLeagueEntryChangeEventDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MultiLeagueEntryChangeEventDTO) UnmarshalBinary(b []byte) error {
	var res MultiLeagueEntryChangeEventDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
