// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolClashBracketUpdateNotification lol clash bracket update notification
// swagger:model LolClashBracketUpdateNotification
type LolClashBracketUpdateNotification struct {

	// bracket
	Bracket *Bracket `json:"bracket,omitempty"`

	// bracket Id
	BracketID int64 `json:"bracketId,omitempty"`

	// current match Id
	CurrentMatchID int64 `json:"currentMatchId,omitempty"`

	// notify reason
	NotifyReason LolClashRosterNotifyReason `json:"notifyReason,omitempty"`

	// tournament Id
	TournamentID int64 `json:"tournamentId,omitempty"`
}

// Validate validates this lol clash bracket update notification
func (m *LolClashBracketUpdateNotification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBracket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotifyReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolClashBracketUpdateNotification) validateBracket(formats strfmt.Registry) error {

	if swag.IsZero(m.Bracket) { // not required
		return nil
	}

	if m.Bracket != nil {
		if err := m.Bracket.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bracket")
			}
			return err
		}
	}

	return nil
}

func (m *LolClashBracketUpdateNotification) validateNotifyReason(formats strfmt.Registry) error {

	if swag.IsZero(m.NotifyReason) { // not required
		return nil
	}

	if err := m.NotifyReason.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("notifyReason")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolClashBracketUpdateNotification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolClashBracketUpdateNotification) UnmarshalBinary(b []byte) error {
	var res LolClashBracketUpdateNotification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
