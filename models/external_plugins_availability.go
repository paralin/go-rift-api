// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ExternalPluginsAvailability external plugins availability
// swagger:model ExternalPluginsAvailability
type ExternalPluginsAvailability string

const (

	// ExternalPluginsAvailabilityNotAvailable captures enum value "NotAvailable"
	ExternalPluginsAvailabilityNotAvailable ExternalPluginsAvailability = "NotAvailable"

	// ExternalPluginsAvailabilityPreparing captures enum value "Preparing"
	ExternalPluginsAvailabilityPreparing ExternalPluginsAvailability = "Preparing"

	// ExternalPluginsAvailabilityConnected captures enum value "Connected"
	ExternalPluginsAvailabilityConnected ExternalPluginsAvailability = "Connected"

	// ExternalPluginsAvailabilityRecovering captures enum value "Recovering"
	ExternalPluginsAvailabilityRecovering ExternalPluginsAvailability = "Recovering"

	// ExternalPluginsAvailabilityError captures enum value "Error"
	ExternalPluginsAvailabilityError ExternalPluginsAvailability = "Error"
)

// for schema
var externalPluginsAvailabilityEnum []interface{}

func init() {
	var res []ExternalPluginsAvailability
	if err := json.Unmarshal([]byte(`["NotAvailable","Preparing","Connected","Recovering","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		externalPluginsAvailabilityEnum = append(externalPluginsAvailabilityEnum, v)
	}
}

func (m ExternalPluginsAvailability) validateExternalPluginsAvailabilityEnum(path, location string, value ExternalPluginsAvailability) error {
	if err := validate.Enum(path, location, value, externalPluginsAvailabilityEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this external plugins availability
func (m ExternalPluginsAvailability) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateExternalPluginsAvailabilityEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
