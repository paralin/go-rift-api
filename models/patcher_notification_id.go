// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// PatcherNotificationID patcher notification Id
// swagger:model PatcherNotificationId
type PatcherNotificationID string

const (

	// PatcherNotificationIDUnspecifiedError captures enum value "UnspecifiedError"
	PatcherNotificationIDUnspecifiedError PatcherNotificationID = "UnspecifiedError"

	// PatcherNotificationIDConnectionError captures enum value "ConnectionError"
	PatcherNotificationIDConnectionError PatcherNotificationID = "ConnectionError"

	// PatcherNotificationIDMissingFilesError captures enum value "MissingFilesError"
	PatcherNotificationIDMissingFilesError PatcherNotificationID = "MissingFilesError"

	// PatcherNotificationIDFailedToWriteError captures enum value "FailedToWriteError"
	PatcherNotificationIDFailedToWriteError PatcherNotificationID = "FailedToWriteError"

	// PatcherNotificationIDWillRestoreClientBackupOnRestart captures enum value "WillRestoreClientBackupOnRestart"
	PatcherNotificationIDWillRestoreClientBackupOnRestart PatcherNotificationID = "WillRestoreClientBackupOnRestart"

	// PatcherNotificationIDDidRestoreClientBackup captures enum value "DidRestoreClientBackup"
	PatcherNotificationIDDidRestoreClientBackup PatcherNotificationID = "DidRestoreClientBackup"

	// PatcherNotificationIDNotEnoughDiskSpace captures enum value "NotEnoughDiskSpace"
	PatcherNotificationIDNotEnoughDiskSpace PatcherNotificationID = "NotEnoughDiskSpace"

	// PatcherNotificationIDBrokenPermissions captures enum value "BrokenPermissions"
	PatcherNotificationIDBrokenPermissions PatcherNotificationID = "BrokenPermissions"
)

// for schema
var patcherNotificationIdEnum []interface{}

func init() {
	var res []PatcherNotificationID
	if err := json.Unmarshal([]byte(`["UnspecifiedError","ConnectionError","MissingFilesError","FailedToWriteError","WillRestoreClientBackupOnRestart","DidRestoreClientBackup","NotEnoughDiskSpace","BrokenPermissions"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patcherNotificationIdEnum = append(patcherNotificationIdEnum, v)
	}
}

func (m PatcherNotificationID) validatePatcherNotificationIDEnum(path, location string, value PatcherNotificationID) error {
	if err := validate.Enum(path, location, value, patcherNotificationIdEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this patcher notification Id
func (m PatcherNotificationID) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePatcherNotificationIDEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
