// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LolRankedRewardsInfo lol ranked rewards info
// swagger:model LolRankedRewardsInfo
type LolRankedRewardsInfo struct {

	// current split
	CurrentSplit *LolRankedSeasonSplit `json:"currentSplit,omitempty"`

	// current split Id
	CurrentSplitID int32 `json:"currentSplitId,omitempty"`

	// reward info by reward Id
	RewardInfoByRewardID map[string]LolRankedSplitReward `json:"rewardInfoByRewardId,omitempty"`

	// splits
	Splits []*LolRankedSeasonSplit `json:"splits"`
}

// Validate validates this lol ranked rewards info
func (m *LolRankedRewardsInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentSplit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRewardInfoByRewardID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSplits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolRankedRewardsInfo) validateCurrentSplit(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrentSplit) { // not required
		return nil
	}

	if m.CurrentSplit != nil {
		if err := m.CurrentSplit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentSplit")
			}
			return err
		}
	}

	return nil
}

func (m *LolRankedRewardsInfo) validateRewardInfoByRewardID(formats strfmt.Registry) error {

	if swag.IsZero(m.RewardInfoByRewardID) { // not required
		return nil
	}

	for k := range m.RewardInfoByRewardID {

		if err := validate.Required("rewardInfoByRewardId"+"."+k, "body", m.RewardInfoByRewardID[k]); err != nil {
			return err
		}
		if val, ok := m.RewardInfoByRewardID[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *LolRankedRewardsInfo) validateSplits(formats strfmt.Registry) error {

	if swag.IsZero(m.Splits) { // not required
		return nil
	}

	for i := 0; i < len(m.Splits); i++ {
		if swag.IsZero(m.Splits[i]) { // not required
			continue
		}

		if m.Splits[i] != nil {
			if err := m.Splits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("splits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolRankedRewardsInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolRankedRewardsInfo) UnmarshalBinary(b []byte) error {
	var res LolRankedRewardsInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
