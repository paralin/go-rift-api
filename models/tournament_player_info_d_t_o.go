// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TournamentPlayerInfoDTO tournament player info d t o
// swagger:model TournamentPlayerInfoDTO
type TournamentPlayerInfoDTO struct {

	// player
	Player *PlayerDTO `json:"player,omitempty"`

	// roster stats
	RosterStats []*RosterStatsDTO `json:"rosterStats"`

	// season vp
	SeasonVp int32 `json:"seasonVp,omitempty"`

	// theme vps
	ThemeVps []*ThemeVp `json:"themeVps"`

	// tier
	Tier int32 `json:"tier,omitempty"`

	// time
	Time int64 `json:"time,omitempty"`

	// tournament info
	TournamentInfo []*TournamentInfoDTO `json:"tournamentInfo"`
}

// Validate validates this tournament player info d t o
func (m *TournamentPlayerInfoDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePlayer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRosterStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThemeVps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTournamentInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TournamentPlayerInfoDTO) validatePlayer(formats strfmt.Registry) error {

	if swag.IsZero(m.Player) { // not required
		return nil
	}

	if m.Player != nil {
		if err := m.Player.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("player")
			}
			return err
		}
	}

	return nil
}

func (m *TournamentPlayerInfoDTO) validateRosterStats(formats strfmt.Registry) error {

	if swag.IsZero(m.RosterStats) { // not required
		return nil
	}

	for i := 0; i < len(m.RosterStats); i++ {
		if swag.IsZero(m.RosterStats[i]) { // not required
			continue
		}

		if m.RosterStats[i] != nil {
			if err := m.RosterStats[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rosterStats" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TournamentPlayerInfoDTO) validateThemeVps(formats strfmt.Registry) error {

	if swag.IsZero(m.ThemeVps) { // not required
		return nil
	}

	for i := 0; i < len(m.ThemeVps); i++ {
		if swag.IsZero(m.ThemeVps[i]) { // not required
			continue
		}

		if m.ThemeVps[i] != nil {
			if err := m.ThemeVps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("themeVps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TournamentPlayerInfoDTO) validateTournamentInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.TournamentInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.TournamentInfo); i++ {
		if swag.IsZero(m.TournamentInfo[i]) { // not required
			continue
		}

		if m.TournamentInfo[i] != nil {
			if err := m.TournamentInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tournamentInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TournamentPlayerInfoDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TournamentPlayerInfoDTO) UnmarshalBinary(b []byte) error {
	var res TournamentPlayerInfoDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
