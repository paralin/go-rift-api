// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolEndOfGameEndOfGameStats lol end of game end of game stats
// swagger:model LolEndOfGameEndOfGameStats
type LolEndOfGameEndOfGameStats struct {

	// account Id
	AccountID int64 `json:"accountId,omitempty"`

	// base points
	BasePoints int32 `json:"basePoints,omitempty"`

	// battle boost Ip earned
	BattleBoostIPEarned int32 `json:"battleBoostIpEarned,omitempty"`

	// boost Ip earned
	BoostIPEarned int32 `json:"boostIpEarned,omitempty"`

	// boost xp earned
	BoostXpEarned int32 `json:"boostXpEarned,omitempty"`

	// caused early surrender
	CausedEarlySurrender bool `json:"causedEarlySurrender,omitempty"`

	// champion Id
	ChampionID int32 `json:"championId,omitempty"`

	// co op vs ai minutes left today
	CoOpVsAiMinutesLeftToday int32 `json:"coOpVsAiMinutesLeftToday,omitempty"`

	// co op vs ai msecs until reset
	CoOpVsAiMsecsUntilReset int32 `json:"coOpVsAiMsecsUntilReset,omitempty"`

	// completion bonus points
	CompletionBonusPoints int32 `json:"completionBonusPoints,omitempty"`

	// current level
	CurrentLevel int64 `json:"currentLevel,omitempty"`

	// custom minutes left today
	CustomMinutesLeftToday int32 `json:"customMinutesLeftToday,omitempty"`

	// custom msecs until reset
	CustomMsecsUntilReset int32 `json:"customMsecsUntilReset,omitempty"`

	// difficulty
	Difficulty string `json:"difficulty,omitempty"`

	// early surrender accomplice
	EarlySurrenderAccomplice bool `json:"earlySurrenderAccomplice,omitempty"`

	// elo
	Elo int32 `json:"elo,omitempty"`

	// elo change
	EloChange int32 `json:"eloChange,omitempty"`

	// experience earned
	ExperienceEarned int32 `json:"experienceEarned,omitempty"`

	// experience total
	ExperienceTotal int32 `json:"experienceTotal,omitempty"`

	// first win bonus
	FirstWinBonus int32 `json:"firstWinBonus,omitempty"`

	// game ended in early surrender
	GameEndedInEarlySurrender bool `json:"gameEndedInEarlySurrender,omitempty"`

	// game Id
	GameID int64 `json:"gameId,omitempty"`

	// game length
	GameLength int32 `json:"gameLength,omitempty"`

	// game mode
	GameMode string `json:"gameMode,omitempty"`

	// game mutators
	GameMutators []string `json:"gameMutators"`

	// game type
	GameType string `json:"gameType,omitempty"`

	// global boost xp earned
	GlobalBoostXpEarned int32 `json:"globalBoostXpEarned,omitempty"`

	// imbalanced teams no points
	ImbalancedTeamsNoPoints bool `json:"imbalancedTeamsNoPoints,omitempty"`

	// invalid
	Invalid bool `json:"invalid,omitempty"`

	// ip earned
	IPEarned int32 `json:"ipEarned,omitempty"`

	// ip total
	IPTotal int32 `json:"ipTotal,omitempty"`

	// leveled up
	LeveledUp bool `json:"leveledUp,omitempty"`

	// loyalty boost Ip earned
	LoyaltyBoostIPEarned int32 `json:"loyaltyBoostIpEarned,omitempty"`

	// loyalty boost xp earned
	LoyaltyBoostXpEarned int32 `json:"loyaltyBoostXpEarned,omitempty"`

	// missions xp earned
	MissionsXpEarned int32 `json:"missionsXpEarned,omitempty"`

	// my team status
	MyTeamStatus string `json:"myTeamStatus,omitempty"`

	// new spells
	NewSpells []int32 `json:"newSpells"`

	// next level xp
	NextLevelXp int64 `json:"nextLevelXp,omitempty"`

	// odin bonus Ip
	OdinBonusIP int32 `json:"odinBonusIp,omitempty"`

	// party rewards bonus Ip earned
	PartyRewardsBonusIPEarned int32 `json:"partyRewardsBonusIpEarned,omitempty"`

	// points penalties
	PointsPenalties interface{} `json:"pointsPenalties,omitempty"`

	// pre level up experience total
	PreLevelUpExperienceTotal int64 `json:"preLevelUpExperienceTotal,omitempty"`

	// pre level up next level xp
	PreLevelUpNextLevelXp int64 `json:"preLevelUpNextLevelXp,omitempty"`

	// previous level
	PreviousLevel int64 `json:"previousLevel,omitempty"`

	// previous xp total
	PreviousXpTotal int64 `json:"previousXpTotal,omitempty"`

	// queue bonus earned
	QueueBonusEarned int32 `json:"queueBonusEarned,omitempty"`

	// queue type
	QueueType string `json:"queueType,omitempty"`

	// ranked
	Ranked bool `json:"ranked,omitempty"`

	// report game Id
	ReportGameID int64 `json:"reportGameId,omitempty"`

	// reroll data
	RerollData *LolEndOfGameEndOfGamePoints `json:"rerollData,omitempty"`

	// room name
	RoomName string `json:"roomName,omitempty"`

	// room password
	RoomPassword string `json:"roomPassword,omitempty"`

	// rp earned
	RpEarned int32 `json:"rpEarned,omitempty"`

	// send stats to tournament provider
	SendStatsToTournamentProvider bool `json:"sendStatsToTournamentProvider,omitempty"`

	// skin Id
	SkinID int32 `json:"skinId,omitempty"`

	// skin index
	SkinIndex int32 `json:"skinIndex,omitempty"`

	// summoner Id
	SummonerID int64 `json:"summonerId,omitempty"`

	// summoner name
	SummonerName string `json:"summonerName,omitempty"`

	// talent points gained
	TalentPointsGained int32 `json:"talentPointsGained,omitempty"`

	// team boost
	TeamBoost *LolEndOfGameEndOfGameTeamBoost `json:"teamBoost,omitempty"`

	// team early surrendered
	TeamEarlySurrendered bool `json:"teamEarlySurrendered,omitempty"`

	// teams
	Teams []*LolEndOfGameEndOfGameTeam `json:"teams"`

	// time until next first win bonus
	TimeUntilNextFirstWinBonus int32 `json:"timeUntilNextFirstWinBonus,omitempty"`

	// user Id
	UserID int64 `json:"userId,omitempty"`
}

// Validate validates this lol end of game end of game stats
func (m *LolEndOfGameEndOfGameStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRerollData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamBoost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolEndOfGameEndOfGameStats) validateRerollData(formats strfmt.Registry) error {

	if swag.IsZero(m.RerollData) { // not required
		return nil
	}

	if m.RerollData != nil {
		if err := m.RerollData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rerollData")
			}
			return err
		}
	}

	return nil
}

func (m *LolEndOfGameEndOfGameStats) validateTeamBoost(formats strfmt.Registry) error {

	if swag.IsZero(m.TeamBoost) { // not required
		return nil
	}

	if m.TeamBoost != nil {
		if err := m.TeamBoost.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("teamBoost")
			}
			return err
		}
	}

	return nil
}

func (m *LolEndOfGameEndOfGameStats) validateTeams(formats strfmt.Registry) error {

	if swag.IsZero(m.Teams) { // not required
		return nil
	}

	for i := 0; i < len(m.Teams); i++ {
		if swag.IsZero(m.Teams[i]) { // not required
			continue
		}

		if m.Teams[i] != nil {
			if err := m.Teams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("teams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolEndOfGameEndOfGameStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolEndOfGameEndOfGameStats) UnmarshalBinary(b []byte) error {
	var res LolEndOfGameEndOfGameStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
