// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TracingModuleV1 tracing module v1
// swagger:model TracingModuleV1
type TracingModuleV1 struct {

	// module Id
	ModuleID int32 `json:"moduleId,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// threading model
	ThreadingModel TracingModuleThreadingModelV1 `json:"threadingModel,omitempty"`

	// type
	Type TracingModuleTypeV1 `json:"type,omitempty"`
}

// Validate validates this tracing module v1
func (m *TracingModuleV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateThreadingModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TracingModuleV1) validateThreadingModel(formats strfmt.Registry) error {

	if swag.IsZero(m.ThreadingModel) { // not required
		return nil
	}

	if err := m.ThreadingModel.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("threadingModel")
		}
		return err
	}

	return nil
}

func (m *TracingModuleV1) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TracingModuleV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TracingModuleV1) UnmarshalBinary(b []byte) error {
	var res TracingModuleV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
