// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LcdsGameDTO lcds game d t o
// swagger:model LcdsGameDTO
type LcdsGameDTO struct {

	// game mode
	GameMode string `json:"gameMode,omitempty"`

	// game mutators
	GameMutators []string `json:"gameMutators"`

	// game state
	GameState string `json:"gameState,omitempty"`

	// game type
	GameType string `json:"gameType,omitempty"`

	// game type config Id
	GameTypeConfigID int32 `json:"gameTypeConfigId,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// map Id
	MapID int32 `json:"mapId,omitempty"`

	// max num players
	MaxNumPlayers int32 `json:"maxNumPlayers,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// observers
	Observers []*LcdsPlayerParticipant `json:"observers"`

	// optimistic lock
	OptimisticLock int64 `json:"optimisticLock,omitempty"`

	// owner summary
	OwnerSummary *LcdsPlayerParticipant `json:"ownerSummary,omitempty"`

	// passback data packet
	PassbackDataPacket string `json:"passbackDataPacket,omitempty"`

	// passback Url
	PassbackURL string `json:"passbackUrl,omitempty"`

	// practice game rewards disabled reasons
	PracticeGameRewardsDisabledReasons []string `json:"practiceGameRewardsDisabledReasons"`

	// room name
	RoomName string `json:"roomName,omitempty"`

	// room password
	RoomPassword string `json:"roomPassword,omitempty"`

	// spectators allowed
	SpectatorsAllowed string `json:"spectatorsAllowed,omitempty"`

	// team one
	TeamOne []*LcdsPlayerParticipant `json:"teamOne"`

	// team two
	TeamTwo []*LcdsPlayerParticipant `json:"teamTwo"`
}

// Validate validates this lcds game d t o
func (m *LcdsGameDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObservers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamOne(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamTwo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LcdsGameDTO) validateObservers(formats strfmt.Registry) error {

	if swag.IsZero(m.Observers) { // not required
		return nil
	}

	for i := 0; i < len(m.Observers); i++ {
		if swag.IsZero(m.Observers[i]) { // not required
			continue
		}

		if m.Observers[i] != nil {
			if err := m.Observers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("observers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LcdsGameDTO) validateOwnerSummary(formats strfmt.Registry) error {

	if swag.IsZero(m.OwnerSummary) { // not required
		return nil
	}

	if m.OwnerSummary != nil {
		if err := m.OwnerSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerSummary")
			}
			return err
		}
	}

	return nil
}

func (m *LcdsGameDTO) validateTeamOne(formats strfmt.Registry) error {

	if swag.IsZero(m.TeamOne) { // not required
		return nil
	}

	for i := 0; i < len(m.TeamOne); i++ {
		if swag.IsZero(m.TeamOne[i]) { // not required
			continue
		}

		if m.TeamOne[i] != nil {
			if err := m.TeamOne[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("teamOne" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LcdsGameDTO) validateTeamTwo(formats strfmt.Registry) error {

	if swag.IsZero(m.TeamTwo) { // not required
		return nil
	}

	for i := 0; i < len(m.TeamTwo); i++ {
		if swag.IsZero(m.TeamTwo[i]) { // not required
			continue
		}

		if m.TeamTwo[i] != nil {
			if err := m.TeamTwo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("teamTwo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LcdsGameDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LcdsGameDTO) UnmarshalBinary(b []byte) error {
	var res LcdsGameDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
