// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolRankedRankedQueueStats lol ranked ranked queue stats
// swagger:model LolRankedRankedQueueStats
type LolRankedRankedQueueStats struct {

	// division
	Division LolRankedLeagueDivision `json:"division,omitempty"`

	// is provisional
	IsProvisional bool `json:"isProvisional,omitempty"`

	// league points
	LeaguePoints int32 `json:"leaguePoints,omitempty"`

	// losses
	Losses int32 `json:"losses,omitempty"`

	// mini series progress
	MiniSeriesProgress string `json:"miniSeriesProgress,omitempty"`

	// previous season achieved division
	PreviousSeasonAchievedDivision LolRankedLeagueDivision `json:"previousSeasonAchievedDivision,omitempty"`

	// previous season achieved tier
	PreviousSeasonAchievedTier LolRankedLeagueTier `json:"previousSeasonAchievedTier,omitempty"`

	// previous season end division
	PreviousSeasonEndDivision LolRankedLeagueDivision `json:"previousSeasonEndDivision,omitempty"`

	// previous season end tier
	PreviousSeasonEndTier LolRankedLeagueTier `json:"previousSeasonEndTier,omitempty"`

	// provisional game threshold
	ProvisionalGameThreshold int32 `json:"provisionalGameThreshold,omitempty"`

	// provisional games remaining
	ProvisionalGamesRemaining int32 `json:"provisionalGamesRemaining,omitempty"`

	// queue type
	QueueType LolRankedLeagueQueueType `json:"queueType,omitempty"`

	// tier
	Tier LolRankedLeagueTier `json:"tier,omitempty"`

	// warnings
	Warnings *LolRankedRankedQueueWarnings `json:"warnings,omitempty"`

	// wins
	Wins int32 `json:"wins,omitempty"`
}

// Validate validates this lol ranked ranked queue stats
func (m *LolRankedRankedQueueStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousSeasonAchievedDivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousSeasonAchievedTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousSeasonEndDivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousSeasonEndTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarnings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolRankedRankedQueueStats) validateDivision(formats strfmt.Registry) error {

	if swag.IsZero(m.Division) { // not required
		return nil
	}

	if err := m.Division.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("division")
		}
		return err
	}

	return nil
}

func (m *LolRankedRankedQueueStats) validatePreviousSeasonAchievedDivision(formats strfmt.Registry) error {

	if swag.IsZero(m.PreviousSeasonAchievedDivision) { // not required
		return nil
	}

	if err := m.PreviousSeasonAchievedDivision.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("previousSeasonAchievedDivision")
		}
		return err
	}

	return nil
}

func (m *LolRankedRankedQueueStats) validatePreviousSeasonAchievedTier(formats strfmt.Registry) error {

	if swag.IsZero(m.PreviousSeasonAchievedTier) { // not required
		return nil
	}

	if err := m.PreviousSeasonAchievedTier.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("previousSeasonAchievedTier")
		}
		return err
	}

	return nil
}

func (m *LolRankedRankedQueueStats) validatePreviousSeasonEndDivision(formats strfmt.Registry) error {

	if swag.IsZero(m.PreviousSeasonEndDivision) { // not required
		return nil
	}

	if err := m.PreviousSeasonEndDivision.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("previousSeasonEndDivision")
		}
		return err
	}

	return nil
}

func (m *LolRankedRankedQueueStats) validatePreviousSeasonEndTier(formats strfmt.Registry) error {

	if swag.IsZero(m.PreviousSeasonEndTier) { // not required
		return nil
	}

	if err := m.PreviousSeasonEndTier.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("previousSeasonEndTier")
		}
		return err
	}

	return nil
}

func (m *LolRankedRankedQueueStats) validateQueueType(formats strfmt.Registry) error {

	if swag.IsZero(m.QueueType) { // not required
		return nil
	}

	if err := m.QueueType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("queueType")
		}
		return err
	}

	return nil
}

func (m *LolRankedRankedQueueStats) validateTier(formats strfmt.Registry) error {

	if swag.IsZero(m.Tier) { // not required
		return nil
	}

	if err := m.Tier.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tier")
		}
		return err
	}

	return nil
}

func (m *LolRankedRankedQueueStats) validateWarnings(formats strfmt.Registry) error {

	if swag.IsZero(m.Warnings) { // not required
		return nil
	}

	if m.Warnings != nil {
		if err := m.Warnings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("warnings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolRankedRankedQueueStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolRankedRankedQueueStats) UnmarshalBinary(b []byte) error {
	var res LolRankedRankedQueueStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
