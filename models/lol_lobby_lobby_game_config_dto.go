// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolLobbyLobbyGameConfigDto lol lobby lobby game config dto
// swagger:model LolLobbyLobbyGameConfigDto
type LolLobbyLobbyGameConfigDto struct {

	// allowable premade sizes
	AllowablePremadeSizes []int32 `json:"allowablePremadeSizes"`

	// custom lobby name
	CustomLobbyName string `json:"customLobbyName,omitempty"`

	// custom mutator name
	CustomMutatorName string `json:"customMutatorName,omitempty"`

	// custom rewards disabled reasons
	CustomRewardsDisabledReasons []string `json:"customRewardsDisabledReasons"`

	// custom spectator policy
	CustomSpectatorPolicy LolLobbyQueueCustomGameSpectatorPolicy `json:"customSpectatorPolicy,omitempty"`

	// custom spectators
	CustomSpectators []*LolLobbyLobbyParticipantDto `json:"customSpectators"`

	// custom team100
	CustomTeam100 []*LolLobbyLobbyParticipantDto `json:"customTeam100"`

	// custom team200
	CustomTeam200 []*LolLobbyLobbyParticipantDto `json:"customTeam200"`

	// game mode
	GameMode string `json:"gameMode,omitempty"`

	// is custom
	IsCustom bool `json:"isCustom,omitempty"`

	// is lobby full
	IsLobbyFull bool `json:"isLobbyFull,omitempty"`

	// is team builder managed
	IsTeamBuilderManaged bool `json:"isTeamBuilderManaged,omitempty"`

	// map Id
	MapID int32 `json:"mapId,omitempty"`

	// max human players
	MaxHumanPlayers int32 `json:"maxHumanPlayers,omitempty"`

	// max lobby size
	MaxLobbySize int32 `json:"maxLobbySize,omitempty"`

	// max team size
	MaxTeamSize int32 `json:"maxTeamSize,omitempty"`

	// pick type
	PickType string `json:"pickType,omitempty"`

	// premade size allowed
	PremadeSizeAllowed bool `json:"premadeSizeAllowed,omitempty"`

	// queue Id
	QueueID int32 `json:"queueId,omitempty"`

	// show position selector
	ShowPositionSelector bool `json:"showPositionSelector,omitempty"`
}

// Validate validates this lol lobby lobby game config dto
func (m *LolLobbyLobbyGameConfigDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomSpectatorPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomSpectators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomTeam100(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomTeam200(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolLobbyLobbyGameConfigDto) validateCustomSpectatorPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomSpectatorPolicy) { // not required
		return nil
	}

	if err := m.CustomSpectatorPolicy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("customSpectatorPolicy")
		}
		return err
	}

	return nil
}

func (m *LolLobbyLobbyGameConfigDto) validateCustomSpectators(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomSpectators) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomSpectators); i++ {
		if swag.IsZero(m.CustomSpectators[i]) { // not required
			continue
		}

		if m.CustomSpectators[i] != nil {
			if err := m.CustomSpectators[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customSpectators" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LolLobbyLobbyGameConfigDto) validateCustomTeam100(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomTeam100) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomTeam100); i++ {
		if swag.IsZero(m.CustomTeam100[i]) { // not required
			continue
		}

		if m.CustomTeam100[i] != nil {
			if err := m.CustomTeam100[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customTeam100" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LolLobbyLobbyGameConfigDto) validateCustomTeam200(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomTeam200) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomTeam200); i++ {
		if swag.IsZero(m.CustomTeam200[i]) { // not required
			continue
		}

		if m.CustomTeam200[i] != nil {
			if err := m.CustomTeam200[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customTeam200" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolLobbyLobbyGameConfigDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolLobbyLobbyGameConfigDto) UnmarshalBinary(b []byte) error {
	var res LolLobbyLobbyGameConfigDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
