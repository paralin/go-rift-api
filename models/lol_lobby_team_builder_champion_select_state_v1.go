// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolLobbyTeamBuilderChampionSelectStateV1 lol lobby team builder champion select state v1
// swagger:model LolLobbyTeamBuilderChampionSelectStateV1
type LolLobbyTeamBuilderChampionSelectStateV1 struct {

	// action set list
	ActionSetList []interface{} `json:"actionSetList"`

	// allow duplicate picks
	AllowDuplicatePicks bool `json:"allowDuplicatePicks,omitempty"`

	// allow opting out of banning
	AllowOptingOutOfBanning bool `json:"allowOptingOutOfBanning,omitempty"`

	// allow skin selection
	AllowSkinSelection bool `json:"allowSkinSelection,omitempty"`

	// battle boost state
	BattleBoostState *LolLobbyTeamBuilderTeamBuilderBoostInfo `json:"battleBoostState,omitempty"`

	// cells
	Cells *LolLobbyTeamBuilderCellsV1 `json:"cells,omitempty"`

	// ceremonies by action set index
	CeremoniesByActionSetIndex map[string]interface{} `json:"ceremoniesByActionSetIndex,omitempty"`

	// champion bench state
	ChampionBenchState *LolLobbyTeamBuilderChampionBenchStateV1 `json:"championBenchState,omitempty"`

	// current action set index
	CurrentActionSetIndex int32 `json:"currentActionSetIndex,omitempty"`

	// current time remaining millis
	CurrentTimeRemainingMillis int64 `json:"currentTimeRemainingMillis,omitempty"`

	// current total time millis
	CurrentTotalTimeMillis int64 `json:"currentTotalTimeMillis,omitempty"`

	// entitled feature state
	EntitledFeatureState *LolLobbyTeamBuilderEntitledFeatureStateV1 `json:"entitledFeatureState,omitempty"`

	// inventory draft
	InventoryDraft *LolLobbyTeamBuilderTbdInventory `json:"inventoryDraft,omitempty"`

	// is spectating
	IsSpectating bool `json:"isSpectating,omitempty"`

	// lcu skips sending loadouts gco
	LcuSkipsSendingLoadoutsGco bool `json:"lcuSkipsSendingLoadoutsGco,omitempty"`

	// local player cell Id
	LocalPlayerCellID int32 `json:"localPlayerCellId,omitempty"`

	// locked events state
	LockedEventsState *LolLobbyTeamBuilderLockedEventsStateV1 `json:"lockedEventsState,omitempty"`

	// pick intent cleared reason
	PickIntentClearedReason string `json:"pickIntentClearedReason,omitempty"`

	// reroll state
	RerollState *LolLobbyTeamBuilderRerollStateV1 `json:"rerollState,omitempty"`

	// skip champion select
	SkipChampionSelect bool `json:"skipChampionSelect,omitempty"`

	// subphase
	Subphase string `json:"subphase,omitempty"`

	// team chat room Id
	TeamChatRoomID string `json:"teamChatRoomId,omitempty"`

	// team Id
	TeamID string `json:"teamId,omitempty"`

	// trades
	Trades []*LolLobbyTeamBuilderTradeV1 `json:"trades"`
}

// Validate validates this lol lobby team builder champion select state v1
func (m *LolLobbyTeamBuilderChampionSelectStateV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBattleBoostState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCells(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChampionBenchState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntitledFeatureState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInventoryDraft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLockedEventsState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRerollState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrades(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolLobbyTeamBuilderChampionSelectStateV1) validateBattleBoostState(formats strfmt.Registry) error {

	if swag.IsZero(m.BattleBoostState) { // not required
		return nil
	}

	if m.BattleBoostState != nil {
		if err := m.BattleBoostState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("battleBoostState")
			}
			return err
		}
	}

	return nil
}

func (m *LolLobbyTeamBuilderChampionSelectStateV1) validateCells(formats strfmt.Registry) error {

	if swag.IsZero(m.Cells) { // not required
		return nil
	}

	if m.Cells != nil {
		if err := m.Cells.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cells")
			}
			return err
		}
	}

	return nil
}

func (m *LolLobbyTeamBuilderChampionSelectStateV1) validateChampionBenchState(formats strfmt.Registry) error {

	if swag.IsZero(m.ChampionBenchState) { // not required
		return nil
	}

	if m.ChampionBenchState != nil {
		if err := m.ChampionBenchState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("championBenchState")
			}
			return err
		}
	}

	return nil
}

func (m *LolLobbyTeamBuilderChampionSelectStateV1) validateEntitledFeatureState(formats strfmt.Registry) error {

	if swag.IsZero(m.EntitledFeatureState) { // not required
		return nil
	}

	if m.EntitledFeatureState != nil {
		if err := m.EntitledFeatureState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entitledFeatureState")
			}
			return err
		}
	}

	return nil
}

func (m *LolLobbyTeamBuilderChampionSelectStateV1) validateInventoryDraft(formats strfmt.Registry) error {

	if swag.IsZero(m.InventoryDraft) { // not required
		return nil
	}

	if m.InventoryDraft != nil {
		if err := m.InventoryDraft.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inventoryDraft")
			}
			return err
		}
	}

	return nil
}

func (m *LolLobbyTeamBuilderChampionSelectStateV1) validateLockedEventsState(formats strfmt.Registry) error {

	if swag.IsZero(m.LockedEventsState) { // not required
		return nil
	}

	if m.LockedEventsState != nil {
		if err := m.LockedEventsState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lockedEventsState")
			}
			return err
		}
	}

	return nil
}

func (m *LolLobbyTeamBuilderChampionSelectStateV1) validateRerollState(formats strfmt.Registry) error {

	if swag.IsZero(m.RerollState) { // not required
		return nil
	}

	if m.RerollState != nil {
		if err := m.RerollState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rerollState")
			}
			return err
		}
	}

	return nil
}

func (m *LolLobbyTeamBuilderChampionSelectStateV1) validateTrades(formats strfmt.Registry) error {

	if swag.IsZero(m.Trades) { // not required
		return nil
	}

	for i := 0; i < len(m.Trades); i++ {
		if swag.IsZero(m.Trades[i]) { // not required
			continue
		}

		if m.Trades[i] != nil {
			if err := m.Trades[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trades" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolLobbyTeamBuilderChampionSelectStateV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolLobbyTeamBuilderChampionSelectStateV1) UnmarshalBinary(b []byte) error {
	var res LolLobbyTeamBuilderChampionSelectStateV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
