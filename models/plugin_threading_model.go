// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// PluginThreadingModel plugin threading model
// swagger:model PluginThreadingModel
type PluginThreadingModel string

const (

	// PluginThreadingModelDedicated captures enum value "dedicated"
	PluginThreadingModelDedicated PluginThreadingModel = "dedicated"

	// PluginThreadingModelSequential captures enum value "sequential"
	PluginThreadingModelSequential PluginThreadingModel = "sequential"

	// PluginThreadingModelConcurrent captures enum value "concurrent"
	PluginThreadingModelConcurrent PluginThreadingModel = "concurrent"

	// PluginThreadingModelParallel captures enum value "parallel"
	PluginThreadingModelParallel PluginThreadingModel = "parallel"
)

// for schema
var pluginThreadingModelEnum []interface{}

func init() {
	var res []PluginThreadingModel
	if err := json.Unmarshal([]byte(`["dedicated","sequential","concurrent","parallel"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pluginThreadingModelEnum = append(pluginThreadingModelEnum, v)
	}
}

func (m PluginThreadingModel) validatePluginThreadingModelEnum(path, location string, value PluginThreadingModel) error {
	if err := validate.Enum(path, location, value, pluginThreadingModelEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this plugin threading model
func (m PluginThreadingModel) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePluginThreadingModelEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
