// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolEsportStreamNotificationsESportsAPIStreamgroupsRoot lol esport stream notifications e sports API streamgroups root
// swagger:model LolEsportStreamNotificationsESportsAPI_streamgroups_root
type LolEsportStreamNotificationsESportsAPIStreamgroupsRoot struct {

	// highlander tournaments
	HighlanderTournaments []*LolEsportStreamNotificationsEsportsAPIHighlanderTournaments `json:"highlanderTournaments"`

	// streamgroups
	Streamgroups []*LolEsportStreamNotificationsESportsAPIStreamgroups `json:"streamgroups"`

	// teams
	Teams []*LolEsportStreamNotificationsEsportsAPITeams `json:"teams"`
}

// Validate validates this lol esport stream notifications e sports API streamgroups root
func (m *LolEsportStreamNotificationsESportsAPIStreamgroupsRoot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHighlanderTournaments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreamgroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolEsportStreamNotificationsESportsAPIStreamgroupsRoot) validateHighlanderTournaments(formats strfmt.Registry) error {

	if swag.IsZero(m.HighlanderTournaments) { // not required
		return nil
	}

	for i := 0; i < len(m.HighlanderTournaments); i++ {
		if swag.IsZero(m.HighlanderTournaments[i]) { // not required
			continue
		}

		if m.HighlanderTournaments[i] != nil {
			if err := m.HighlanderTournaments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("highlanderTournaments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LolEsportStreamNotificationsESportsAPIStreamgroupsRoot) validateStreamgroups(formats strfmt.Registry) error {

	if swag.IsZero(m.Streamgroups) { // not required
		return nil
	}

	for i := 0; i < len(m.Streamgroups); i++ {
		if swag.IsZero(m.Streamgroups[i]) { // not required
			continue
		}

		if m.Streamgroups[i] != nil {
			if err := m.Streamgroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("streamgroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LolEsportStreamNotificationsESportsAPIStreamgroupsRoot) validateTeams(formats strfmt.Registry) error {

	if swag.IsZero(m.Teams) { // not required
		return nil
	}

	for i := 0; i < len(m.Teams); i++ {
		if swag.IsZero(m.Teams[i]) { // not required
			continue
		}

		if m.Teams[i] != nil {
			if err := m.Teams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("teams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolEsportStreamNotificationsESportsAPIStreamgroupsRoot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolEsportStreamNotificationsESportsAPIStreamgroupsRoot) UnmarshalBinary(b []byte) error {
	var res LolEsportStreamNotificationsESportsAPIStreamgroupsRoot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
