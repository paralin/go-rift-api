// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolClashRosterMember lol clash roster member
// swagger:model LolClashRosterMember
type LolClashRosterMember struct {

	// buyin type
	BuyinType TicketType `json:"buyinType,omitempty"`

	// current buyin
	CurrentBuyin int32 `json:"currentBuyin,omitempty"`

	// incoming offers
	IncomingOffers []*LolClashTicketOffer `json:"incomingOffers"`

	// is sub for other team
	IsSubForOtherTeam bool `json:"isSubForOtherTeam,omitempty"`

	// is subbed out
	IsSubbedOut bool `json:"isSubbedOut,omitempty"`

	// is substitute
	IsSubstitute bool `json:"isSubstitute,omitempty"`

	// position
	Position Position `json:"position,omitempty"`

	// previous buyin
	PreviousBuyin int32 `json:"previousBuyin,omitempty"`

	// replaced summoner Id
	ReplacedSummonerID int64 `json:"replacedSummonerId,omitempty"`

	// state
	State LolClashRosterMemberState `json:"state,omitempty"`

	// summoner Id
	SummonerID int64 `json:"summonerId,omitempty"`

	// tier
	Tier int32 `json:"tier,omitempty"`
}

// Validate validates this lol clash roster member
func (m *LolClashRosterMember) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuyinType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncomingOffers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolClashRosterMember) validateBuyinType(formats strfmt.Registry) error {

	if swag.IsZero(m.BuyinType) { // not required
		return nil
	}

	if err := m.BuyinType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("buyinType")
		}
		return err
	}

	return nil
}

func (m *LolClashRosterMember) validateIncomingOffers(formats strfmt.Registry) error {

	if swag.IsZero(m.IncomingOffers) { // not required
		return nil
	}

	for i := 0; i < len(m.IncomingOffers); i++ {
		if swag.IsZero(m.IncomingOffers[i]) { // not required
			continue
		}

		if m.IncomingOffers[i] != nil {
			if err := m.IncomingOffers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("incomingOffers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LolClashRosterMember) validatePosition(formats strfmt.Registry) error {

	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if err := m.Position.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("position")
		}
		return err
	}

	return nil
}

func (m *LolClashRosterMember) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolClashRosterMember) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolClashRosterMember) UnmarshalBinary(b []byte) error {
	var res LolClashRosterMember
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
