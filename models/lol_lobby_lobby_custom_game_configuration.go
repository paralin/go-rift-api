// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolLobbyLobbyCustomGameConfiguration lol lobby lobby custom game configuration
// swagger:model LolLobbyLobbyCustomGameConfiguration
type LolLobbyLobbyCustomGameConfiguration struct {

	// game mode
	GameMode string `json:"gameMode,omitempty"`

	// game server region
	GameServerRegion string `json:"gameServerRegion,omitempty"`

	// game type config
	GameTypeConfig *LolLobbyQueueGameTypeConfig `json:"gameTypeConfig,omitempty"`

	// map Id
	MapID int32 `json:"mapId,omitempty"`

	// max player count
	MaxPlayerCount int32 `json:"maxPlayerCount,omitempty"`

	// mutators
	Mutators *LolLobbyQueueGameTypeConfig `json:"mutators,omitempty"`

	// spectator policy
	SpectatorPolicy LolLobbyQueueCustomGameSpectatorPolicy `json:"spectatorPolicy,omitempty"`

	// team size
	TeamSize int32 `json:"teamSize,omitempty"`

	// tournament game mode
	TournamentGameMode string `json:"tournamentGameMode,omitempty"`

	// tournament passback data packet
	TournamentPassbackDataPacket string `json:"tournamentPassbackDataPacket,omitempty"`

	// tournament passback Url
	TournamentPassbackURL string `json:"tournamentPassbackUrl,omitempty"`
}

// Validate validates this lol lobby lobby custom game configuration
func (m *LolLobbyLobbyCustomGameConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGameTypeConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMutators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpectatorPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolLobbyLobbyCustomGameConfiguration) validateGameTypeConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.GameTypeConfig) { // not required
		return nil
	}

	if m.GameTypeConfig != nil {
		if err := m.GameTypeConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gameTypeConfig")
			}
			return err
		}
	}

	return nil
}

func (m *LolLobbyLobbyCustomGameConfiguration) validateMutators(formats strfmt.Registry) error {

	if swag.IsZero(m.Mutators) { // not required
		return nil
	}

	if m.Mutators != nil {
		if err := m.Mutators.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mutators")
			}
			return err
		}
	}

	return nil
}

func (m *LolLobbyLobbyCustomGameConfiguration) validateSpectatorPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.SpectatorPolicy) { // not required
		return nil
	}

	if err := m.SpectatorPolicy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("spectatorPolicy")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolLobbyLobbyCustomGameConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolLobbyLobbyCustomGameConfiguration) UnmarshalBinary(b []byte) error {
	var res LolLobbyLobbyCustomGameConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
