// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolClashPlayerNotificationData lol clash player notification data
// swagger:model LolClashPlayerNotificationData
type LolClashPlayerNotificationData struct {

	// key suffix
	KeySuffix string `json:"keySuffix,omitempty"`

	// notification
	Notification *LolClashPlayerNotification `json:"notification,omitempty"`

	// notify reason
	NotifyReason LolClashNotifyReason `json:"notifyReason,omitempty"`

	// roster notify reason
	RosterNotifyReason LolClashRosterNotifyReason `json:"rosterNotifyReason,omitempty"`

	// source summoner Id
	SourceSummonerID int64 `json:"sourceSummonerId,omitempty"`

	// target summoner Id
	TargetSummonerID int64 `json:"targetSummonerId,omitempty"`

	// tournament notify reason
	TournamentNotifyReason LolClashTournamentNotifyReason `json:"tournamentNotifyReason,omitempty"`
}

// Validate validates this lol clash player notification data
func (m *LolClashPlayerNotificationData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNotification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotifyReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRosterNotifyReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTournamentNotifyReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolClashPlayerNotificationData) validateNotification(formats strfmt.Registry) error {

	if swag.IsZero(m.Notification) { // not required
		return nil
	}

	if m.Notification != nil {
		if err := m.Notification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notification")
			}
			return err
		}
	}

	return nil
}

func (m *LolClashPlayerNotificationData) validateNotifyReason(formats strfmt.Registry) error {

	if swag.IsZero(m.NotifyReason) { // not required
		return nil
	}

	if err := m.NotifyReason.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("notifyReason")
		}
		return err
	}

	return nil
}

func (m *LolClashPlayerNotificationData) validateRosterNotifyReason(formats strfmt.Registry) error {

	if swag.IsZero(m.RosterNotifyReason) { // not required
		return nil
	}

	if err := m.RosterNotifyReason.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rosterNotifyReason")
		}
		return err
	}

	return nil
}

func (m *LolClashPlayerNotificationData) validateTournamentNotifyReason(formats strfmt.Registry) error {

	if swag.IsZero(m.TournamentNotifyReason) { // not required
		return nil
	}

	if err := m.TournamentNotifyReason.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tournamentNotifyReason")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolClashPlayerNotificationData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolClashPlayerNotificationData) UnmarshalBinary(b []byte) error {
	var res LolClashPlayerNotificationData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
