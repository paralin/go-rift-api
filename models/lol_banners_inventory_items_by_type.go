// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolBannersInventoryItemsByType lol banners inventory items by type
// swagger:model LolBannersInventoryItemsByType
type LolBannersInventoryItemsByType struct {

	// t o u r n a m e n t f l a g
	TOURNAMENTFLAG []*LolBannersTournamentFlagInventoryItem `json:"TOURNAMENT_FLAG"`

	// t o u r n a m e n t f RAM e
	TOURNAMENTFRAME []*LolBannersTournamentFrameInventoryItem `json:"TOURNAMENT_FRAME"`
}

// Validate validates this lol banners inventory items by type
func (m *LolBannersInventoryItemsByType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTOURNAMENTFLAG(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTOURNAMENTFRAME(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolBannersInventoryItemsByType) validateTOURNAMENTFLAG(formats strfmt.Registry) error {

	if swag.IsZero(m.TOURNAMENTFLAG) { // not required
		return nil
	}

	for i := 0; i < len(m.TOURNAMENTFLAG); i++ {
		if swag.IsZero(m.TOURNAMENTFLAG[i]) { // not required
			continue
		}

		if m.TOURNAMENTFLAG[i] != nil {
			if err := m.TOURNAMENTFLAG[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TOURNAMENT_FLAG" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LolBannersInventoryItemsByType) validateTOURNAMENTFRAME(formats strfmt.Registry) error {

	if swag.IsZero(m.TOURNAMENTFRAME) { // not required
		return nil
	}

	for i := 0; i < len(m.TOURNAMENTFRAME); i++ {
		if swag.IsZero(m.TOURNAMENTFRAME[i]) { // not required
			continue
		}

		if m.TOURNAMENTFRAME[i] != nil {
			if err := m.TOURNAMENTFRAME[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TOURNAMENT_FRAME" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolBannersInventoryItemsByType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolBannersInventoryItemsByType) UnmarshalBinary(b []byte) error {
	var res LolBannersInventoryItemsByType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
