// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// NpeRewardPackMetadata npe reward pack metadata
// swagger:model NpeRewardPackMetadata
type NpeRewardPackMetadata struct {

	// index
	Index int32 `json:"index,omitempty"`

	// major reward
	MajorReward *NpeReward `json:"majorReward,omitempty"`

	// minor rewards
	MinorRewards []*NpeReward `json:"minorRewards"`

	// premium reward
	PremiumReward bool `json:"premiumReward,omitempty"`

	// reward key
	RewardKey string `json:"rewardKey,omitempty"`
}

// Validate validates this npe reward pack metadata
func (m *NpeRewardPackMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMajorReward(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinorRewards(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NpeRewardPackMetadata) validateMajorReward(formats strfmt.Registry) error {

	if swag.IsZero(m.MajorReward) { // not required
		return nil
	}

	if m.MajorReward != nil {
		if err := m.MajorReward.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("majorReward")
			}
			return err
		}
	}

	return nil
}

func (m *NpeRewardPackMetadata) validateMinorRewards(formats strfmt.Registry) error {

	if swag.IsZero(m.MinorRewards) { // not required
		return nil
	}

	for i := 0; i < len(m.MinorRewards); i++ {
		if swag.IsZero(m.MinorRewards[i]) { // not required
			continue
		}

		if m.MinorRewards[i] != nil {
			if err := m.MinorRewards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("minorRewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NpeRewardPackMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NpeRewardPackMetadata) UnmarshalBinary(b []byte) error {
	var res NpeRewardPackMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
