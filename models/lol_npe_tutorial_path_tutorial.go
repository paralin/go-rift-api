// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolNpeTutorialPathTutorial lol npe tutorial path tutorial
// swagger:model LolNpeTutorialPathTutorial
type LolNpeTutorialPathTutorial struct {

	// background Url
	BackgroundURL string `json:"backgroundUrl,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// is viewed
	IsViewed bool `json:"isViewed,omitempty"`

	// queue Id
	QueueID string `json:"queueId,omitempty"`

	// rewards
	Rewards []*LolNpeTutorialPathTutorialReward `json:"rewards"`

	// status
	Status LolNpeTutorialPathTutorialStatus `json:"status,omitempty"`

	// step number
	StepNumber int32 `json:"stepNumber,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type LolNpeTutorialPathTutorialType `json:"type,omitempty"`

	// use chosen champion
	UseChosenChampion bool `json:"useChosenChampion,omitempty"`

	// use quick search matchmaking
	UseQuickSearchMatchmaking bool `json:"useQuickSearchMatchmaking,omitempty"`
}

// Validate validates this lol npe tutorial path tutorial
func (m *LolNpeTutorialPathTutorial) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRewards(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolNpeTutorialPathTutorial) validateRewards(formats strfmt.Registry) error {

	if swag.IsZero(m.Rewards) { // not required
		return nil
	}

	for i := 0; i < len(m.Rewards); i++ {
		if swag.IsZero(m.Rewards[i]) { // not required
			continue
		}

		if m.Rewards[i] != nil {
			if err := m.Rewards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LolNpeTutorialPathTutorial) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *LolNpeTutorialPathTutorial) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolNpeTutorialPathTutorial) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolNpeTutorialPathTutorial) UnmarshalBinary(b []byte) error {
	var res LolNpeTutorialPathTutorial
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
