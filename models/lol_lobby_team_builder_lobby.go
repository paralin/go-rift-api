// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LolLobbyTeamBuilderLobby lol lobby team builder lobby
// swagger:model LolLobbyTeamBuilderLobby
type LolLobbyTeamBuilderLobby struct {

	// allowable premade sizes
	AllowablePremadeSizes []int32 `json:"allowablePremadeSizes"`

	// auto fill eligible
	AutoFillEligible bool `json:"autoFillEligible,omitempty"`

	// auto fill protected for promos
	AutoFillProtectedForPromos bool `json:"autoFillProtectedForPromos,omitempty"`

	// auto fill protected for streaking
	AutoFillProtectedForStreaking bool `json:"autoFillProtectedForStreaking,omitempty"`

	// can start matchmaking
	CanStartMatchmaking bool `json:"canStartMatchmaking,omitempty"`

	// chat room Id
	ChatRoomID string `json:"chatRoomId,omitempty"`

	// chat room key
	ChatRoomKey string `json:"chatRoomKey,omitempty"`

	// invitation Id
	InvitationID string `json:"invitationId,omitempty"`

	// invitations
	Invitations []*LolLobbyTeamBuilderLobbyInvitation `json:"invitations"`

	// is team builder managed
	IsTeamBuilderManaged bool `json:"isTeamBuilderManaged,omitempty"`

	// local member
	LocalMember *LolLobbyTeamBuilderLobbyMember `json:"localMember,omitempty"`

	// members
	Members []*LolLobbyTeamBuilderLobbyMember `json:"members"`

	// premade size allowed
	PremadeSizeAllowed bool `json:"premadeSizeAllowed,omitempty"`

	// queue Id
	QueueID int32 `json:"queueId,omitempty"`

	// removal reason
	RemovalReason LolLobbyTeamBuilderLobbyRemovedFromGameReason `json:"removalReason,omitempty"`

	// required position coverage met
	RequiredPositionCoverageMet bool `json:"requiredPositionCoverageMet,omitempty"`

	// show position excluder
	ShowPositionExcluder bool `json:"showPositionExcluder,omitempty"`

	// show position selector
	ShowPositionSelector bool `json:"showPositionSelector,omitempty"`

	// specifiable position preferences
	SpecifiablePositionPreferences []string `json:"specifiablePositionPreferences"`

	// was kicked
	WasKicked bool `json:"wasKicked,omitempty"`
}

// Validate validates this lol lobby team builder lobby
func (m *LolLobbyTeamBuilderLobby) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInvitations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalMember(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemovalReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LolLobbyTeamBuilderLobby) validateInvitations(formats strfmt.Registry) error {

	if swag.IsZero(m.Invitations) { // not required
		return nil
	}

	for i := 0; i < len(m.Invitations); i++ {
		if swag.IsZero(m.Invitations[i]) { // not required
			continue
		}

		if m.Invitations[i] != nil {
			if err := m.Invitations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("invitations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LolLobbyTeamBuilderLobby) validateLocalMember(formats strfmt.Registry) error {

	if swag.IsZero(m.LocalMember) { // not required
		return nil
	}

	if m.LocalMember != nil {
		if err := m.LocalMember.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localMember")
			}
			return err
		}
	}

	return nil
}

func (m *LolLobbyTeamBuilderLobby) validateMembers(formats strfmt.Registry) error {

	if swag.IsZero(m.Members) { // not required
		return nil
	}

	for i := 0; i < len(m.Members); i++ {
		if swag.IsZero(m.Members[i]) { // not required
			continue
		}

		if m.Members[i] != nil {
			if err := m.Members[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LolLobbyTeamBuilderLobby) validateRemovalReason(formats strfmt.Registry) error {

	if swag.IsZero(m.RemovalReason) { // not required
		return nil
	}

	if err := m.RemovalReason.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("removalReason")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LolLobbyTeamBuilderLobby) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LolLobbyTeamBuilderLobby) UnmarshalBinary(b []byte) error {
	var res LolLobbyTeamBuilderLobby
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
