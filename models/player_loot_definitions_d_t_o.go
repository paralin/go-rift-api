// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PlayerLootDefinitionsDTO player loot definitions d t o
// swagger:model PlayerLootDefinitionsDTO
type PlayerLootDefinitionsDTO struct {

	// loot item list
	LootItemList *LootItemListClientDTO `json:"lootItemList,omitempty"`

	// player loot
	PlayerLoot []*PlayerLootDTO `json:"playerLoot"`

	// query result
	QueryResult *QueryResultDTO `json:"queryResult,omitempty"`

	// recipe list
	RecipeList *LootLcdsRecipeListClientDTO `json:"recipeList,omitempty"`
}

// Validate validates this player loot definitions d t o
func (m *PlayerLootDefinitionsDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLootItemList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlayerLoot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipeList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlayerLootDefinitionsDTO) validateLootItemList(formats strfmt.Registry) error {

	if swag.IsZero(m.LootItemList) { // not required
		return nil
	}

	if m.LootItemList != nil {
		if err := m.LootItemList.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lootItemList")
			}
			return err
		}
	}

	return nil
}

func (m *PlayerLootDefinitionsDTO) validatePlayerLoot(formats strfmt.Registry) error {

	if swag.IsZero(m.PlayerLoot) { // not required
		return nil
	}

	for i := 0; i < len(m.PlayerLoot); i++ {
		if swag.IsZero(m.PlayerLoot[i]) { // not required
			continue
		}

		if m.PlayerLoot[i] != nil {
			if err := m.PlayerLoot[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("playerLoot" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PlayerLootDefinitionsDTO) validateQueryResult(formats strfmt.Registry) error {

	if swag.IsZero(m.QueryResult) { // not required
		return nil
	}

	if m.QueryResult != nil {
		if err := m.QueryResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queryResult")
			}
			return err
		}
	}

	return nil
}

func (m *PlayerLootDefinitionsDTO) validateRecipeList(formats strfmt.Registry) error {

	if swag.IsZero(m.RecipeList) { // not required
		return nil
	}

	if m.RecipeList != nil {
		if err := m.RecipeList.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recipeList")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlayerLootDefinitionsDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlayerLootDefinitionsDTO) UnmarshalBinary(b []byte) error {
	var res PlayerLootDefinitionsDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
